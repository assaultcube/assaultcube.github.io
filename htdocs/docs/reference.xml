<?xml version="1.0" encoding="utf-8"?>
<!--
  To turn this XML document into a "docs.cfg" that can be read by the AssaultCube engine, simply
  uncomment the below xml-stylesheet. Then comment the xml-stylesheet below that one. Save your changes.
  Then refresh this XML document in your web browser and copy/paste the output into ./config/docs.cfg

  <?xml-stylesheet type="text/xsl" href="xml/cuberef2cubescript.xslt"?>
-->

<!--
  You may be able to redistribute this content under specific conditions.
  Please read the licensing information, available @ http://assault.cubers.net/docs/license.html for the
  conditions that would apply to what you may be redistributing.
-->

<?xml-stylesheet type="text/xsl" href="xml/cuberef2xhtml.xslt"?>

<!-- Please ensure the following when writing content for this reference.xml:
  General
    * Do NOT use any XML editor that rapes the formatting!!!
       * This is a big file, please ensure it remains readable and use correct indentations.
       * Please see how the markup is currently written and write your new markup accordingly!
    * Do NOT write tutorial-like content, this is a reference.
       * Focus on the technical description of identifiers as a single unit.
       * Some examples may be okay.
    * See the XML schema (./xml/cuberef.xsd) for details on the elements.
    * Use a CDATA section for content that requires special characters.

  Sections
    * A section represents a group of identifiers.
    * Choose sections based on the usage areas of identifiers.

  Identifiers
    * An identifier represents a command, variable or an alias that is available through CubeScript.
    * Identifiers must be unique across sections (i.e. don't double-up!)
    * Avoid documenting CubeScript in ./config/*  (such as those in default.cfg) that aren't important.

  Description
    * Provide a short and concise description of what the identifier does or represents, omit details.

  Arguments
    * Use a single character token if possible.
    * Keep the argument description simple, write a remark for details.
    * Write restricted integer values in the way of 0..3 (0 to 3) and 1..* (0 to 'infinite').
    * If no restrictions apply to values, specify the pseudo data type.
    * If the meaning of the arguments depends on other arguments, create multiple identifiers
      with the name containing the depending argument. Example: 'newent type v1 v2 v3 v4' depends
      on the type, therefore it's split to 'newent light', 'newent ammo', etc.

  Remarks
    * Describe details and special behavior.
    * Give _short_ examples if needed.

  References
    * Refer to other identifiers that are _directly_ related.
    * Refer to _official_ online sources, like the wiki.
    * Name other (offline) sources without URI or identifier.
-->


<cuberef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://assault.cubers.net/docs/xml"
name="AssaultCube Documentation" version="Current" xsi:schemaLocation="xml/cuberef.xsd">
  <sections sort="true">
  <!--
    Sections available: General, Gameplay, Game modes, Visuals, Heads-Up Display, Sound
                        Server commands, Editing, Editing configs, Menus, Ingame Reference, TODO
  -->

    <section name="CubeScript" sortindex="00">
      <description>This section describes identifiers that are closely related to the CubeScript language.</description>
      <identifiers sort="true">

        <command name="&lt;f">
          <description>Compares if a particular floating-point value is smaller than another floating-point value.</description>
          <return token="F" description="(true)1||0(false)"/>
          <arguments>
            <argument token="A" description="The first value."/>
            <argument token="B" description="The second value."/>
          </arguments>
        </command>

        <command name="&lt;=f">
          <description>Compares if a particular floating-point value is less than or equal to another floating-point value.</description>
          <return token="F" description="(true)1||0(false)"/>
          <arguments>
            <argument token="A" description="The first value."/>
            <argument token="B" description="The second value."/>
          </arguments>
        </command>

        <command name="=f">
          <description>Compares if a particular floating-point value is equal to another floating-point value.</description>
          <return token="F" description="(true)1||0(false)"/>
          <arguments>
            <argument token="A" description="The first value."/>
            <argument token="B" description="The second value."/>
          </arguments>
        </command>

        <command name="&gt;f">
          <description>Determines if the first floating-point value is greater than the second floating-point value.</description>
          <return token="F" description="(true)1||0(false)"/>
          <arguments>
            <argument token="A" description="the first value"/>
            <argument token="B" description="the second value"/>
          </arguments>
        </command>

        <command name="&gt;=f">
          <description>Determines if the first floating-point value is greater than or equal to the second floating-point value.</description>
          <return token="F" description="(true)1||0(false)"/>
          <arguments>
            <argument token="A" description="the first value"/>
            <argument token="B" description="the second value"/>
          </arguments>
        </command>

        <command name="!=f">
          <description>Determines if the first floating-point value is not equal to the second floating-point value.</description>
          <return token="F" description="(true)1||0(false)"/>
          <arguments>
            <argument token="A" description="the first value"/>
            <argument token="B" description="the second value"/>
          </arguments>
        </command>

        <command name="result">
          <description>Sets the result value of a CubeScript block.</description>
          <arguments>
            <argument token="R" description="the result"/>
          </arguments>
          <references>
            <identifierReference identifier="execute"/>
            <identifierReference identifier="return"/>
          </references>
        </command>

        <!-- FIXME: Obviously incorrect? Bad copy/paste! -->
        <command name="return">
          <description>Sets the result value of a CubeScript block.</description>
          <arguments>
            <argument token="R" description="the result"/>
          </arguments>
          <references>
            <identifierReference identifier="execute"/>
            <identifierReference identifier="result"/>
          </references>
        </command>

        <command name="execute">
          <description>Executes the specified string as CubeScript.</description>
          <arguments>
            <argument token="S" description="the string to execute"/>
          </arguments>
          <examples>
            <example>
              <code><![CDATA[execute (concat echo (addpunct fov 3))]]></code>
              <explanation>Example output: 90.0</explanation>
            </example>
          </examples>
        </command>

        <command name="push">
          <description>Temporarily redefines the value of an alias.</description>
          <arguments>
            <argument token="N" description="alias name"/>
            <argument token="A" description="action"/>
          </arguments>
          <examples>
            <example>
              <code><![CDATA[p = 1; push p 2; echo $p]]></code>
              <explanation>Output: 2</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="pop"/>
          </references>
        </command>

        <command name="getalias">
          <description>return the value of the alias</description>
          <arguments>
            <argument token="N" description="alias name"/>
          </arguments>
          <references>
            <identifierReference identifier="storesets"/>
          </references>
        </command>

        <!-- FIXME: (getalias) can not handle built-in client variables
        <command name="getvar">
          <description>return the value of the engine variable</description>
          <arguments>
            <argument token="N" description="identifier name"/>
          </arguments>
          <references>
            <identifierReference identifier="getalias"/>
          </references>
        </command>
        -->

        <command name="isIdent">
          <description>returns whether or not there is an identifier by that name</description>
          <arguments>
            <argument token="N" description="identifier name"/>
          </arguments>
        </command>

        <command name="modf">
          <description>Performs a floating-point modulo operation.</description>
          <arguments>
            <argument token="A" description="the dividend"/>
            <argument token="B" description="the divisor"/>
          </arguments>
          <return token="F" description="the modulo value"/>
          <examples>
            <example>
              <code><![CDATA[echo (modf 7.5 12.5)]]></code>
              <explanation>Output: 7.5</explanation>
            </example>
            <example>
              <code><![CDATA[echo (modf 17.5 12.5)]]></code>
              <explanation>Output: 5.0</explanation>
            </example>
          </examples>
        </command>

        <command name="powf">
          <description>Returns A raised to the power of B (floating-point)</description>
          <arguments>
            <argument token="A" description="the mantissa"/>
            <argument token="B" description="the exponent"/>
          </arguments>
          <return token="F" description="A raised to the power of B"/>
        </command>

        <command name="pop">
          <description>Resets a previously pushed alias to it's original value.</description>
          <arguments>
            <argument token="A" description="alias"/>
          </arguments>
          <examples>
            <example>
              <code><![CDATA[pop p; echo $p]]></code>
              <explanation>Output: 1</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="push"/>
          </references>
        </command>

        <command name="+">
          <description>Performs an addition.</description>
          <remarks>
            <remark>
              Example: echo the sum of x and y is (+ $x $y)
            </remark>
          </remarks>
          <arguments>
            <argument token="A" description="the first summand"/>
            <argument token="B" description="the second summand"/>
          </arguments>
          <return token="N" description="the sum"/>
        </command>

        <command name="-">
          <description>Performs a subtraction.</description>
          <arguments>
            <argument token="A" description="the minuend"/>
            <argument token="B" description="the subtrahend"/>
          </arguments>
          <return token="N" description="the difference"/>
        </command>

        <command name="*">
          <description>Performs a multiplication.</description>
          <arguments>
            <argument token="A" description="the multiplicand"/>
            <argument token="B" description="the multiplier"/>
          </arguments>
          <return token="N" description="the product"/>
        </command>

        <command name="div">
          <description>Performs an integer division.</description>
          <arguments>
            <argument token="A" description="the dividend"/>
            <argument token="B" description="the divisor"/>
          </arguments>
          <return token="N" description="the quotient (integer)"/>
        </command>

        <command name="-f">
          <description>Subtracts two floating-point numbers.</description>
          <arguments>
            <argument token="A" description="the minuend" valueNotes="float"/>
            <argument token="B" description="the subtrahend" valueNotes="float"/>
          </arguments>
          <return token="F" description="the difference"/>
        </command>

        <command name="+f">
          <description>Adds up two floating-point numbers.</description>
          <arguments>
            <argument token="A" description="the first summand" valueNotes="float"/>
            <argument token="B" description="the second summand" valueNotes="float"/>
          </arguments>
          <return token="F" description="the sum"/>
        </command>

        <command name="*f">
          <description>Performs a floating point multiplication.</description>
          <arguments>
            <argument token="A" description="the multiplicand"/>
            <argument token="B" description="the multiplier"/>
          </arguments>
          <return token="N" description="the product"/>
        </command>

        <command name="divf">
          <description>Performs a division with floating-point precision.</description>
          <arguments>
            <argument token="A" description="" valueNotes="the dividend"/>
            <argument token="B" description="" valueNotes="the divisor"/>
          </arguments>
          <return token="F" description="the quotient (floating-point)"/>
        </command>

        <command name="+=">
          <description>Adds a value to an alias.</description>
          <remarks>
            <remark>
              Example: += foo 1337
            </remark>
          </remarks>
          <arguments>
            <argument token="A" description="the alias to add to"/>
            <argument token="B" description="value to be added"/>
          </arguments>
        </command>
        
        <command name="++">
          <description>Increments an alias by 1.</description>
          <arguments>
            <argument token="A" description="the alias name"/>
          </arguments>
          <examples>
            <example>
              <code>i = 0; ++ i; echo $i</code>
              <explanation>Output: 1</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="--"/>
            <identifierReference identifier="++f"/>
            <identifierReference identifier="--f"/>
          </references>
        </command>
        
        <command name="++f">
          <description>Increments an alias by 1.</description>
          <arguments>
            <argument token="A" description="the alias name"/>
          </arguments>
          <examples>
            <example>
              <code>i = 2.14; ++f i; echo $i</code>
              <explanation>Output: 3.14</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="--f"/>
            <identifierReference identifier="++"/>
            <identifierReference identifier="--"/>
          </references>
        </command>

        <command name="-=">
          <description>Subtracts a value from an alias.</description>
          <remarks>
            <remark>
              Example: -= foo 1337
            </remark>
          </remarks>
          <arguments>
            <argument token="A" description="the alias to subtract from"/>
            <argument token="B" description="value to be subtracted"/>
          </arguments>
        </command>
        
        <command name="--">
          <description>Decrements an alias by 1.</description>
          <arguments>
            <argument token="A" description="the alias name"/>
          </arguments>
          <examples>
            <example>
              <code>i = 0; -- i; echo $i</code>
              <explanation>Output: -1</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="++"/>
            <identifierReference identifier="--f"/>
            <identifierReference identifier="++f"/>
          </references>
        </command>
        
        <command name="--f">
          <description>Decrements an alias by 1.</description>
          <arguments>
            <argument token="A" description="the alias name"/>
          </arguments>
          <examples>
            <example>
              <code>i = 4.14; --f i; echo $i</code>
              <explanation>Output: 3.14</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="++f"/>
            <identifierReference identifier="--"/>
            <identifierReference identifier="++"/>
          </references>
        </command>

        <command name="*=">
          <description>Multiplies an alias by a value.</description>
          <remarks>
            <remark>
              Example: *= foo 1337
            </remark>
          </remarks>
          <arguments>
            <argument token="A" description="the alias to be multiplied"/>
            <argument token="B" description="the multiplier"/>
          </arguments>
        </command>

        <command name="div=">
          <description>Divides an alias by a value.</description>
          <remarks>
            <remark>
              Example: div= foo 1337
            </remark>
          </remarks>
          <arguments>
            <argument token="A" description="the alias to be divided"/>
            <argument token="B" description="the divisor"/>
          </arguments>
        </command>

        <command name="+=f">
          <description>Adds a floating-point value to an alias.</description>
          <remarks>
            <remark>
              Example: +=f foo 13.37
            </remark>
          </remarks>
          <arguments>
            <argument token="A" description="the alias to add to"/>
            <argument token="B" description="value to be added"/>
          </arguments>
        </command>

        <command name="-=f">
          <description>Subtracts a floating-point value from an alias.</description>
          <remarks>
            <remark>
              Example: -=f foo 13.37
            </remark>
          </remarks>
          <arguments>
            <argument token="A" description="the alias to subtract from"/>
            <argument token="B" description="value to be subtracted"/>
          </arguments>
        </command>

        <command name="*=f">
          <description>Multiplies an alias by a floating-point value.</description>
          <remarks>
            <remark>
              Example: *=f foo 13.37
            </remark>
          </remarks>
          <arguments>
            <argument token="A" description="the alias to be multiplied"/>
            <argument token="B" description="the multiplier"/>
          </arguments>
        </command>

        <command name="div=f">
          <description>Divides an alias by a floating-point value.</description>
          <remarks>
            <remark>
              Example: div=f foo 13.37
            </remark>
          </remarks>
          <arguments>
            <argument token="A" description="the alias to be divided"/>
            <argument token="B" description="the divisor"/>
          </arguments>
        </command>

        <command name="mod">
          <description>Performs a modulo operation.</description>
          <arguments>
            <argument token="A" description="the dividend"/>
            <argument token="B" description="the divisor"/>
          </arguments>
          <return token="N" description="the modulo value"/>
        </command>

        <command name="=">
          <description>Determines if two values are equal.</description>
          <arguments>
            <argument token="A" description="first value"/>
            <argument token="B" description="second value"/>
          </arguments>
          <return token="N" description="the equality" valueNotes="1 (equal) or 0 (not equal)"/>
          <examples>
            <example>
              <code><![CDATA[echo there are only (concatword (= 1 1) (= 1 0)) types of people in the world]]></code>
              <explanation>Output: there are only 10 types of people in the world</explanation>
            </example>
          </examples>
        </command>

        <command name="!=">
          <description>Determines if two values are not equal.</description>
          <arguments>
            <argument token="A" description="first value"/>
            <argument token="B" description="second value"/>
          </arguments>
          <return token="N" description="the inequality" valueNotes="1 (not equal) or 0 (equal)"/>
        </command>

        <command name="&lt;">
          <description>Determines if a value is smaller than a second value.</description>
          <arguments>
            <argument token="A" description="the first value"/>
            <argument token="B" description="the second value"/>
          </arguments>
          <return token="N" description="the comparison" valueNotes="1 (smaller) or 0 (not smaller)"/>
        </command>

        <command name="&gt;">
          <description>Determines if a value is bigger than a second value.</description>
          <arguments>
            <argument token="A" description="the first value"/>
            <argument token="B" description="the second value"/>
          </arguments>
          <return token="N" description="the comparison" valueNotes="1 (bigger) or 0 (not bigger)"/>
        </command>

        <command name="&lt;=">
          <description>Determines if a values is less than or equal than a second value.</description>
          <arguments>
            <argument token="A" description="the first value"/>
            <argument token="B" description="the second value"/>
          </arguments>
        </command>

        <command name="&gt;=">
          <description>Determines if a values is greater than or equal than a second value.</description>
          <arguments>
            <argument token="A" description="the first value"/>
            <argument token="B" description="the second value"/>
          </arguments>
        </command>

        <command name="&amp;&amp;">
          <description>logical AND.</description>
          <examples>
            <example>
              <code><![CDATA[echo (&& 1 1)]]></code>
              <explanation>Output: 1</explanation>
            </example>
            <example>
              <code><![CDATA[echo (&& 1 0)]]></code>
              <explanation>Output: 0</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="A" description="first value"/>
            <argument token="B" description="second value"/>
          </arguments>
          <return token="N" description="A AND B"/>
        </command>

        <command name="||">
          <description>logical OR.</description>
          <examples>
            <example>
              <code><![CDATA[echo (|| 1 0)]]></code>
              <explanation>output: 1</explanation>
            </example>
            <example>
              <code><![CDATA[echo (|| 0 0)]]></code>
              <explanation>output: 0</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="A" description="first value"/>
            <argument token="B" description="second value"/>
          </arguments>
          <return token="N" description="A OR B"/>
        </command>

        <command name="!">
          <description>Performs a negation.</description>
          <arguments>
            <argument token="A" description="argument"/>
          </arguments>
        </command>

        <command name="rnd">
          <description>Random value</description>
          <arguments>
            <argument token="A" description="The upper limit of the random value" valueNotes=""/>
          </arguments>
          <return token="R" description="The random value" valueNotes="larger or equal 0 and smaller than A"/>
        </command>

        <command name="round">
          <description>Round the given float</description>
          <arguments>
            <argument token="F" description="The float number to round" valueNotes=""/>
          </arguments>
          <return token="I" description="The rounded integer" valueNotes="The precision is 1 unit"/>
        </command>

        <command name="ceil">
          <description>Upper value of a float number</description>
          <arguments>
            <argument token="F" description="The float number to get the ceil from" valueNotes=""/>
          </arguments>
          <return token="I" description="The ceil value (integer)"/>
        </command>

        <command name="floor">
          <description>Floor value of a float number</description>
          <arguments>
            <argument token="F" description="The float number to get the floor from" valueNotes=""/>
          </arguments>
          <return token="I" description="The floor value (integer)"/>
        </command>

        <command name="strcmp">
          <description>Determines if two strings are equal.</description>
          <examples>
            <example>
              <code><![CDATA[if (strcmp yes yes) [echo the two strings are equal] [echo the two strings are not equal]]]></code>
              <explanation>Output: the two strings are equal</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="A" description="the first string"/>
            <argument token="B" description="the second string"/>
          </arguments>
          <return token="N" description="the equality" valueNotes="1 (equal) or 0 (unequal)"/>
          <references>
            <identifierReference identifier="strstr"/>
          </references>
        </command>

        <command name="strstr">
          <description>Determines if string B was found in string A.</description>
          <examples>
            <example>
              <code><![CDATA[if (strstr "Hello world!" Hello) [echo found Hello in Hello world!] [echo did not find Hello in Hello world!]]]></code>
              <explanation>Output: found Hello in Hello world!</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="A" description="the first string"/>
            <argument token="B" description="the second string"/>
          </arguments>
          <return token="N" description="the truth value" valueNotes="0 (false), 1 (true)"/>
          <references>
            <identifierReference identifier="strcmp"/>
          </references>
        </command>

        <command name="strlen">
          <description>Returns the length (in characters, including whitespace) of string S.</description>
          <examples>
            <example>
              <code><![CDATA[echo (strlen "Hello world!")]]></code>
              <explanation>Output: 12</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="S" description="STRING"/>
          </arguments>
          <references>
            <identifierReference identifier="substr"/>
          </references>
        </command>

        <command name="strpos">
          <description>Returns the position of a substring into another</description>
          <arguments>
            <argument token="H" description="haystack string"/>
            <argument token="S" description="needle string"/>
            <argument token="N" description="The occurence of 'needle' to find (optionnal)"/>
          </arguments>
          <return token="N" description="The N'th position of 'needle' into 'haystack' (-1 if 'needle' isn't found;)"/>
          <remarks>
            <remark>Character indexes and occurence number begin at 0.</remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[echo (strpos "hello world" "world") 6]]></code>
            </example>
            <example>
              <code><![CDATA[echo (strpos "hello world" "l") 2]]></code>
            </example>
            <example>
              <code><![CDATA[echo (strpos "hello world" "l" 2) 9]]></code>
              <code><![CDATA[echo (strpos "hello world" "l" 3) -1]]></code>
            </example>
          </examples>
        </command>

        <command name="substr">
          <description>Copies a substring out of the original.</description>
          <arguments>
            <argument token="S" description="the original string"/>
            <argument token="A" description="start position"/>
            <argument token="L" description="substring length (optionnal)"/>
          </arguments>
          <return token="S" description="the substring"/>
          <remarks>
            <remark>Character indexes begins at 0. If "start position" is negative, the reference is the end of the string.</remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[echo (substr abcdefgh 2 5) cdefg]]></code>
            </example>
            <example>
              <code><![CDATA[echo (substr abcdefgh -3 2) fg]]></code>
            </example>
            <example>
              <code><![CDATA[echo (substr abcdefgh 2) cdefgh]]></code>
            </example>
          </examples>
          <references>
            <identifierReference identifier="strlen"/>
            <identifierReference identifier="strpos"/>
            <identifierReference identifier="strreplace"/>
            <identifierReference identifier="parsestring"/>
          </references>
        </command>

        <command name="if">
          <description>Controls the script flow based on a boolean expression.</description>
          <examples>
            <example>
              <code><![CDATA[if (> $x 10) [ echo x is bigger than 10 ] [ echo x too small ]]]></code>
            </example>
          </examples>
          <arguments>
            <argument token="cond" description="the condition" valueNotes="0 (false) or anything else (true)"/>
            <argument token="true" description="the body to execute if the condition is true"/>
            <argument token="false" description="the body to execute if the condition is false"/>
          </arguments>
        </command>
        
        <command name="switch">
          <description>Takes an integer argument to determine what block of code to execute.</description>
          <examples>
            <example>
              <code><![CDATA[switch 2 [echo case 0] [echo case 1] [echo case 2] [echo case 3] [echo case 4]]]></code>
              <explanation>Output: case 2</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="I" description="integer"/>
            <argument token="C" description="a variable number of 'case' arguments..."/>
          </arguments>
          <remarks>
            <remark>This command can only handle up to 23 'cases'. (because of cubescript's 24 argument limit)</remark>
          </remarks>
        </command>

        <command name="loop">
          <description>Loops the specified body.</description>
          <remarks>
            <remark>This command sets the alias you choose, as first argument, from 0 to N-1 for every iteration.</remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[loop i 10 [ echo $i ]]]></code>
            </example>
          </examples>
          <arguments>
            <argument token="V" description="the alias used as counter"/>
            <argument token="N" description="the amount of loops"/>
            <argument token="body" description="the body to execute on each iteration"/>
          </arguments>
          <references>
            <identifierReference identifier="break"/>
            <identifierReference identifier="continue"/>
            <identifierReference identifier="while"/>
          </references>
        </command>

        <command name="while">
          <description>Loops the specified body while the condition evaluates to true.</description>
          <remarks>
            <remark>
              This command sets the alias "i" from 0 to N-1 for every iteration.
              Note that the condition here has to have [], otherwise it would only be evaluated once.
            </remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[alias i 0; while [ (< $i 10) ] [ echo $i; alias i (+ $i 1) ]]]></code>
            </example>
          </examples>
          <arguments>
            <argument token="cond" description="the condition" valueNotes="the code evaluated before each iteration"/>
            <argument token="body" description="the body to execute on each iteration"/>
          </arguments>
          <references>
            <identifierReference identifier="break"/>
            <identifierReference identifier="continue"/>
            <identifierReference identifier="loop"/>
          </references>
        </command>

        <command name="looplist">
          <description>Browses a list and executes a body for each element</description>
          <examples>
            <example>
              <code><![CDATA[looplist "zero one two three" number [ echo $number ]]]></code>
            </example>
          </examples>
          <arguments>
            <argument token="V" description="the list to browse"/>
            <argument token="N" description="the alias containing the current element value."/>
            <argument token="body" description="the body to execute on each iteration"/>
          </arguments>
          <references>
            <identifierReference identifier="break"/>
            <identifierReference identifier="continue"/>
            <identifierReference identifier="loop"/>
          </references>
        </command>

        <command name="break">
          <description>Aborts a loop created with a 'loop', 'looplist' or 'while' command.</description>
          <examples>
            <example>
              <code><![CDATA[loop i 10 [ if (= $i 4) [ break ]; echo $i]]]></code>
              <explanation>output: 0 1 2 3</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="continue"/>
            <identifierReference identifier="loop"/>
            <identifierReference identifier="while"/>
          </references>
        </command>

        <command name="continue">
          <description>Skip current loop iteration.</description>
          <examples>
            <example>
              <code><![CDATA[loop i 5 [ if (= $i 2) [ continue ]; echo $i]]]></code>
              <explanation>output: 0 1 3 4</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="break"/>
            <identifierReference identifier="loop"/>
            <identifierReference identifier="while"/>
          </references>
        </command>
        
        <command name="parsestring">
          <description>Loops through every character in the given string and executes the given block of cubescript on each iteration.</description>
          <examples>
            <example>
              <code><![CDATA[parsestring "Hello world" iter [echo $iter]]]></code>
              <explanation>Uses echo on every character in the string: "Hello world"</explanation>
            </example>
            <example>
              <code><![CDATA[parsestring "Hello world" iter [echo (concatword "Char #" $__iter ": " $iter)]]]></code>
              <explanation>Uses echo on every character in the string: "Hello world" --- Also outputs the position of each character in the string.</explanation>
            </example>
            <example>
              <code><![CDATA[backwardsstring = []; parsestring "This will look interesting backwards." iter [backwardsstring = (concatword $backwardsstring $iter); if (= $__iter 0) [echo $backwardsstring]] 1]]></code>
              <explanation>Outputs: ".sdrawkcab gnitseretni kool lliw sihT"</explanation>
            </example>
            <example>
              <code><![CDATA[parsestring "abcdefghijklmnopqrstuvwxyz" iter [if (> $__iter 4) breakparse [echo $iter]]]]></code>
              <explanation>Example usage of the breakparse command. Uses echo on characters a through e, then breaks out of the parse.</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="S" description="string" valueNotes="string to parse"/>
            <argument token="A" description="string" valueNotes="name of alias to use as iterator"/>
            <argument token="C" description="string" valueNotes="cubescript to execute on each iteration"/>
            <argument token="B" description="integer" valueNotes="non-zero to force backwards parse" optional="true"/>
          </arguments>
          <remarks>
            <remark>Important: A secondary iterator alias (prefixed with a double underscore "__") is automatically created before each iteration that contains the character position data.</remark>
          </remarks>
          <references>
            <identifierReference identifier="breakparse"/>
            <identifierReference identifier="substr"/>
            <identifierReference identifier="trimAllWhitespace"/>
            <identifierReference identifier="trimAllUnnecessaryWhitespace"/>
          </references>
        </command>
        
        <command name="breakparse">
          <description>Breaks out of a parsestring loop.</description>
          <remarks>
            <remark>Important: This command should only be used within the 3rd argument (the cubescript to execute) of parsestring.</remark>
          </remarks>
          <references>
            <identifierReference identifier="parsestring"/>
          </references>
        </command>
        
        <command name="trimAllWhitespace">
          <description>Removes all whitespace characters from the given string.</description>
          <examples>
            <example>
              <code><![CDATA[echo (trimAllWhitespace "    H   e ll     o w  o r   l d     ")]]></code>
              <explanation>Outputs: Helloworld</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="S" description="string" valueNotes="string to modify"/>
          </arguments>
          <references>
            <identifierReference identifier="trimAllUnnecessaryWhitespace"/>
            <identifierReference identifier="parsestring"/>
          </references>
        </command>
        
        <command name="trimAllUnnecessaryWhitespace">
          <description>Removes all unnecessary leading and trailing whitespace characters from the given string.</description>
          <examples>
            <example>
              <code><![CDATA[echo (trimAllUnnecessaryWhitespace "    H   e ll     o w  o r   l d     ")]]></code>
              <explanation>Outputs: "H   e ll     o w  o r   l d"</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="S" description="string" valueNotes="string to modify"/>
          </arguments>
          <references>
            <identifierReference identifier="trimAllWhitespace"/>
            <identifierReference identifier="parsestring"/>
          </references>
        </command>

        <command name="concat">
          <description>Concatenates multiple strings with spaces inbetween.</description>
          <examples>
            <example>
              <code><![CDATA[alias a "hello"; echo (concat $a "world")]]></code>
              <explanation>output: hello world</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="S" description="the first string"/>
            <variableArgument token="..." description="collection of strings to concatenate"/>
          </arguments>
          <return token="R" description="The newly created string"/>
        </command>

        <command name="concatword">
          <description>Concatenates multiple strings.</description>
          <remarks>
            <remark>The newly created string is saved to the alias 's'.</remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[alias a "Cube"; echo (concatword $a "Script")]]></code>
              <explanation>output: CubeScript</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="S" description="the first string"/>
            <variableArgument token="..." description="collection of strings to concatenate"/>
          </arguments>
          <return token="R" description="The newly created string"/>
        </command>

        <command name="at">
          <description>Grabs a word out of a string.</description>
          <examples>
            <example>
              <code><![CDATA[echo (at "zero one two three" 2)]]></code>
              <explanation>output: two</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="S" description="the string"/>
            <argument token="N" description="the index of the word"/>
          </arguments>
          <return token="W" description="the word from the specified idex"/>
        </command>

        <command name="listlen">
          <description>returns the element count of the given list.</description>
          <arguments>
            <argument token="L" description="the list"/>
          </arguments>
        </command>

        <command name="findcn">
          <description>find client number (cn)</description>
          <arguments>
            <argument token="N" description="NAME"/>
          </arguments>
        </command>

        <command name="findpn">
          <description>find player name</description>
          <arguments>
            <argument token="C" description="CLIENTNUM"/>
          </arguments>
        </command>

        <command name="findlist">
          <description>Searches a list for a specified value.</description>
          <arguments>
            <argument token="L" description="the list"/>
            <argument token="I" description="the item to find"/>
          </arguments>
          <return token="I" description="the index of the item in the list"/>
        </command>

        <command name="sleep">
          <description>Executes a command after specified time period.</description>
          <examples>
            <example>
              <code><![CDATA[sleep 1000 [ echo foo ]]]></code>
              <explanation>Prints 'foo' to the screen after 1 second.</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="N" description="the amount of milliseconds"/>
            <argument token="C" description="the command to execute"/>
            <argument token="P" description="ignore map change (optionnal)"/>
          </arguments>
        </command>

        <command name="resetsleeps">
          <description>Resets all current "sleep".</description>
        </command>

        <variable name="numargs">
          <description>The number of arguments passed to the current alias</description>
          <value token="V" description="numargs" minValue="0" maxValue="25" defaultValue="0" readOnly="true"/>
        </variable>

        <command name="format">
          <arguments>
            <argument token="F" description="format" valueNotes="use %1..%9 for the values"/>
            <argument token="V" description="value(s)"/>
          </arguments>
          <examples>
            <example>
              <code><![CDATA[echo (format "%1 bottles of %2 on the %3, %1 bottles of %2!" 99 beer wall)]]></code>
              <explanation>output: 99 bottles of beer on the wall, 99 bottles of beer!</explanation>
            </example>
          </examples>
        </command>

        <command name="c">
          <description>Adds color to a string.</description>
          <examples>
            <example>
              <code><![CDATA[echo (c 3)Hello (c 0)world!]]></code>
              <explanation>Output: a red "Hello" and a green "world!"</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="N" description="color id" valueNotes="0 min, 9 max"/>
          </arguments>
          <references>
            <identifierReference identifier="cncolumncolor"/>
          </references>
        </command>

        <command name="l0">
          <description>leading zeros for the number V to make it W chars wide. It may look like 10 - which might be considered a mnemonic - but it's lowercase-L and 0!</description>
          <examples>
            <example>
              <code><![CDATA[echo (l0 5 1000)]]></code>
              <explanation>Output: 01000</explanation>
            </example>
            <example>
              <code><![CDATA[echo (l0 3 1000)]]></code>
              <explanation>Output: 1000</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="W" description="WIDTH"/>
            <argument token="V" description="VALUE"/>
          </arguments>
        </command>

        <command name="storesets">
          <description>Generates an alias (list) of the current values for the given aliases/CVARs.</description>
          <examples>
            <example>
              <code><![CDATA[storesets "sensitivity hudgun fov" tmp]]></code>
              <explanation>Example result: stores "3.000 1 120" into alias "tmp".</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="L" description="the list of aliases/CVARs"/>
            <argument token="A" description="the alias to store them in"/>
          </arguments>
          <references>
            <identifierReference identifier="getalias"/>
          </references>
        </command>

        <command name="alias">
          <description>Binds a name to commands.</description>
          <arguments>
            <argument token="N" description="the name of the alias" valueNotes="string, must not contain '$'"/>
            <argument token="A" description="the commands" valueNotes="string"/>
          </arguments>
          <examples>
            <example>
              <code><![CDATA[alias myalias [ echo "hello world"; alias myalias [ echo "I already said hello" ] ]]]></code>
              <explanation>It is possible to re-bind an alias, even during its evaluation.</explanation>
            </example>
            <example>
              <code><![CDATA[test = [ echo "successful" ]]]></code>
              <explanation>There is also the shorthand version of defining an alias via the "="-sign.</explanation>
            </example>
          </examples>
        </command>

        <command name="const">
          <description>Set an alias as a constant.</description>
          <remarks>
            <remark>A constant cannot be redefined : its value cannot be changed.</remark>
            <remark>To get rid of a constant, use delalias</remark>
          </remarks>
          <arguments>
            <argument token="N" description="the name of the alias" valueNotes="string, must not contain '$'"/>
            <argument token="A" description="the value" valueNotes="string" optional="true"/>
          </arguments>
          <examples>
            <example>
              <code><![CDATA[myalias = myvalue; const myalias;]]></code>
              <explanation>Set "myalias" value to "myvalue" then "lock" it as a constant.</explanation>
            </example>
            <example>
              <code><![CDATA[const myalias myvalue;]]></code>
              <explanation>You can directly set a value for your alias when you define it as a constant.</explanation>
            </example>
            <example>
              <code><![CDATA[const myalias myvalue; myalias = anothervalue;]]></code>
              <explanation>Assigning a value to a const will throw you an error. Output: myalias is already defined as a constant</explanation>
            </example>
          </examples>
        </command>

        <command name="checkalias">
          <description>Determines if the argument given is an existing alias or not.</description>
          <examples>
            <example>
              <code><![CDATA[hello = ""; echo (checkalias hello)]]></code>
              <explanation>Output: 1</explanation>
            </example>
            <example>
              <code><![CDATA[echo (checkalias oMgThIsAlIaSpRoLlYdOeSnTeXiSt)]]></code>
              <explanation>Output: 0</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="A" description="the alias to check for"/>
          </arguments>
          <references>
            <identifierReference identifier="checkinit"/>
            <identifierReference identifier="aliasinit"/>
          </references>
        </command>

        <command name="isconst">
          <description>Determines if the argument given is a constant or not.</description>
          <examples>
            <example>
              <code><![CDATA[const hello ""; echo (isconst hello)]]></code>
              <explanation>Output: 1</explanation>
            </example>
            <example>
              <code><![CDATA[hello = value; echo (isconst hello)]]></code>
              <explanation>Output: 0</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="A" description="the alias to check for"/>
          </arguments>
          <references>
            <identifierReference identifier="const"/>
          </references>
        </command>

        <command name="checkinit">
          <description>Ensures the initialization of an alias.</description>
          <examples>
            <example>
              <code><![CDATA[checkinit mapstartalways]]></code>
              <explanation>Output: if alias mapstartalways does not exist, this command initializes it.</explanation>
            </example>
            <example>
              <code><![CDATA[checkinit mapstartalways [ echo New map, good luck! ]]]></code>
              <explanation>Output: if alias mapstartalways does not exist, it is initialized, and if the block of code "[ echo New map, good luck! ]" does not exist within the aliases contents, this command adds it.</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="A" description="the alias to check for"/>
            <argument token="B" description="the block of code to ensure that the alias contains" optional="true"/>
          </arguments>
          <references>
            <identifierReference identifier="checkalias"/>
            <identifierReference identifier="aliasinit"/>
            <identifierReference identifier="check2init"/>
            <identifierReference identifier="check2initlist"/>
          </references>
        </command>
        
        <command name="check2init">
          <description>Defines an alias only if it does not already exist.</description>
          <arguments>
            <argument token="A" description="alias name"/>
            <argument token="V" description="alias value"/>
          </arguments>
          <references>
            <identifierReference identifier="check2initlist"/>
            <identifierReference identifier="checkalias"/>
            <identifierReference identifier="checkinit"/>
            <identifierReference identifier="aliasinit"/>
          </references>
        </command>
        
        <command name="forceinit">
          <description>Forcibly sets a list of aliases to a specified value.</description>
          <examples>
            <example>
              <code><![CDATA[alias1 = 0; alias2 = 0; alias3 = 0; alias4 = 0; alias 5 = 0]]></code>
              <explanation>Can be written as:</explanation>
            </example>
            <example>
              <code><![CDATA[forceinit [alias1 alias2 alias3 alias4 alias5] 0]]></code>
            </example>
          </examples>
          <arguments>
            <argument token="L" description="list of alias names"/>
            <argument token="V" description="alias value"/>
          </arguments>
        </command>

        <command name="aliasinit">
          <description>Initializes a group of aliases using checkinit.</description>
          <arguments>
            <argument token="L" description="the list of aliases to check for"/>
            <argument token="B" description="the block of code to ensure the aliases contain" optional="true"/>
          </arguments>
          <references>
            <identifierReference identifier="checkalias"/>
            <identifierReference identifier="checkinit"/>
            <identifierReference identifier="check2init"/>
            <identifierReference identifier="check2initlist"/>
          </references>
        </command>
        
        <command name="check2initlist">
          <description>Uses check2init on a list of aliases.</description>
          <arguments>
            <argument token="L" description="list of alias names"/>
            <argument token="V" description="alias value"/>
          </arguments>
          <references>
            <identifierReference identifier="checkalias"/>
            <identifierReference identifier="checkinit"/>
            <identifierReference identifier="aliasinit"/>
            <identifierReference identifier="check2init"/>
          </references>
        </command>

        <command name="persistidents">
          <description>Controls whether aliases defined afterwards will be saved (1) or not (0). This option is useful to keep saved.cfg free from unneeded clutter.</description>
          <description>Note: in map and model configs, this option is always disabled.</description>
          <arguments>
            <argument token="B" description="control option" valueNotes="1...persistent, 0...not persistent"/>
          </arguments>
          <examples>
            <example>
              <code><![CDATA[persistidents 0; foo = [ echo "bar"]]]></code>
              <explanation>foo will not be saved and has to be redefined when restarting AC.</explanation>
            </example>
            <example>
              <code><![CDATA[persistidents 1; bar = [ echo "foo"]]]></code>
              <explanation>bar will be saved and persistent across sessions.</explanation>
            </example>
          </examples>
        </command>

        <command name="addpunct">
          <description>Injects CubeScript punctuation.</description>
          <examples>
            <example>
              <code><![CDATA[echo (addpunct hello)]]></code>
              <explanation>Output: "hello"</explanation>
            </example>
            <example>
              <code><![CDATA[echo (addpunct hello 1)]]></code>
              <explanation>Output: [hello]</explanation>
            </example>
            <example>
              <code><![CDATA[echo (addpunct hello 2)]]></code>
              <explanation>Output: (hello)</explanation>
            </example>
            <example>
              <code><![CDATA[echo (addpunct hello 3)]]></code>
              <explanation>Output: $hello</explanation>
            </example>
            <example>
              <code><![CDATA[echo (addpunct "" 4)]]></code>
            </example>
            <example>
              <code><![CDATA[echo (addpunct "" 5)]]></code>
              <explanation>Output: %</explanation>
            </example>
            <example>
              <code><![CDATA[test = (concat echo (addpunct fov 3)); test]]></code>
              <explanation>Output: 90.0</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="S" description="a string"/>
            <argument token="N" description="type ID" valueNotes="min 0/max 5/default 0"/>
          </arguments>
        </command>

        <command name="curplayers">
          <description>Returns the current number of players.</description>
          <remarks>
            <remark>The return value includes the local player "(you)", and works in both singleplayer and multiplayer scenarios.</remark>
          </remarks>
        </command>
        
        <command name="highestcn">
          <description>Returns the highest valid client number available.</description>
        </command>

        <command name="tolower">
          <description>Converts a string to all lowercase characters.</description>
          <examples>
            <example>
              <code><![CDATA[echo (tolower HELLO)]]></code>
              <explanation>Output: hello</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="S" description="a string"/>
          </arguments>
          <references>
            <identifierReference identifier="toupper"/>
            <identifierReference identifier="convertcase"/>
          </references>
        </command>

        <command name="toupper">
          <description>Converts a string to all uppercase characters.</description>
          <examples>
            <example>
              <code><![CDATA[echo (toupper hello)]]></code>
              <explanation>Output: HELLO</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="S" description="a string"/>
          </arguments>
          <references>
            <identifierReference identifier="tolower"/>
            <identifierReference identifier="convertcase"/>
          </references>
        </command>

        <command name="convertcase">
          <description>Converts a list of strings to lowercase or uppercase characters.</description>
          <examples>
            <example>
              <code><![CDATA[echo (convertcase 0 ZERO ONE TWO THREE)]]></code>
              <explanation>Output: zero one two three</explanation>
            </example>
            <example>
              <code><![CDATA[echo (convertcase 1 zero one two three)]]></code>
              <explanation>Output: ZERO ONE TWO THREE</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="N" description="0 - use lowercase, 1 - use uppercase" valueNotes="min 0/max 1"/>
            <argument token="..." description="a list of strings"/>
          </arguments>
          <remarks>
            <remark>This command can handle up to 23 string arguments.</remark>
          </remarks>
          <references>
            <identifierReference identifier="tolower"/>
            <identifierReference identifier="toupper"/>
          </references>
        </command>

        <command name="testchar">
          <description>Tests a character argument for various things.</description>
          <examples>
            <example>
              <code><![CDATA[echo (testchar 1)]]></code>
              <explanation>Output: 1 // It is a 0-9 digit</explanation>
            </example>
            <example>
              <code><![CDATA[echo (testchar a 1)]]></code>
              <explanation>Output: 1 // It is a a-z or A-Z character</explanation>
            </example>
            <example>
              <code><![CDATA[echo (testchar z 2)]]></code>
              <explanation>Output: 1 // It is a a-z or A-Z character or 0-9 digit</explanation>
            </example>
            <example>
              <code><![CDATA[echo (testchar b 3)]]></code>
              <explanation>Output: 1 // It is a lowercase a-z character</explanation>
            </example>
            <example>
              <code><![CDATA[echo (testchar B 4)]]></code>
              <explanation>Output: 1 // It is a uppercase A-Z character</explanation>
            </example>
            <example>
              <code><![CDATA[echo (testchar , 5)]]></code>
              <explanation>Output: 1 // It is a printable character</explanation>
            </example>
            <example>
              <code><![CDATA[echo (testchar . 6)]]></code>
              <explanation>Output: 1 // It is a punctuation character</explanation>
            </example>
            <example>
              <code><![CDATA[echo (testchar " " 7)]]></code>
              <explanation>Output: 1 // It is a whitespace character</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="C" description="the character to test"/>
            <argument token="N" description="type of test to run" valueNotes="min 0/max 7/default 0"/>
          </arguments>
          <remarks>
            <remark>See the following c++ functions for more information about the usage of this command:</remark>
            <remark>isalpha(), isalnum(), isdigit(), islower(), isprint(), ispunct(), isupper(), and isspace()</remark>
          </remarks>
        </command>

        <command name="strreplace">
          <description>Returns a string, with a portion of it replaced with a new sub-string.</description>
          <examples>
            <example>
              <code><![CDATA[echo (strreplace "Hello cruel world" cruel "")]]></code>
              <explanation>Output: Hello world</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="S" description="the original string to modify"/>
            <argument token="T" description="the target sub-string to replace"/>
            <argument token="N" description="the new sub-string to replace the target"/>
          </arguments>
          <references>
            <identifierReference identifier="strins"/>
            <identifierReference identifier="strpos"/>
            <identifierReference identifier="substr"/>
          </references>
        </command>

        <command name="listaverage">
          <description>Returns the average of a list of numbers.</description>
          <examples>
            <example>
              <code><![CDATA[echo (listaverage "2 5 5")]]></code>
              <explanation>Output: 4.0</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="L" description="the list of numbers" valueNotes="supports ints and floats"/>
          </arguments>
        </command>

        <scriptalias name="add2alias">
          <description>This will append the passed 2nd argument to any existing content of the alias named in the 1st argument. Several popular aliases have predefined shortcuts using this scriptalias: addOnQuit, addOnLoadOnce, addOnLoadAlways. Check config/scripts.cfg for possible omissions in that list.</description>
          <examples>
            <example>
              <code>
                <![CDATA[
                foo = "one"
                add2alias foo two
                echo foo
                ]]>
              </code>
              <explanation>Output: one two</explanation>
              <explanation>This will output the string and override any other actions that might've been defined.</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="add2bind"/>
            <identifierReference identifier="add2list"/>
          </references>
        </scriptalias>

        <scriptalias name="add2list">
          <description>Appends a new element to a list.</description>
          <examples>
            <example>
              <code><![CDATA[tmp_list = []; add2list tmp_list Hello; add2list tmp_list world!; echo $tmp_list]]></code>
              <explanation>Output: Hello world!</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="A" description="the alias (list) to add to"/>
            <argument token="E" description="the new element to add"/>
          </arguments>
          <references>
            <identifierReference identifier="add2alias"/>
            <identifierReference identifier="add2bind"/>
          </references>
        </scriptalias>

        <scriptalias name="add2bind">
          <description>Adds a block of code, if it does not already exist, to a keybind.</description>
          <arguments>
            <argument token="K" description="the key to add to"/>
            <argument token="C" description="the code to add"/>
          </arguments>
          <references>
            <identifierReference identifier="add2alias"/>
            <identifierReference identifier="add2list"/>
          </references>
        </scriptalias>
        
        <command name="keybind">
          <description>Returns the contents of a keybind.</description>
          <arguments>
            <argument token="K" description="name of key"/>
          </arguments>
          <references>
            <identifierReference identifier="findkey"/>
            <identifierReference identifier="findkeycode"/>
          </references>
        </command>
        
        <command name="findkey">
          <description>Returns the name of a key via a specified code.</description>
          <examples>
            <example>
              <code><![CDATA[echo (findkey 8)]]></code>
              <explanation>Output: BACKSPACE</explanation>
            </example>
            <example>
              <code><![CDATA[echo (findkey 280)]]></code>
              <explanation>Output: PAGEUP</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="I" description="integer"/>
          </arguments>
          <remarks>
            <remark>Returns -255 if the key does not exist.</remark>
            <remark>See /config/keymap.cfg for a full list of valid key codes.</remark>
          </remarks>
          <references>
            <identifierReference identifier="keybind"/>
            <identifierReference identifier="findkeycode"/>
          </references>
        </command>
        
        <command name="findkeycode">
          <description>Returns the integer code of a key.</description>
          <examples>
            <example>
              <code><![CDATA[echo (findkeycode BACKSPACE)]]></code>
              <explanation>Output: 8</explanation>
            </example>
            <example>
              <code><![CDATA[echo (findkeycode PAGEUP)]]></code>
              <explanation>Output: 280</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="K" description="the name of the key"/>
          </arguments>
          <remarks>
            <remark>Returns -255 if the key does not exist.</remark>
            <remark>See /config/keymap.cfg for a full list of valid key names.</remark>
          </remarks>
          <references>
            <identifierReference identifier="keybind"/>
            <identifierReference identifier="findkey"/>
          </references>
        </command>

      </identifiers>
    </section>
    <!-- CubeScript language Section ends -->
    <!-- General Section Starts -->
    <section name="General" sortindex="01">
      <description>This section describes general identifiers.</description>
      <identifiers sort="true">

        <variable name="autoscreenshot">
          <description>Toggle for taking an automatic screenshot during intermission.</description>
          <value token="B" description="0=Off, 1=On" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="screenshottype">
          <description>Toggle format of screenshot image. Your choice is for BMP (0), JPEG (1) or PNG (2).</description>
          <value token="T" description="0=BMP, 1=JPEG, 2=PNG" minValue="0" maxValue="2" defaultValue="1"/>
          <references>
            <identifierReference identifier="getscrext"/>
          </references>
        </variable>

        <variable name="screenshotscale">
          <description>Scales screenshots by the given factor before saving. 1 = original size, 0.5 = half size, etc.</description>
          <value token="S" description="Scale" minValue="0.1" maxValue="1" defaultValue="1"/>
        </variable>

        <command name="getscrext">
          <description>Returns the file extension of the client's current screenshottype setting.</description>
          <examples>
            <example>
              <code><![CDATA[echo (getscrext)]]></code>
              <explanation>Example output: .jpg</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="getmode"/>
            <identifierReference identifier="screenshottype"/>
          </references>
        </command>

        <variable name="jpegquality">
          <description>Sets the JPEG screenshot image quality.</description>
          <remarks>
            <remark>The image quality is set by it's compression level, a value of 10 sets maximum compression and a small file size but results in a bad quality image</remark>
            <remark>while a value of 100 results in a large file but gives the best quality image.</remark>
          </remarks>
          <value token="N" description="Compression level" minValue="10" maxValue="100" defaultValue="70"/>
        </variable>

        <variable name="pngcompress">
          <description>Sets the PNG screenshot file compression.</description>
          <remarks>
            <remark>A value of 9 sets maximum data compression and a smaller file size while a value of 0 results in a large file image, quality is always the same since PNG its a loosless format.</remark>
          </remarks>
          <value token="N" description="Compression level" minValue="0" maxValue="9" defaultValue="9"/>
        </variable>

        <command name="soundtest">
          <description>Plays all hardcoded sounds in order.</description>
        </command>

        <command name="writecfg">
          <description>writes current configuration to config/saved.cfg - automatic on quit</description>
        </command>

        <command name="registermusic">
          <description>registers a track as music - the first three tracks have special meaning. Track #1 is for "flag grab" the second and third are used as "last minute" tracks.</description>
          <arguments>
            <argument token="M" description="music file"/>
          </arguments>
        </command>

        <command name="echo">
          <description>Outputs text to the console.</description>
          <arguments>
            <argument token="L" description="List of strings"/>
          </arguments>
          <references>
            <identifierReference identifier="hudecho"/>
          </references>
        </command>

        <command name="hudecho">
          <description>Outputs text to the console and heads up display.</description>
          <arguments>
            <argument token="L" description="List of strings"/>
          </arguments>
          <references>
            <identifierReference identifier="allowhudechos"/>
            <identifierReference identifier="echo"/>
          </references>
        </command>

        <variable name="allowhudechos">
          <description>Enables or disables the ability of hudecho to output text to the heads up display.</description>
          <value token="N" description="0 off, 1 on" minValue="0" maxValue="1" defaultValue="1"/>
          <references>
            <identifierReference identifier="hudecho"/>
          </references>
        </variable>

        <command name="debugargs">
          <description>Dump all command arguments to STDOUT</description>
          <arguments>
            <variableArgument token="..." description="..."/>
          </arguments>
        </command>

        <command name="clearservers">
        </command>

        <variable name="browsefiledesc">
          <description>Toggles getting descriptive text from CGZ or DMO files in menudirlist.</description>
          <value token="B" description="" minValue="0" maxValue="1" defaultValue="1"/>
          <references>
            <identifierReference identifier="menudirlist"/>
          </references>
        </variable>

        <variable name="physinterp">
          <description>Toggles physics interpolation.</description>
          <value token="B" description="" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <command name="menudirlist">
          <description>create a menu listing of files from a path and perform an action on them when clicked.</description>
          <remarks>
            <remark>use this inside menu definitions, almost always as the only command of that menu.</remark>
            <remark>compare the usage inside config/menus.cfg</remark>
          </remarks>
          <arguments>
            <argument token="" description=""/>
          </arguments>
          <examples>
            <example>
              <code><![CDATA[menudirlist "packages/maps" "cgz" "map $arg1"]]></code>
              <explanation>will create a list of maps and load them when clicked</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="newmenu"/>
            <identifierReference identifier="browsefiledesc"/>
          </references>
        </command>

        <command name="toggleconsole">
          <description>Toggles the console.</description>
        </command>

        <command name="jump">
          <description>Triggers a jump.</description>
          <remarks>
            <remark>default keys: space and right mouse.</remark>
          </remarks>
        </command>

        <command name="updatefrommaster">
          <description>Contacts the masterserver and adds any new servers to the server list.</description>
          <remarks>
            <remark>The servers are written to the config/servers.cfg file. This menu can be reached through the Multiplayer menu.</remark>
          </remarks>
          <arguments>
            <argument token="B" description="force update" valueNotes="0 (delayed), 1 (immediate)"/>
          </arguments>
        </command>

        <command name="millis">
          <description>Returns the number of milliseconds since engine start.</description>
          <examples>
            <example>
              <code><![CDATA[echo (millis)]]></code>
            </example>
          </examples>
          <return token="N" description="the milliseconds"/>
        </command>

        <command name="systime">
          <description>seconds since the epoch (00:00:00 UTC on January 1, 1970)</description>
          <examples>
            <example>
              <code><![CDATA[echo (systime)]]></code>
            </example>
          </examples>
        </command>

        <command name="timestamp">
          <description>a list of values for current time</description>
          <remarks>
            <remark>format: YYYY mm dd HH MM SS</remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[echo (timestamp) "2008 08 08 08 08 08"]]></code>
            </example>
            <example>
              <code><![CDATA[echo (timestamp) "2063 04 05 12 00 00"]]></code>
            </example>
            <example>
              <code><![CDATA[echo (at (timestamp) 0) (at (timestamp) 2) (at (timestamp) 1) "2063 05 04"]]></code>
            </example>
          </examples>
        </command>

        <command name="datestring">
          <description>representation of date</description>
          <remarks>
            <remark>format: Www Mmm dd hh:mm:ss yyyy</remark>
            <remark>Use timestamp to create your own formatting.</remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[echo (datestring) "Sat Jun  7 17:08:35 2008"]]></code>
            </example>
          </examples>
        </command>

        <command name="timestring">
          <description>the current time in (H)H:MM:SS format</description>
          <examples>
            <example>
              <code><![CDATA[echo (timestring) "12:34:56"]]></code>
            </example>
            <example>
              <code><![CDATA[echo (timestring) "1:02:03"]]></code>
            </example>
          </examples>
        </command>

        <command name="bind">
          <description>Binds a key to a command.</description>
          <remarks>
            <remark>
              To find out what key names and their default bindings are, look at config/keymap.cfg,
              then add bind commands to your autoexec.cfg.
            </remark>
          </remarks>
          <arguments>
            <argument token="K" description="the key to bind" valueNotes="string"/>
            <argument token="A" description="the command" valueNotes="string, usually an alias"/>
          </arguments>
          <references>
            <identifierReference identifier="editbind"/>
            <identifierReference identifier="specbind"/>
            <identifierReference identifier="megabind"/>
            <identifierReference identifier="onrelease"/>
          </references>
        </command>

        <command name="editbind">
          <description>Similar to bind, but is only active while editing, where it overrides the regular bind for the specified key.</description>
          <arguments>
            <argument token="K" description="the key to bind" valueNotes="string"/>
            <argument token="A" description="the command" valueNotes="string, usually an alias"/>
          </arguments>
          <references>
            <identifierReference identifier="bind"/>
            <identifierReference identifier="specbind"/>
          </references>
        </command>

        <command name="specbind">
          <description>Similar to bind, but is only active while spectating, where it overrides the regular bind for the specified key.</description>
          <arguments>
            <argument token="K" description="the key to bind" valueNotes="string"/>
            <argument token="A" description="the command" valueNotes="string, usually an alias"/>
          </arguments>
          <references>
            <identifierReference identifier="bind"/>
            <identifierReference identifier="editbind"/>
          </references>
        </command>

        <command name="megabind">
          <description>Binds a key to many different actions depending on the current game state.</description>
          <examples>
            <example>
              <code><![CDATA[megabind F9 [echo Demo!] [echo Editing or coop!] [echo Connected!] [echo Bots!] [echo Other!]]]></code>
            </example>
          </examples>
          <arguments>
            <argument token="K" description="the key to bind" valueNotes="string"/>
            <argument token="D" description="body of code to execute if watching a demo" valueNotes="a body of code"/>
            <argument token="E" description="body of code to execute if editing or in coop-edit mode" valueNotes="a body of code"/>
            <argument token="C" description="body of code to execute if connected to a server" valueNotes="a body of code"/>
            <argument token="B" description="body of code to execute if in a bot mode" valueNotes="a body of code"/>
            <argument token="O" description="body of code to execute if none of the other arguments have been met" valueNotes="a body of code"/>
          </arguments>
          <remarks>
            <remark>This command requires 6 arguments, no less. Use an empty set of brackets [] for any of the arguments that you want to "do nothing".</remark>
          </remarks>
          <references>
            <identifierReference identifier="bind"/>
            <identifierReference identifier="onrelease"/>
          </references>
        </command>

        <command name="onrelease">
          <description>Executes a command on the release of a key/button.</description>
          <remarks>
            <remark>This command must be placed in an action in a bind or in an alias in a bind.</remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[bind CTRL [ echo "key pressed"; onrelease [ echo "key released" ] ]]]></code>
            </example>
          </examples>
          <references>
            <identifierReference identifier="bind"/>
            <identifierReference identifier="megabind"/>
          </references>
          <arguments>
            <argument token="A" description="the command"/>
          </arguments>
        </command>

        <command name="quit">
          <description>Quits the game without asking.</description>
        </command>

        <command name="forward">
          <description>Moves the player forward.</description>
          <remarks>
            <remark>default keys: W and Up Arrow</remark>
          </remarks>
        </command>

        <command name="backward">
          <description>Moves the player backward.</description>
          <remarks>
            <remark>default keys: S and Down Arrow</remark>
          </remarks>
        </command>

        <command name="left">
          <description>Moves the player left.</description>
          <remarks>
            <remark>default keys: A and Left Arrow</remark>
          </remarks>
        </command>

        <command name="right">
          <description>Moves the player right.</description>
          <remarks>
            <remark>default keys: D and Right Arrow</remark>
          </remarks>
        </command>

        <command name="attack">
          <description>Fires the current weapon.</description>
          <remarks>
            <remark>default: left mouse button</remark>
          </remarks>
        </command>

        <command name="invmouse">
          <description>Sets mouse to "flight sim" mode.</description>
          <arguments>
            <argument token="B" description="sets invmouse" valueNotes="0 (off), else (on)"/>
          </arguments>
        </command>

        <command name="screenshot">
          <description>Takes a screenshot.</description>
          <remarks>
            <remark>
              Screenshots are saved to "screenshots/[date]_[time]_[map]_[mode].[ext]",
              where [ext] is the image type selected.
            </remark>
          </remarks>
          <defaultKeys>
            <key alias="F12"/>
          </defaultKeys>
          <references>
            <identifierReference identifier="cleanshot"/>
          </references>
        </command>

        <command name="cleanshot">
          <description>Take a "clean" screenshot with no HUD items.</description>
          <remarks>
            <remark>Your current HUD configuration is stored into a buffer, and is re-enabled afterwards.</remark>
          </remarks>
          <references>
            <identifierReference identifier="screenshot"/>
          </references>
        </command>

        <command name="mapshot">
          <description>save an image of the entire radar-overview of the map.</description>
        </command>

        <command name="exec">
          <description>Executes all commands in a specified config file.</description>
          <arguments>
            <argument token="C" description="the config file"/>
          </arguments>
        </command>
        
        <command name="run">
          <description>Executes a config file within /config/</description>
          <arguments>
            <argument token="N" description="the file name (without extension)"/>
          </arguments>
        </command>

        <command name="keymap">
          <description>Sets up the keymap for the specified key.</description>
          <remarks>
            <remark>You should never have to use this command manually, use "bind" instead.</remark>
          </remarks>
          <references>
            <identifierReference identifier="bind"/>
          </references>
          <arguments>
            <argument token="K" description="the key to map"/>
            <argument token="N" description="the name for the key"/>
            <argument token="A" description="the default action"/>
          </arguments>
        </command>

        <command name="sensitivity">
          <description>Sets the mouse sensitivity.</description>
          <arguments>
            <argument token="S" description="the sensitivity" valueNotes="floating-point"/>
          </arguments>
        </command>

        <command name="addserver">
          <description>Adds a server to the list of server to query in the server list menu.</description>
          <arguments>
            <argument token="S" description="the address of the server (hostname or IP)"/>
            <argument token="P" description="the port"/>
          </arguments>
        </command>

        <command name="resetsecuremaps">
          <description>Clears the list of secured maps.</description>
          <references>
            <identifierReference identifier="securemap"/>
          </references>
        </command>

        <command name="securemap">
          <description>Adds a map to the list of secured maps.</description>
          <remarks>
            <remark>Secured maps can not be overwritten by the commands sendmap and getmap.</remark>
          </remarks>
          <references>
            <identifierReference identifier="resetsecuremaps"/>
            <identifierReference identifier="sendmap"/>
            <identifierReference identifier="getmap"/>
          </references>
          <arguments>
            <argument token="S" description="the name of the map"/>
          </arguments>
        </command>

        <command name="getEngineState">
          <description>Returns a list of values describing the current engine (rendering) state.</description>
          <remarks>
            <remark>It will only be filled after the first frame was drawn.</remark>
            <remark>The list is: FPS LOD WQD WVT EVT</remark>
            <remark>FPS = Frames Per Second</remark>
            <remark>LOD = Level Of Detail</remark>
            <remark>WQD = World QuaD Count</remark>
            <remark>WVT = World VerTex Count </remark>
            <remark>EVT = Extra VerTex Count (HUD &amp; menu)</remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[echo (getEngineState)
            ]]></code>
            </example>
          </examples>
        </command>

        <variable name="networkdebug">
          <description>Enables output of processed network packets.</description>
          <remarks>
            <remark>This variable only has an effect if the client binary is compiled in debug mode.</remark>
          </remarks>
          <value token="B" description="enable network debugging" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="autogetmap">
          <description>Determines if the current played map should be automatically downloaded if it is not available locally.</description>
          <value token="B" description="enable auto map download" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="autogetnewmaprevisions">
          <description>Automatically get new map revisions from the server.</description>
          <value token="N" description="0: no, 1: yes" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="clockerror">
          <description>Sets the correction value for clockfix.</description>
          <remarks>
            <remark>Engine source-code snippet (main.cpp): if(clockfix) millis = int(millis*(double(clockerror)/1000000));</remark>
          </remarks>
          <references>
            <identifierReference identifier="clockfix"/>
          </references>
          <value token="V" description="correction value" minValue="990000" maxValue="1010000" defaultValue="1000000"/>
        </variable>

        <variable name="clockfix">
          <description>Enables correction of the system clock.</description>
          <references>
            <identifierReference identifier="clockerror"/>
          </references>
          <value token="B" description="enable correction" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="dbgts">
          <description>Enable triangle debug.</description>
          <remarks>
            <remark>Prints details while connecting triangles of 3d models.</remark>
          </remarks>
          <value token="B" description="triangle debug" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="maxfps">
          <description>Limits the FPS (frames per second) of AssaultCube's video output.</description>
          <value token="V" description="maximum FPS" minValue="25 or 0" maxValue="1000" defaultValue="200" valueNotes="0 disables maxfps"/>
        </variable>

        <variable name="maxtmus">
          <description>Gets the maximum number of supported textures when performing multitexturing.</description>
          <value token="V" description="max. number of textures" minValue="1" maxValue="0" defaultValue="0" readOnly="true"/>
        </variable>

        <variable name="minlod">
          <description>Minimal level of detail.</description>
          <value token="V" description="" minValue="25" maxValue="250" defaultValue="60"/>
        </variable>

        <variable name="modeacronyms">
          <description>Toggles use of acronyms instead of full modenames in the serverbrowser.</description>
          <value token="B" description="" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <command name="getmode">
          <description>Returns the current game mode.</description>
          <examples>
            <example>
              <code><![CDATA[echo (getmode)]]></code>
              <explanation>Example output: capture the flag</explanation>
            </example>
            <example>
              <code><![CDATA[echo (getmode 1)]]></code>
              <explanation>Example output: CTF</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="N" description="0 = full mode name, 1 = mode acronym" valueNotes="min 0/max 1/default 0"/>
          </arguments>
          <references>
            <identifierReference identifier="getscrext"/>
            <identifierReference identifier="modeacronyms"/>
          </references>
        </command>

        <variable name="resetbinds">
          <description>Resets all binds back to their default values.</description>
          <remarks>
            <remark>
              This command executes the file /config/resetbinds.cfg which will bind all keys to the values specified in that
              file, thus resetting the binds to their default values.
            </remark>
          </remarks>
        </variable>

        <variable name="changeteam">
          <description>Swaps your player to the enemy team.</description>
        </variable>

        <variable name="resetcfg">
          <description>Determines if all settings should be reset when the game quits.</description>
          <remarks>
            <remark>
              It is recommended to quit the game immediately after enabling this setting. Note that the reset happens
              only once as the value of this variable is reset as well.
            </remark>
          </remarks>
          <references>
            <identifierReference identifier="quit"/>
          </references>
          <value token="B" description="enable reset" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="smoothdist">
          <description>Determines the valid distance when extrapolating a players position.</description>
          <value token="V" description="distance" minValue="0" maxValue="16" defaultValue="8"/>
        </variable>

        <variable name="smoothmove">
          <description>Determines the speed when extrapolating a players position.</description>
          <value token="V" description="movement speed" minValue="0" maxValue="100" defaultValue="75"/>
        </variable>

        <variable name="throttle_accel">
          <description>Determines how fast network throttling accelerates.</description>
          <references>
            <identifierReference identifier="throttle_accel"/>
            <identifierReference identifier="throttle_decel"/>
          </references>
          <value token="V" description="acceleration" minValue="0" maxValue="32" defaultValue="2"/>
        </variable>

        <variable name="throttle_decel">
          <description>Determines how fast network throttling decelerates.</description>
          <references>
            <identifierReference identifier="throttle_accel"/>
            <identifierReference identifier="throttle_interval"/>
          </references>
          <value token="V" description="deceleration" minValue="0" maxValue="32" defaultValue="2"/>
        </variable>

        <variable name="throttle_interval">
          <description>Determines the interval of re-evaluating network throttling.</description>
          <references>
            <identifierReference identifier="throttle_accel"/>
            <identifierReference identifier="throttle_decel"/>
          </references>
          <value token="V" description="interval" minValue="0" maxValue="30" defaultValue="5" valueNotes="seconds"/>
        </variable>

        <variable name="tsswap">
          <description>Swaps vertices of model triangles.</description>
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="version">
          <description>Gets an integer representing the game version. READ ONLY</description>
          <remarks>
            <remark>As example, version 1.0 is represented as value 1000.</remark>
          </remarks>
        </variable>

        <variable name="protocol">
          <description>Gets an integer representing the game protocol. READ ONLY</description>
          <remarks>
            <remark>As example, the protocol of version 1.1.0.4 is represented as value 1132.</remark>
          </remarks>
        </variable>

        <variable name="gamemode">
          <description>Holds the current game mode. READ ONLY</description>
          <examples>
            <example>
              <code><![CDATA[echo $gamemode]]></code>
              <explanation>Output: 5</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="mode"/>
          </references>
        </variable>

        <variable name="connected">
          <description>Indicates if a connection to a server exists.</description>
          <value token="B" description="the connection state" valueNotes="1 (connected), 0 (disconnected)" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="maxroll">
          <description>Sets the maximum value the display will roll on strafing.</description>
          <value token="N" description="the roll value" minValue="0" maxValue="20" defaultValue="0"/>
        </variable>

        <variable name="numconlines">
          <description>Hold the current number of lines on the console.</description>
        </variable>

        <variable name="lang">
          <description>Sets the language for which a translated server MOTD will be fetched, if the server has one for this language.</description>
          <remarks>
            <remark>This is always a two-letter language code as defined in the ISO 639 standard, three-letter codes are currently not allowed.</remark>
            <remark>If lang is not set, or if the server does not have a matching MOTD file, it will fall back to English.</remark>
            <remark>Note: this does not affect the client language, which is derived from the system settings (e.g. on many *nix systems, it may be changed via the "LANG" environment variable).</remark>
          </remarks>
          <examples>
            <example>
              <code>en, de, fr, ...</code>
            </example>
          </examples>
          <value token="L" description="the language code"/>
        </variable>

      </identifiers>
    </section>
    <!-- General Section Ends -->
    <!-- Gameplay Section Starts -->
    <section name="Gameplay" sortindex="02">
      <description>This section describes gameplay related identifiers.</description>
      <identifiers sort="true">
      
        <scriptalias name="start_intermission">
          <description>If this alias exists it will be run when the game reaches intermission.</description>
          <examples>
            <example>
              <code>
              <![CDATA[
                start_intermission = [
                echo "INTERMISSION - STATISTICS TIME"
                loop p 255 [
                pn = (findpn $p)
                if (strcmp $pn "") [ ] [
                echo (concatword Player $p ":") (pstat_score $p) ":" (pstat_weap $p)
                ]
                ]
                echo "------------------------------"
                ]
                ]]>
              </code>
              <explanation>This will output the full statistics line for all players.</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="pstat_score"/>
            <identifierReference identifier="pstat_weap"/>
          </references>
        </scriptalias>

        <scriptalias name="mapstartonce">
          <description>If this alias exists it will be run when the game starts a new map, then it is deleted.</description>
          <examples>
            <example>
              <code>
                <![CDATA[
                mapstartonce = [
                echo "------------------------------"
                ]
                ]]>
              </code>
              <explanation>This will output the string and override any other actions that might've been defined.</explanation>
            </example>
            <example>
              <code>
                <![CDATA[
                addOnLoadOnce [
                echo "------------------------------"
                ]
                ]]>
              </code>
              <explanation>This will output the string after any previously defined actions have run.</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="add2alias"/>
            <identifierReference identifier="mapstartalways"/>
          </references>
        </scriptalias>

        <scriptalias name="mapstartalways">
          <description>If this alias exists it will be run every time the game starts a new map.</description>
          <examples>
            <example>
              <code>
                <![CDATA[
                mapstartalways = [
                echo "------------------------------"
                ]
                ]]>
              </code>
              <explanation>This will output the string and override any other actions that might've been defined.</explanation>
            </example>
            <example>
              <code>
                <![CDATA[
                addOnLoadAlways [
                echo "------------------------------"
                ]
                ]]>
              </code>
              <explanation>This will output the string after any previously defined actions have run.</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="add2alias"/>
            <identifierReference identifier="mapstartonce"/>
          </references>
        </scriptalias>

        <scriptalias name="onCallVote">
          <description>If this alias exists it will be run every time a vote is called.</description>
          <references>
            <identifierReference identifier="onChangeVote"/>
            <identifierReference identifier="onVoteEnd"/>
          </references>
        </scriptalias>

        <scriptalias name="onChangeVote">
          <description>If this alias exists it will be run every time a vote is changed.</description>
          <references>
            <identifierReference identifier="onCallVote"/>
            <identifierReference identifier="onVoteEnd"/>
          </references>
        </scriptalias>

        <scriptalias name="onVoteEnd">
          <description>If this alias exists it will be run every time a vote passes or fails.</description>
          <references>
            <identifierReference identifier="onCallVote"/>
            <identifierReference identifier="onChangeVote"/>
          </references>
        </scriptalias>

        <variable name="votepending">
          <description>Determines if there is a vote pending or not.</description>
          <examples>
            <example>
              <code><![CDATA[echo $votepending]]></code>
              <explanation>Output: if there is currently a vote pending, returns 1, else returns 0.</explanation>
            </example>
          </examples>
        </variable>

        <scriptalias name="onKill">
          <description>If it exists, this alias will be executing when any player get killed, receiving a few arguments : </description>
          <arguments>
            <argument token="actor" description="The client number of the actor" valueNotes="integer"/>
            <argument token="target" description="The client number of the target" valueNotes="integer"/>
            <argument token="gun" description="The number of the gun used" valueNotes="integer"/>
            <argument token="gib" description="Is it a gib or a normal frag" valueNotes="integer (0 or 1)"/>
          </arguments>
        </scriptalias>

        <scriptalias name="onFlag">
          <arguments>
            <argument token="action" description="The action that occured" valueNotes="integer (0 = stolen, 1 = dropped, 2 = lost, 3 = returned, 4 = scored, 5 = ktfscore, 6 = failed to score, 7 = reset)"/>
            <argument token="actor" description="The client number of the actor" valueNotes="integer"/>
            <argument token="flag" description="The flag owner team" valueNotes="integer (0 = CLA, 1 = RVSF)"/>
          </arguments>
          <description>If defined, this will be executed each time a flag action occurs.</description>
        </scriptalias>

        <scriptalias name="onPickup">
          <arguments>
            <argument token="item" description="The item that was picked up" valueNotes="integer (0 = pistol clips, 1 = ammo box, 2 = grenade, 3 = health, 4 = helmet, 5 = armour, 6 = akimbo)"/>
            <argument token="q" description="The quantity that was received"/>
          </arguments>
          <description>If defined, this will be executed each time you pick up an item.</description>
        </scriptalias>

        <scriptalias name="onAttack">
          <arguments>
            <argument token="weapon" description="The weapon that was used"/>
          </arguments>
          <description>If defined, this will be executed each time you shot a bullet, throw a grenade or use your knife.</description>
        </scriptalias>

        <scriptalias name="onHit">
          <arguments>
            <argument token="actor" description="The client number of the actor" valueNotes="integer"/>
            <argument token="target" description="The client number of the target" valueNotes="integer"/>
            <argument token="damage" description="The damage done" valueNotes="integer"/>
            <argument token="gun" description="The number of the gun used" valueNotes="integer"/>
            <argument token="gib" description="Is it a gib or a normal frag" valueNotes="integer (0 or 1)"/>
          </arguments>
          <description>If it's defined, this alias will be executed each time a damage is done.</description>
        </scriptalias>

        <scriptalias name="onWeaponSwitch">
          <arguments>
            <argument token="w" description="The weapon ID that you switched to"/>
          </arguments>
          <description>If defined, this will be executed each time you switch to a different weapon.</description>
        </scriptalias>
        
        <scriptalias name="onReload">
          <arguments>
            <argument token="B" description="was autoreload?" valueNotes="0 (false), 1 (true)"/>
          </arguments>
          <description>If defined, this will be executed each time you reload a weapon.</description>
        </scriptalias>

        <scriptalias name="onConnect">
          <arguments>
            <argument token="player" description="The client number of the player who connected" valueNotes="integer (-1 for local player)"/>
          </arguments>
          <description>If defined, this will be executed when you or another player join(s) a server.</description>
        </scriptalias>

        <scriptalias name="onDisconnect">
          <arguments>
            <argument token="player" description="The client number of the player who disconnected" valueNotes="integer (-1 for local player)"/>
          </arguments>
          <description>If defined, this will be executed when you or another player disconnect(s) from a server.</description>
        </scriptalias>

        <scriptalias name="onSpawn">
          <arguments>
            <argument token="player" description="The client number of the player who spawned" valueNotes="integer"/>
          </arguments>
          <description>If defined, this will be executed each time a player spawns.</description>
        </scriptalias>

        <scriptalias name="onNameChange">
          <arguments>
            <argument token="player" description="The client number of the player who connected" valueNotes="integer"/>
            <argument token="new name" description="The new name of the client" valueNotes="string"/>
          </arguments>
          <description>If defined, this will be executed when you or another player change(s) his name. </description>
          <remarks>
            <remark>The alias is executed before the name is effectively changed, so you can still get the previous name of the client from this alias.</remark>
          </remarks>
        </scriptalias>
        
        <scriptalias name="afterinit">
          <description>If defined, this will be executed after saved.cfg is loaded.</description>
        </scriptalias>
        
        <scriptalias name="KEYPRESS">
          <description>If defined, this will be executed every time you press a key.</description>
          <arguments>
            <argument token="I" description="integer key code"/>
          </arguments>
          <examples>
            <example>
              <code><![CDATA[checkinit KEYPRESS [echo You pressed key: (findkey $arg1)]]]></code>
            </example>
          </examples>
          <references>
            <identifierReference identifier="KEYRELEASE"/>
            <identifierReference identifier="findkey"/>
          </references>
        </scriptalias>
        
        <scriptalias name="KEYRELEASE">
          <description>If defined, this will be executed every time you release a key.</description>
          <arguments>
            <argument token="I" description="integer key code"/>
          </arguments>
          <examples>
            <example>
              <code><![CDATA[checkinit KEYRELEASE [echo You released key: (findkey $arg1)]]]></code>
            </example>
          </examples>
          <references>
            <identifierReference identifier="KEYPRESS"/>
            <identifierReference identifier="KEYPRESS"/>
            <identifierReference identifier="findkey"/>
          </references>
        </scriptalias>

        <scriptalias name="addOnQuit">
          <description>Execute a command or block of code on quit.</description>
          <value token="A" description="the command or block of code to execute"/>
          <references>
            <identifierReference identifier="addListOnQuit"/>
          </references>
        </scriptalias>

        <scriptalias name="addListOnQuit">
          <description>Deletes a list of aliases (from saved.cfg) on quit.</description>
          <examples>
            <example>
              <code><![CDATA[addListOnQuit "a b c"]]></code>
              <explanation>Deletes aliases a, b, and c from existance and saved.cfg upon quit.</explanation>
            </example>
          </examples>
          <value token="L" description="the list of aliases to delete"/>
          <references>
            <identifierReference identifier="addOnQuit"/>
          </references>
        </scriptalias>

        <scriptalias name="modmdlweapN">
          <description>change name of directory used for weapon model (hudgun) number N</description>
          <examples>
            <example>
              <code>
                <![CDATA[
                modmdlweap4 = my_subgun
                ]]>
              </code>
              <explanation>This will make the subgun hudgun model use the data inside packages/models/weapon/my_subgun</explanation>
            </example>
          </examples>
          <remarks>
            <remark>These setting should be loaded from config/autoexec.cfg, but they work on-the-fly too.</remark>
            <remark>If the model fails to load you will end up with nothing being displayed; use <b>delalias</b> to get back to default</remark>
          </remarks>
          <references>
            <identifierReference identifier="modmdlvwepN"/>
            <identifierReference identifier="modmdlpickupN"/>
            <identifierReference identifier="modmdlbounceN"/>
            <identifierReference identifier="delalias"/>
          </references>
        </scriptalias>

        <scriptalias name="modmdlvwepN">
          <description>change name of directory used for weapon model (viewable/world) number N</description>
          <references>
            <identifierReference identifier="modmdlweapN"/>
            <identifierReference identifier="modmdlpickupN"/>
            <identifierReference identifier="modmdlbounceN"/>
            <identifierReference identifier="delalias"/>
          </references>
        </scriptalias>
        
        <scriptalias name="modmdlpickupN">
          <description>change name of directory used for pickup model number N</description>
          <examples>
            <example>
              <code><![CDATA[modmdlpickup3 = health2]]></code>
              <explanation>This will make the health pickup model use the data inside packages/models/pickups/health2</explanation>
            </example>
            <example>
              <code><![CDATA[modmdlpickup1 = my_ammobox]]></code>
              <explanation>This will make the ammobox pickup model use the data inside packages/models/pickups/my_ammobox</explanation>
            </example>
          </examples>
          <remarks>
            <remark>These setting should be loaded from config/autoexec.cfg, but they work on-the-fly too.</remark>
            <remark>If the model fails to load you will end up with nothing being displayed; use <b>delalias</b> to get back to default</remark>
          </remarks>
          <references>
            <identifierReference identifier="modmdlweapN"/>
            <identifierReference identifier="modmdlvwepN"/>
            <identifierReference identifier="modmdlbounceN"/>
            <identifierReference identifier="delalias"/>
            <identifierReference identifier="onPickup"/>
          </references>
        </scriptalias>
        
        <scriptalias name="modmdlbounceN">
          <description>change name of directory used for bounce model number N</description>
          <examples>
            <example>
              <code><![CDATA[modmdlbounce0 = misc/my_gib1]]></code>
              <explanation>This will make the gib 1 model use the data inside packages/models/misc/my_gib1</explanation>
            </example>
            <example>
              <code><![CDATA[modmdlbounce1 = misc/my_gib2]]></code>
              <explanation>This will make the gib 2 model use the data inside packages/models/misc/my_gib2</explanation>
            </example>
            <example>
              <code><![CDATA[modmdlbounce2 = misc/my_gib3]]></code>
              <explanation>This will make the gib 3 model use the data inside packages/models/misc/my_gib3</explanation>
            </example>
            <example>
              <code><![CDATA[modmdlbounce3 = weapons/grenade2/static]]></code>
              <explanation>This will make the grenade static model use the data inside packages/models/weapons/grenade2/static</explanation>
            </example>
          </examples>
          <remarks>
            <remark>These setting should be loaded from config/autoexec.cfg, but they work on-the-fly too.</remark>
            <remark>If the model fails to load you will end up with nothing being displayed; use <b>delalias</b> to get back to default</remark>
          </remarks>
          <references>
            <identifierReference identifier="modmdlweapN"/>
            <identifierReference identifier="modmdlvwepN"/>
            <identifierReference identifier="modmdlpickupN"/>
            <identifierReference identifier="delalias"/>
          </references>
        </scriptalias>

        <command name="pstat_score">
          <description>Returns the score statistics for the player with the given clientnumber.</description>
          <arguments>
            <argument token="C" description="client" valueNotes="0..N"/>
          </arguments>
          <examples>
            <example>
              <code>
                <![CDATA[
                echo (pstat_score 0)
                ]]>
              </code>
              <explanation>Output: 0 5 3 43 1 1 unarmed</explanation>
              <explanation>The output is a list of FLAGS, FRAGS, DEATHS, POINTS, TEAM, TEAMKILLS, and NAME.</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="start_intermission"/>
            <identifierReference identifier="pstat_weap"/>
          </references>
        </command>

        <command name="pstat_weap">
          <description>Returns the shot statistics for the player with the given clientnumber.</description>
          <arguments>
            <argument token="C" description="client" valueNotes="0..N"/>
          </arguments>
          <examples>
            <example>
              <code>
                <![CDATA[
                echo (pstat_weap 0)
                ]]>
              </code>
              <explanation>Output: 0 0 0 0 0 0 0 0 0 0 1 240 15 312 0 0 3 112 0 0</explanation>
              <explanation>The output is a list of tuples for all weapons, SHOTS-FIRED and DAMAGE-DEALT for each.</explanation>
            </example>
          </examples>
          <remarks>
            <remark>The list is:</remark>
            <remark>knife/atk dmg pistol/atk dmg carbine/atk dmg shotgun/atk dmg smg/atk dmg sniper/atk dmg assault/atk dmg cpistol/atk dmg nade/atk dmg akimbo/atk dmg</remark>
          </remarks>
          <references>
            <identifierReference identifier="start_intermission"/>
            <identifierReference identifier="pstat_score"/>
            <identifierReference identifier="weapon"/>
          </references>
        </command>

        <command name="shiftweapon">
          <description>shifts your selected weapon by a given delta. By default the mouse-wheel shifts one up or down according to your scroll direction.</description>
          <defaultKeys>
            <key alias="MOUSE4" description="cycle one up"/>
            <key alias="MOUSE5" description="cycle one down"/>
          </defaultKeys>
          <arguments>
            <argument token="D" description="delta" valueNotes="-N..-1,+1..N"/>
          </arguments>
        </command>

        <command name="setscope">
          <description>will display a scope for the sniper-rifle. used in the zoom-script (config/scripts.cfg [l. 92ff "alias zoom"]</description>
          <arguments>
            <argument token="Y" description="scope on?" valueNotes="0||1"/>
          </arguments>
        </command>

        <command name="togglespect">
          <description>cycles through all available spectator modes. Follow-1stPerson, Follow-3rdPerson, Follow-3rdPerson-transparent and Fly.</description>
          <defaultKeys>
            <key alias="SPACE" description="cycle spectator modes"/>
          </defaultKeys>
        </command>

        <command name="whois">
          <description>get the IP address of a given clientnumber - only admins get shown the last octet</description>
          <arguments>
            <argument token="C" description="clientnum"/>
          </arguments>
        </command>

        <command name="vote">
          <description>agree or disagree to the currently running vote</description>
          <arguments>
            <argument token="V" description="vote value" valueNotes="1 (yes) OR 2 (no)"/>
          </arguments>
          <defaultKeys>
            <key alias="F1" description="votes YES"/>
            <key alias="F2" description="votes NO"/>
          </defaultKeys>
        </command>

        <command name="voicecom">
          <arguments>
            <argument token="S" description="sound" valueNotes="must be a registered voicecom-sound"/>
            <argument token="T" description="text"/>
          </arguments>
          <defaultKeys>
            <key alias="V" description="opens the voicecom menu, use number keys for your choice"/>
          </defaultKeys>
        </command>

        <variable name="voicecomsounds">
          <description>Enables or disables voicecom audio.</description>
          <value token="N" description="voicecom sounds" minValue="0" maxValue="2" defaultValue="1"/>
          <arguments>
            <argument valueNotes="0 (off)"/>
            <argument valueNotes="1 (always play voicecom audio)"/>
            <argument valueNotes="2 (only play voicecom audio from you and your teammates)"/>
          </arguments>
        </variable>

        <command name="mapname">
          <description>returns the mapname</description>
        </command>

        <command name="mapsize">
          <description>outputs the mapsize.</description>
        </command>

        <command name="loadcrosshair">
          <description>Loads a crosshair for argument T.</description>
          <examples>
            <example>
              <code><![CDATA[loadcrosshair red_dot.png]]></code>
              <explanation>Loads the red_dot.png crosshair for all weapons.</explanation>
            </example>
            <example>
              <code><![CDATA[loadcrosshair red_dot.png all]]></code>
              <explanation>Same as above. Loads the red_dot.png crosshair for all weapons.</explanation>
            </example>
            <example>
              <code><![CDATA[loadcrosshair red_dot.png knife]]></code>
              <explanation>Loads the red_dot.png crosshair for your knife only.</explanation>
            </example>
            <example>
              <code><![CDATA[loadcrosshair red_dot.png ar]]></code>
              <explanation>Loads the red_dot.png crosshair for your assault rifle only.</explanation>
            </example>
            <example>
              <code><![CDATA[loadcrosshair red_dot.png scope]]></code>
              <explanation>Loads the red_dot.png crosshair for your sniper rifle scope only.</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="I" description="image"/>
            <argument token="T" description="type" valueNotes="all, scope, teammate, knife, pistol, carbine, shotgun, smg, sniper, ar, cpistol, grenades, akimbo"/>
          </arguments>
        </command>

        <command name="idlebots">
          <description>Enables or disables the processing of the bots artificial intelligence</description>
          <arguments>
            <argument token="T" description="off OR on" valueNotes="0||1"/>
          </arguments>
          <examples>
            <example>
              <code><![CDATA[idlebots 1]]></code>
              <explanation>Will make the bots stand still.</explanation>
            </example>
            <example>
              <code><![CDATA[idlebots 0]]></code>
              <explanation>Will enable the bots to move and shoot.</explanation>
            </example>
          </examples>
        </command>

        <command name="kickallbots">
          <description>Kicks all bots out of the current game.</description>
          <arguments>
            <argument token="" description="this command does not take any arguments" valueNotes="none"/>
          </arguments>
        </command>

        <command name="kickbot">
          <description>Kicks the bot with the given name out of the current game.</description>
          <arguments>
            <argument token="N" description="botname" valueNotes="name of the bot to kick."/>
          </arguments>
          <examples>
            <example>
              <code><![CDATA[kickbot Robbie]]></code>
              <explanation>Will make the bot named "Robbie" dissapear from the current game.</explanation>
            </example>
          </examples>
        </command>

        <command name="lanconnect"/>
        <command name="listdemos">
          <description>Get the game demos listing from the server we are currently connected.</description>
          <references>
            <identifierReference identifier="getdemo"/>
          </references>
        </command>

        <command name="getdemo">
          <arguments>
            <argument token="X" description="number in list"/>
            <argument token="P" description="subpath" optional="true"/>
          </arguments>
          <references>
            <identifierReference identifier="listdemos"/>
          </references>
        </command>

        <command name="dropflag">
          <description>Drops the enemy flag.</description>
        </command>

        <command name="drawbeamtobots">
          <description>Draws a shooting line in the direction of all available bots.</description>
          <arguments>
            <argument token="" description="this command does not take any arguments" valueNotes="none"/>
          </arguments>
          <remarks>
            <remark>This is a debugging command and only works for single player modes.</remark>
          </remarks>
        </command>

        <command name="crouch"/>
        <command name="addbot">
          <description>add a bot for a given team with a given skill calling him a given name.</description>
          <arguments>
            <argument token="T" description="team" valueNotes="RVSF or CLA"/>
            <!-- ??  or SPECTATOR  ?? -->
            <argument token="S" description="skill" valueNotes="best, good, medium, worse OR bad"/>
            <argument token="N" description="name" valueNotes="name for the bot"/>
          </arguments>
          <remarks>
            <remark>This command only works for single player modes.</remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[addbot RVSF medium Robbie]]></code>
              <explanation>Will add a bot named Robbie with a medium skill level to the RVSF team.</explanation>
            </example>
          </examples>
        </command>

        <command name="addnbot">
          <description>will add a given count of bots for the given team with the given skill and select random names for them.</description>
          <arguments>
            <argument token="C" description="count" valueNotes="how many bots to add"/>
            <argument token="T" description="team" valueNotes="RVSF or CLA"/>
            <!-- ?? or SPECTATOR ?? -->
            <argument token="S" description="skill" valueNotes="best, good, medium, worse OR bad"/>
          </arguments>
          <remarks>
            <remark>This command only works for single player modes.</remark>
            <remark>The name of the bots will be selected randomly.</remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[addnbot 2 CLA bad]]></code>
              <explanation>Will add 2 bots with a bad skill level to the CLA team.</explanation>
            </example>
          </examples>
        </command>

        <command name="botskill">
          <description>changes the skill level for the given bot.</description>
          <arguments>
            <argument token="N" description="botname" valueNotes="the name of the bot"/>
            <argument token="S" description="botskill" valueNotes="best, good, medium, worse OR bad"/>
          </arguments>
          <examples>
            <example>
              <code><![CDATA[botskill Robbie best]]></code>
              <explanation>Changes the previous bot skill level of the bot named Robbie to a 'best' skill level.</explanation>
            </example>
          </examples>
        </command>

        <command name="botskillall">
          <description>changes the skill level for all bots.</description>
          <arguments>
            <argument token="S" description="botskill" valueNotes="best, good, medium, worse OR bad"/>
          </arguments>
          <examples>
            <example>
              <code><![CDATA[botskillall worse]]></code>
              <explanation>Changes the previous bot skill level for all bots to a 'worse' skill level.</explanation>
            </example>
          </examples>
        </command>

        <command name="botsshoot">
          <description>Enables or disables the ability of the bots to fire their weapons</description>
          <arguments>
            <argument token="T" description="shooting bots?" valueNotes="0||1"/>
          </arguments>
          <examples>
            <example>
              <code><![CDATA[botsshoot 0]]></code>
              <explanation>Bots won't shoot.</explanation>
            </example>
          </examples>
        </command>

        <command name="changefollowplayer">
          <arguments>
            <argument token="D" description="delta" valueNotes="how many players to shift +/-"/>
          </arguments>
        </command>

        <command name="setfollowplayer">
          <arguments>
            <argument token="C" description="clientnum" valueNotes="which player to follow"/>
          </arguments>
        </command>

        <command name="alive">
          <description>Returns 1 if the local player is alive.</description>
          <examples>
            <example>
              <code><![CDATA[echo (alive)]]></code>
              <explanation>Output: 1</explanation>
            </example>
          </examples>
        </command>

        <command name="curmap">
          <description>Returns the current map being played.</description>
          <remarks>
            <remark>If you pass it a non-zero value, the result will be path-less.</remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[echo playing: (curmap) vote for: (curmap 1)]]></code>
              <explanation>output: playing maps/ac_complex vote for: ac_complex</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="curmode"/>
            <identifierReference identifier="map"/>
            <identifierReference identifier="mode"/>
          </references>
          <arguments>
            <argument token="I" description="clean" valueNotes="0, 1"/>
          </arguments>
        </command>

        <command name="curmode">
          <description>Returns the mode number for the current game.</description>
          <references>
            <identifierReference identifier="curmap"/>
            <identifierReference identifier="map"/>
            <identifierReference identifier="mode"/>
          </references>
        </command>
        
        <command name="modenum">
          <description>Returns the mode number for a specified mode acronym.</description>
          <examples>
            <example>
              <code><![CDATA[echo (modenum ctf)]]></code>
              <explanation>Output: 5</explanation>
            </example>
            <example>
              <code><![CDATA[echo (modenum btosok)]]></code>
              <explanation>Output: 21</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="M" description="the mode acronym"/>
          </arguments>
          <remarks>
            <remark>Returns -1 if not found.</remark>
          </remarks>
        </command>

        <variable name="curmaprevision">
          <description>Current map revision number.</description>
          <value description="-" minValue="1" maxValue="0" defaultValue="1" readOnly="true"/>
        </variable>

        <command name="curmodeattr">
          <description>Checks the current game mode for certain attributes.</description>
          <arguments>
            <argument token="A" description="attribute name"/>
          </arguments>
          <remarks>
            <remark>Possible attributes are: team, arena, flag and bot.</remark>
          </remarks>
        </command>

        <command name="getclientmode">
          <description>Returns the current game mode number.</description>
        </command>

        <command name="curmastermode">
          <description>Returns the server's current mastermode state.</description>
        </command>

        <command name="curautoteam">
          <description>Returns the server's current autoteam state.</description>
        </command>

        <command name="currentprimary">
          <description>Returns the weapon-index the local player currently has selected as primary.</description>
          <remarks>
            <remark>This is not the same as curweapon - which could be a grenade or the knife.</remark>
          </remarks>
          <references>
            <identifierReference identifier="nextprimary"/>
            <identifierReference identifier="curweapon"/>
            <identifierReference identifier="prevweapon"/>
            <identifierReference identifier="weapon"/>
            <identifierReference identifier="magcontent"/>
            <identifierReference identifier="magreserve"/>
            <identifierReference identifier="hasprimary"/>
          </references>
        </command>
        
        <command name="hasprimary">
          <description>Determines if the local player (you) are currently carrying a primary weapon.</description>
          <examples>
            <example>
              <code><![CDATA[add2bind MOUSE1 [ if (hasprimary) [ echo you attacked with a primary weapon ] ]]]></code>
              <explanation>Everytime you press the left mouse button, assuming you are carrying your primary weapon, the above echo will be executed.</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="currentprimary"/>
            <identifierReference identifier="curweapon"/>
            <identifierReference identifier="checkmag"/>
          </references>
          <remarks>
            <remark>Returns 0 (false) or 1 (true).</remark>
          </remarks>
        </command>

        <command name="currole">
          <description>Returns 1 if the local player has admin privileges, 0 otherwise.</description>
          <references>
            <identifierReference identifier="setadmin"/>
            <identifierReference identifier="connectadmin"/>
          </references>
        </command>

        <command name="curserver">
          <description>Returns information on the current server - if you're connected to one.</description>
          <remarks>
            <remark>If I is 0 (omitted or any other value than the ones below) you will get a string with 'IP PORT'</remark>
            <remark>If I is 1,2 or 3 you will get the IP, HostName or port respectively.</remark>
            <remark>If I is 4 you get a string representing the current state of the peer - usually this should be 'connected'.</remark>
            <remark>FIXME:TODO: 5=SERVERNAME, 6,7=description, 8=serverbrowser-line -- these are to be handled with caution, sometimes empty, #8 will be outdated w/o serverbrowser open.</remark>
          </remarks>
          <arguments>
            <argument token="I" description="info" valueNotes="0, 1, 2, 3, 4, 5, 6, 7, 8"/>
          </arguments>
          <examples>
            <example>
              <code><![CDATA[echo [I am (curserver 4) to (curserver 2)]]]></code>
              <explanation>Output: I am connected to ctf-only.assault-servers.net</explanation>
            </example>
            <example>
              <code>
                <![CDATA[
                last_server = ""
                remember_server = [ if (strcmp (curserver 4) "connected")
                [ last_server = (curserver 0) echo "I'm remembering:" $last_server ]
                [ echo "you are not 'connected' - you" (concatword "are '" (curserver 4) "' !") ] ]
                bind PRINT [ if (strcmp $last_server "") [ remember_server ]
                [ say (concat "^L2I was just ^Lfon^L3" $last_server) last_server = "" ] ]]]></code>
              <explanation>This will either remember or retrieve the last server you pressed the PrintScreen-key on.</explanation>
            </example>
          </examples>
        </command>

        <command name="curteam">
          <description>Returns an integer indicating what team a client is currently on.</description>
          <arguments>
            <argument token="C" description="client number" valueNotes="returns the specified client's team instead" optional="true"/>
          </arguments>
          <remarks>
            <remark>Returns 0 for CLA, 1 for RVSF.</remark>
            <remark>Returns 2 for CLA-spectator, 3 for RVSF-spectator.</remark>
            <remark>Returns 4 for spectator.</remark>
            <remark>By default this command returns what team *you* (player1) are currently on.</remark>
          </remarks>
          <references>
            <identifierReference identifier="team"/>
            <identifierReference identifier="forceteam"/>
            <identifierReference identifier="skin"/>
          </references>
        </command>

        <command name="curweapon">
          <description>Returns the weapon-index the local player is currently holding.</description>
          <references>
            <identifierReference identifier="currentprimary"/>
            <identifierReference identifier="nextprimary"/>
            <identifierReference identifier="prevweapon"/>
            <identifierReference identifier="weapon"/>
            <identifierReference identifier="magcontent"/>
            <identifierReference identifier="magreserve"/>
            <identifierReference identifier="hasprimary"/>
          </references>
        </command>

        <command name="prevweapon">
          <description>Returns the weapon-index the local player was previously holding.</description>
          <references>
            <identifierReference identifier="currentprimary"/>
            <identifierReference identifier="nextprimary"/>
            <identifierReference identifier="curweapon"/>
            <identifierReference identifier="weapon"/>
            <identifierReference identifier="magcontent"/>
            <identifierReference identifier="magreserve"/>
          </references>
        </command>

        <variable name="hidecustomskins">
          <value token="B" description="" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="mdldyncache">
          <value token="V" description="" minValue="1" maxValue="32" defaultValue="2"/>
        </variable>

        <variable name="mdlstatcache">
          <value token="V" description="" minValue="1" maxValue="32" defaultValue="1"/>
        </variable>

        <command name="map">
          <description>Loads up a map in the gamemode set previously by the 'mode' command.</description>
          <remarks>
            <remark>
              If connected to a multiplayer server, it votes to load the map (others will have to type "map M" as well
              to agree with loading this map). To vote for a map with a specific mode, set the mode before you issue the map command.
            </remark>
            <remark>
              A map given as "blah" refers to "packages/maps/blah.cgz", "mypackage/blah" refers to "packages/mypackage/blah.cgz".
              At every map load, "config/default_map_settings.cfg" is loaded which sets up all texture definitions, etc. Everything
              defined there can be overridden per package or per map by creating a "mapname.cfg" which
              contains whatever you want to do differently from the default.
            </remark>
            <remark>
              When the map finishes it will load the next map when one is defined, otherwise it reloads the current map.
              You can define what map follows a particular map by making an alias like (in the map script): alias nextmap_blah1 blah2
              (loads "blah2" after "blah1").
            </remark>
          </remarks>
          <arguments>
            <argument token="M" description="Name of the map to load" valueNotes="string"/>
          </arguments>
        </command>
        
        <command name="votemap">
          <description>Sets the next gamemode then calls a vote for a map.</description>
          <arguments>
            <argument token="I" description="mode id"/>
            <argument token="M" description="map name"/>
          </arguments>
        </command>

        <command name="nextprimary">
          <description>Returns the primary weapon on next respawn.</description>
          <arguments>
            <argument token="A" description="weapon id" valueNotes="value"/>
          </arguments>
        </command>

        <command name="reload">
          <description>Reloads the weapon.</description>
          <arguments>
            <argument token="A" description="" valueNotes="value"/>
          </arguments>
        </command>

        <command name="skin">
          <description>Determines the skin of the current player.</description>
          <remarks>
            <remark>See the player model folder for the according skin-id.</remark>
          </remarks>
          <arguments>
            <argument token="N" description="skin id" valueNotes="value"/>
          </arguments>
        </command>

        <command name="skin_cla">
          <description>Choose skin when playing for team CLA.</description>
          <arguments>
            <argument token="N" description="skin id"/>
          </arguments>
        </command>

        <command name="skin_rvsf">
          <description>Choose skin when playing for team RVSF.</description>
          <arguments>
            <argument token="N" description="skin id"/>
          </arguments>
        </command>

        <command name="name">
          <description>Sets the nick name for the local player.</description>
          <arguments>
            <argument token="N" description="the name"/>
          </arguments>
        </command>

        <command name="say">
          <description>Outputs text to other players.</description>
          <remarks>
            <remark>
              If the text begins with a percent character (%),
              only team mates will receive the message.
            </remark>
          </remarks>
          <arguments>
            <variableArgument token="S..." description="the text"/>
          </arguments>
        </command>

        <command name="pm">
          <description>Sends a private message to a specified client.</description>
          <arguments>
            <argument token="C" description="Client number"/>
            <argument token="L" description="List of strings"/>
          </arguments>
          <references>
            <identifierReference identifier="say"/>
            <identifierReference identifier="quickanswer"/>
          </references>
        </command>
        
        <command name="quickanswer">
          <description>Easily respond the the last client who sent you a private message.</description>
          <references>
            <identifierReference identifier="pm"/>
          </references>
        </command>

        <command name="ignore">
          <description>Ignore a player.</description>
          <arguments>
            <argument token="A" description="client number"/>
          </arguments>
          <remarks>
            <remark>You won't see any further game chat or hear any more voice com messages from that player.</remark>
          </remarks>
        </command>

        <command name="listignored">
          <description>Print a list of all players that you are currently ignoring.</description>
        </command>

        <command name="clearignored">
          <description>Clear list of ignored players.</description>
          <arguments>
            <argument token="A" description="client number, or -1 to clear the whole list"/>
          </arguments>
          <remarks>
            <remark>Omit the client number to clear the whole list.</remark>
          </remarks>
        </command>
        
        <command name="ignoreall">
          <description>Ignores all clients currently on the server. (only works in multiplayer)</description>
          <references>
            <identifierReference identifier="unignoreall"/>
            <identifierReference identifier="ignoreteam"/>
            <identifierReference identifier="ignoreenemy"/>
          </references>
        </command>
        
        <command name="unignoreall">
          <description>Unignores all clients currently on the server. (only works in multiplayer)</description>
          <references>
            <identifierReference identifier="ignoreall"/>
            <identifierReference identifier="ignoreteam"/>
            <identifierReference identifier="ignoreenemy"/>
          </references>
        </command>
        
        <command name="ignoreteam">
          <description>Ignores all clients on the specified team.</description>
          <references>
            <identifierReference identifier="ignoreall"/>
            <identifierReference identifier="unignoreall"/>
            <identifierReference identifier="ignoreenemy"/>
          </references>
          <arguments>
            <argument token="T" description="the team to ignore" valueNotes="0 or 1 || cla or rvsf"/>
          </arguments>
        </command>
        
        <command name="ignoreenemy">
          <description>Ignores all clients on the enemy team.</description>
          <references>
            <identifierReference identifier="ignoreall"/>
            <identifierReference identifier="unignoreall"/>
            <identifierReference identifier="ignoreteam"/>
          </references>
        </command>

        <command name="muteplayer">
          <description>Mute a player</description>
          <arguments>
            <argument token="A" description="client number"/>
          </arguments>
          <remarks>
            <remark>You won't hear any further voice com messages from that player.</remark>
          </remarks>
        </command>

        <command name="clearmuted">
          <description>Clear list of muted players.</description>
          <arguments>
            <argument token="A" description="client number, or -1 to clear the whole list"/>
          </arguments>
          <remarks>
            <remark>Omit the client number to clear the whole list.</remark>
          </remarks>
        </command>

        <command name="listmuted">
          <description>Print a list of all players that you have muted.</description>
        </command>

        <command name="me">
          <description>Action chat message.</description>
          <arguments>
            <variableArgument token="..." description="..."/>
          </arguments>
        </command>

        <command name="saycommand">
          <description>Puts a prompt on screen.</description>
          <remarks>
            <remark>
              This puts a prompt on screen that you can type into,
              and will capture all keystrokes until you press return (or ESC to cancel).
              If what you typed started with a "/", the rest of it will be executed as a command,
              otherwise its something you "say" to all players.
            </remark>
          </remarks>
          <defaultKeys>
            <key alias="T" description="opens empty prompt"/>
            <key alias="BACKQUOTE" name="`" description="opens a command prompt /"/>
            <key alias="TAB" description="autocompletes commands/variables/aliases"/>
            <key alias="UP" description="browse command history forwards"/>
            <key alias="DOWN" description="browse command history backwards"/>
          </defaultKeys>
          <arguments>
            <variableArgument token="S..." description="the text to display in the prompt" optional="true"/>
          </arguments>
          <references>
            <identifierReference identifier="complete"/>
            <identifierReference identifier="listcomplete"/>
            <identifierReference identifier="inputcommand"/>
          </references>
        </command>

        <command name="inputcommand">
          <description>Makes an input perform a certain command.</description>
          <arguments>
            <argument token="I" description="input"/>
            <argument token="C" description="command"/>
            <argument token="P" description="prompt"/>
          </arguments>
          <references>
            <identifierReference identifier="complete"/>
            <identifierReference identifier="listcomplete"/>
            <identifierReference identifier="saycommand"/>
          </references>
          <examples>
          </examples>
        </command>

        <command name="complete">
          <arguments>
            <argument token="C" description="command" valueNotes="any command or alias"/>
            <argument token="P" description="path" valueNotes="path to search"/>
            <argument token="E" description="extension" valueNotes="extension to match"/>
          </arguments>
          <remarks>
            <remark>The completion will work on the first word of your console input.</remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[complete demo "demos" dmo]]></code>
              <explanation>If you enter "/demo " and press TAB you will cycle through all available demos.</explanation>
            </example>
            <example>
              <code><![CDATA[alias mapcomplete [complete $arg1 "packages/maps" cgz]]]></code>
              <explanation>helper alias for quickly adding complete-definitions for all gamemodes - see config/script.cfg (below "Auto-Completions")</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="saycommand"/>
            <identifierReference identifier="listcomplete"/>
          </references>
        </command>

        <command name="listcomplete">
          <argument token="A" description="" valueNotes="value"/>
          <references>
            <identifierReference identifier="saycommand"/>
            <identifierReference identifier="complete"/>
          </references>
        </command>

        <command name="nickcomplete">
          <argument token="C" description="command" valueNotes="any command or alias"/>
          <description>adds a command to complete nicknames on</description>
          <remarks>
            <remark>your own nick will be ignored</remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[nickgreet = [ say (concat "Hello," (concatword $arg1 "!")) ]; nickcomplete nickgreet]]></code>
              <explanation>with this you can enter "/nickgreet " and cycle via TAB to the nickname you want to greet.</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="complete"/>
          </references>
        </command>

        <command name="connect">
          <description>Connects to a server.</description>
          <remarks>
            <remark>
              If the server name is omitted, the client will try to connect to an available server in the LAN.
              If the port is omitted or set to 0, the default port will be used.
            </remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[connect 127.0.0.1 555 myServerPassword]]></code>
            </example>
          </examples>
          <references>
            <identifierReference identifier="connectadmin"/>
            <identifierReference identifier="disconnect"/>
            <identifierReference identifier="reconnect"/>
          </references>
          <arguments>
            <argument token="N" description="the address of the server (hostname or IP)" optional="true"/>
            <argument token="O" description="the port" optional="true"/>
            <argument token="P" description="the server password" optional="true"/>
          </arguments>
        </command>

        <command name="connectadmin">
          <description>Connects to a server and tries to claim admin state.</description>
          <remarks>
            <remark>
              This command will connect to a server just like the command 'connect' and
              try to claim admin state. If the specified password is correct, the admin
              will be able to connect even if he is locked out by ban, private master mode or taken client slots.
              If successfully connected, bans assigned to the admin's host will be removed automatically. If all
              client slots are taken a random client will be kicked to let the admin in.
            </remark>
            <remark>
              If the server name ist omitted, the client will try to connect to an available server in the LAN.
              If the port is omitted or set to 0, the default port will be used.
            </remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[connectadmin 127.0.0.1 777 myAdminPassword]]></code>
              <explanation>connect as admin on port 777 of localhost</explanation>
            </example>
            <example>
              <code><![CDATA[connectadmin "" 0 myAdminPassword]]></code>
              <explanation>will try to connect to a LAN server on the default port as admin with the given password of "myAdminPassword".</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="currole"/>
            <identifierReference identifier="connect"/>
            <identifierReference identifier="disconnect"/>
            <identifierReference identifier="reconnect"/>
          </references>
          <arguments>
            <argument token="N" description="the address of the server (hostname or IP)" optional="true"/>
            <argument token="O" description="the port" optional="true"/>
            <argument token="P" description="the admin password"/>
          </arguments>
        </command>

        <command name="disconnect">
          <description>Leaves a server.</description>
          <references>
            <identifierReference identifier="reconnect"/>
            <identifierReference identifier="connect"/>
            <identifierReference identifier="connectadmin"/>
          </references>
        </command>
        
        <command name="reconnect">
          <description>Disconnects then reconnects you to the current server.</description>
          <arguments>
            <argument token="P" description="the server password" optional="true"/>
          </arguments>
          <references>
            <identifierReference identifier="disconnect"/>
            <identifierReference identifier="connect"/>
            <identifierReference identifier="connectadmin"/>
          </references>
        </command>

        <command name="team">
          <description>Sets the team for the local player.</description>
          <examples>
            <example>
              <code><![CDATA[team CLA]]></code>
            </example>
          </examples>
          <arguments>
            <argument token="S" description="the team name" valueNotes="either CLA or RVSF or SPECTATOR"/>
          </arguments>
        </command>

        <command name="benchme">
          <description>Move from active team to spectator during match.</description>
        </command>

        <command name="modconnect">
          <description>Connect to a modded server.</description>
          <arguments>
            <argument token="A" description="IP"/>
            <argument token="B" description="port"/>
            <argument token="C" description="password"/>
          </arguments>
          <remarks>
            <remark>
              The modified server needs to use the original client-server protocol. The protocol version number
              will be the negated value of an unmodded server.
            </remark>
          </remarks>
        </command>

        <command name="modconnectadmin">
          <description>Connect to a modded server and claim admin.</description>
          <arguments>
            <argument token="A" description="IP"/>
            <argument token="B" description="port"/>
            <argument token="C" description="admin password"/>
          </arguments>
          <remarks>
            <remark>
              The modified server needs to use the original client-server protocol. The protocol version number
              will be the negated value of an unmodded server.
            </remark>
          </remarks>
        </command>

        <command name="modlanconnect">
          <description>Connect to a modified LAN server.</description>
          <remarks>
            <remark>
              The modified server needs to use the original client-server protocol. The protocol version number
              will be the negated value of an unmodded server.
            </remark>
          </remarks>
        </command>

        <command name="showscores">
          <description>Shows or hides the scores.</description>
          <defaultKeys>
            <key alias="TAB"/>
          </defaultKeys>
        </command>

        <command name="weapon">
          <description>Changes the weapon.</description>
          <arguments>
            <argument token="N" description="the weapon number" valueNotes="0 (knife), 1 (pistol), 2 (shotgun), 3 (sub), 4 (sniper), 5 (assault), 6 (grenades)"/>
          </arguments>
        </command>
        
        <command name="primary">
          <description>Switches to your current primary weapon. (must be binded to a key)</description>
          <references>
            <identifierReference identifier="secondary"/>
            <identifierReference identifier="melee"/>
            <identifierReference identifier="grenades"/>
          </references>
        </command>
        
        <command name="secondary">
          <description>Switches to your secondary weapon. (must be binded to a key)</description>
          <references>
            <identifierReference identifier="primary"/>
            <identifierReference identifier="melee"/>
            <identifierReference identifier="grenades"/>
          </references>
        </command>
        
        <command name="melee">
          <description>Switches to your knife. (must be binded to a key)</description>
          <references>
            <identifierReference identifier="primary"/>
            <identifierReference identifier="secondary"/>
            <identifierReference identifier="grenades"/>
          </references>
        </command>
        
        <command name="grenades">
          <description>Switches to grenades. (if available) (must be binded to a key)</description>
          <references>
            <identifierReference identifier="primary"/>
            <identifierReference identifier="secondary"/>
            <identifierReference identifier="melee"/>
          </references>
        </command>
        
        <command name="sndtoggle">
          <description>Toggles between your primary weapon and your secondary weapon. (must be binded to a key)</description>
          <references>
            <identifierReference identifier="knftoggle"/>
            <identifierReference identifier="gndtoggle"/>
          </references>
        </command>
        
        <command name="knftoggle">
          <description>Toggles between your primary weapon and your knife. (must be binded to a key)</description>
          <references>
            <identifierReference identifier="sndtoggle"/>
            <identifierReference identifier="gndtoggle"/>
          </references>
        </command>
        
        <command name="gndtoggle">
          <description>Toggles between your primary weapon and grenades. (must be binded to a key)</description>
          <references>
            <identifierReference identifier="sndtoggle"/>
            <identifierReference identifier="knftoggle"/>
          </references>
        </command>

        <command name="magcontent">
          <description>Returns contents of current magazine.</description>
          <remarks>
            <remark>A knife will always return 1.</remark>
            <remark>Weapons that aren't available will return -1.</remark>
          </remarks>
          <references>
            <identifierReference identifier="curweapon"/>
            <identifierReference identifier="currentprimary"/>
            <identifierReference identifier="nextprimary"/>
            <identifierReference identifier="prevweapon"/>
            <identifierReference identifier="weapon"/>
            <identifierReference identifier="magreserve"/>
          </references>
          <arguments>
            <argument token="N" description="the weapon number"/>
          </arguments>
        </command>

        <command name="magreserve">
          <description>Returns contents of magazine reserve.</description>
          <references>
            <identifierReference identifier="curweapon"/>
            <identifierReference identifier="currentprimary"/>
            <identifierReference identifier="nextprimary"/>
            <identifierReference identifier="prevweapon"/>
            <identifierReference identifier="weapon"/>
            <identifierReference identifier="magcontent"/>
          </references>
          <arguments>
            <argument token="N" description="the weapon number"/>
          </arguments>
        </command>
        
        <command name="checkmag">
          <description>Determines if you have any ammunition available for the specified weapon. (uses magcontent and magreserve)</description>
          <references>
            <identifierReference identifier="magcontent"/>
            <identifierReference identifier="magreserve"/>
          </references>
          <arguments>
            <argument token="N" description="the weapon number"/>
          </arguments>
        </command>

        <command name="getmap">
          <description>Retrieves the last map that was sent to the server using 'sendmap'.</description>
          <remarks>
            <remark>If the command is passed an argument, different than the map being played, the game tries to download the specified map from an available packages source server.</remark>
          </remarks>
          
          <references>
            <identifierReference identifier="sendmap"/>
            <identifierReference identifier="dlmap"/>
          </references>
          
          <arguments>
            <argument token="S" description="the name of the map"/>
            <argument token="C" description="cubescript to execute once map is installed" optional="true"/>
          </arguments>
        </command>
        
        <command name="dlmap">
          <description>Downloads and loads the specified map from an available packages source server.</description>
          <arguments>
            <argument token="S" description="the name of the map"/>
          </arguments>
          <references>
            <identifierReference identifier="getmap"/>
            <identifierReference identifier="sendmap"/>
          </references>
        </command>
        
        <command name="addpckserver">
          <description>Adds a packages source server where to download custom content from.</description>
          <remarks>
            <remark>Only add servers you trust.</remark>
            <remark>The list of servers is saved into config/pcksources.cfg on game quit.</remark>
          </remarks>
          
          <examples>
            <example>
              <code>addpckserver http://packages.ac-akimbo.net</code>
            </example>
          </examples>
          
          <references>
            <identifierReference identifier="resetpckservers"/>
            <identifierReference identifier="sortpckservers"/>
            <identifierReference identifier="autodownload"/>
          </references>
          
          <arguments>
            <argument token="S" description="The server address. Trailing slash not needed."/>
          </arguments>
        </command>
        
        <command name="resetpckservers">
          <description>Resets the list of packages source servers where to download custom content from.</description>
          <remarks>
            <remark>The list of servers is saved into config/pcksources.cfg on game quit.</remark>
          </remarks>
          
          <references>
            <identifierReference identifier="addpckserver"/>
            <identifierReference identifier="sortpckservers"/>
            <identifierReference identifier="autodownload"/>
          </references>
        </command>
        
        <command name="sortpckservers">
          <description>Sorts the available packages source servers by ascendant ping. The fastest to reach is then used by default.</description>
       
          <references>
            <identifierReference identifier="addpckserver"/>
            <identifierReference identifier="sortpckservers"/>
            <identifierReference identifier="autodownload"/>
          </references>
        </command>
        
        <variable name="autodownload">
          <description>Determines if the game should try to download missing packages such as textures or mapmodels on the fly.</description>
          <value token="V" description="Note: This is turned on by default." minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <command name="spectatemode">
          <description>Sets the desired spectating mode.</description>
          <arguments>
            <argument token="M" description="the mode" valueNotes="2 (1st-person), 3 (3rd-person), 4 (3rd-person transparent), 5 (free flying), 6 (overview)"/>
          </arguments>
          <defaultKeys>
            <key alias="SPACE" description="switch spectator mode"/>
          </defaultKeys>
        </command>

        <command name="spectate">
          <description>Toggles spectator mode.</description>
        </command>

        <command name="stopdemo">
          <description>Stops any demo recording or playback.</description>
        </command>

        <command name="watchingdemo">
          <description>Returns 1 when the current game is being played from a demo, else 0.</description>
          <examples>
            <example>
              <code><![CDATA[echo I am (at [not now] (watchingdemo)) watching a demo. "so, are you?"]]></code>
            </example>
          </examples>
          <return token="B" description="truth value"/>
        </command>

        <command name="suicide">
          <description>Kills your player. You will lose 1 frag point and receive 1 death point when using this command.</description>
        </command>

        <command name="demo">
          <description>Plays a recorded demo.</description>
          <remarks>
            <remark>Playback is interpolated for the player whose perspective you view.</remark>
          </remarks>
          <arguments>
            <argument token="S" description="the demo name"/>
          </arguments>
          <references>
            <identifierReference identifier="setmr"/>
            <identifierReference identifier="rewind"/>
          </references>
        </command>

        <command name="setmr">
          <description>Go to a predefined number of minutes before the end of the game while watching a demo.</description>
          <arguments>
            <argument token="M" description="the minutes remaining to skip to"/>
          </arguments>
          <references>
            <identifierReference identifier="demo"/>
            <identifierReference identifier="rewind"/>
          </references>
        </command>

        <command name="rewind">
          <description>Rewind the current demo to S seconds ago.</description>
          <remarks>
            <remark>Note: you can use a negative value to forward.</remark>
          </remarks>
          <arguments>
            <argument token="S" description="the number of seconds to rewind"/>
          </arguments>
          <references>
            <identifierReference identifier="demo"/>
            <identifierReference identifier="setmr"/>
          </references>
        </command>

        <variable name="xhairwpsel">
          <description>Determines if bot waypoints should be selected/placed using the crosshair or by the nearest location to your player.</description>
          <value token="V" description="Note: This is turned on by default." minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="minutesremaining">
          <description>Returns the remaining minutes of the currently played game. READ ONLY</description>
          <references>
            <identifierReference identifier="gametimecurrent"/>
            <identifierReference identifier="gametimemaximum"/>
            <identifierReference identifier="lastgametimeupdate"/>
            <identifierReference identifier="millis"/>
          </references>
        </variable>

        <variable name="gametimecurrent">
          <description>Returns the time (in milliseconds) of the currently played game. READ ONLY</description>
          <examples>
            <example>
              <code><![CDATA[showtime = [
	if (> $lastgametimeupdate 0) [
    gmr = (- $gametimemaximum (+ $gametimecurrent (- (millis) $lastgametimeupdate)))
    gsr = (div $gmr 1000)
    gts = (mod $gsr 60)
    if (< $gts 10) [ gts = (concatword 0 $gts) ] [ ]
    gtm = (div $gsr 60)
    if (< $gtm 10) [ gtm = (concatword 0 $gtm) ] [ ]
    echo (concatword $gtm : $gts) remaining
	] [
    echo gametime not updated yet
	]
	      ]]]></code>
            </example>
          </examples>
          <references>
            <identifierReference identifier="minutesremaining"/>
            <identifierReference identifier="gametimemaximum"/>
            <identifierReference identifier="lastgametimeupdate"/>
            <identifierReference identifier="millis"/>
          </references>
        </variable>

        <variable name="gametimemaximum">
          <description>Returns the maximum time (in milliseconds) of the currently played game. READ ONLY</description>
          <references>
            <identifierReference identifier="minutesremaining"/>
            <identifierReference identifier="gametimecurrent"/>
            <identifierReference identifier="lastgametimeupdate"/>
            <identifierReference identifier="millis"/>
          </references>
        </variable>

        <variable name="gametimestart">
          <description>Returns the time (in milliseconds) when the last map was loaded.</description>
          <references>
            <identifierReference identifier="minutesremaining"/>
            <identifierReference identifier="gametimecurrent"/>
            <identifierReference identifier="lastgametimeupdate"/>
            <identifierReference identifier="millis"/>
          </references>
        </variable>

        <variable name="lastgametimeupdate">
          <description>Returns the last time (in milliseconds) the gametime was updated. READ ONLY</description>
          <references>
            <identifierReference identifier="minutesremaining"/>
            <identifierReference identifier="gametimecurrent"/>
            <identifierReference identifier="gametimemaximum"/>
            <identifierReference identifier="millis"/>
          </references>
        </variable>

        <variable name="paused">
          <description>Determines if the game should be paused.</description>
          <value token="B" description="pause game" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="autoreload">
          <description>Indicates if the weapons should be reloaded automatically.</description>
          <value token="B" description="the autoreload state" minValue="0" maxValue="1" defaultValue="1" valueNotes="on (1), off (0)"/>
        </variable>

        <variable name="scopefov">
          <description>Determines the FOV when scoping.</description>
          <references>
            <identifierReference identifier="fov"/>
          </references>
          <value token="V" description="" minValue="5" maxValue="60" defaultValue="50"/>
        </variable>

        <variable name="showmap">
          <description>Determines if the mini-map should be shown on screen.</description>
          <value token="B" description="show mini-map" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="showmapbackdrop">
          <description>change wether to have a see-through map overview (0), or render it on a black backdrop (1) or a combination of both (2)</description>
          <value token="B" description="backdrop-style" minValue="0" maxValue="2" defaultValue="0"/>
        </variable>

        <variable name="showmapbackdroptransparency">
          <description>Transparency of the black map backdrop (in percent) rendered if showmapbackdrop is set to 2.</description>
          <value token="T" description="transparency" minValue="0" maxValue="100" defaultValue="75"/>
          <references>
            <identifierReference identifier="showmapbackdrop"/>
          </references>
        </variable>

        <variable name="showscoresondeath">
          <description>Determines if scores should be shown on death.</description>
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="footsteps">
          <description>Indicates if the footsteps sound should be played</description>
          <value token="B" description="enable footsteps" minValue="0" maxValue="1" defaultValue="1" valueNotes="1 (true), 0 (false)"/>
        </variable>

        <variable name="localfootsteps">
          <description>Indicates if the footsteps sound for the local player should be played</description>
          <value token="B" description="enable footsteps" minValue="0" maxValue="1" defaultValue="1" valueNotes="1 (true), 0 (false)"/>
        </variable>

        <variable name="footstepalign">
          <description>Maximum time span between player animation and the playback of the footstep sound</description>
          <remarks>
            <remark>
            If the footstep sound would be played immediately when entering the radius of the other player, it would
            not be synchronous to the player model animation.
            </remark>
          </remarks>
          <value token="T" description="time span" minValue="5" maxValue="4000" defaultValue="15"/>
        </variable>

        <variable name="hitsound">
          <description>Plays a sound upon every successful hit if enabled.</description>
           <remarks>
            <remark>
            If hitsound is set to 2, the sound will be played instantly rather than after server acknowledgment.
            </remark>
          </remarks>
          <value token="B" description="off OR on" minValue="0" maxValue="2" defaultValue="0" valueNotes="0 (disabled), 1 (server), 2 (local)"/>
          <identifierReference identifier="audio"/>
          <identifierReference identifier="soundvol"/>
        </variable>

        <variable name="gamespeed">
          <description>Sets the gamespeed in percent.</description>
          <remarks>
            <remark>This does not work in multiplayer. For entertainment purposes only :)</remark>
          </remarks>
          <value token="N" description="the game speed" minValue="10" maxValue="1000" defaultValue="100"/>
          <references>
            <identifierReference identifier="changespeed"/>
          </references>
        </variable>
        
        <command name="changespeed">
          <description>Smoothly changes your gamespeed to the specified value.</description>
          <arguments>
            <argument token="S" description="the gamespeed to change to"/>
            <argument token="M" description="milliseconds between gamespeed changes"/>
          </arguments>
          <examples>
            <example>
              <code><![CDATA[changespeed 1000 30]]></code>
              <explanation>Every 30 milliseconds your gamespeed is changed by 1 until it reaches its goal of gamespeed 1000.</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="gamespeed"/>
            <identifierReference identifier="changegamma"/>
          </references>
        </command>

        <variable name="akimboautoswitch">
          <description>Enables or disables automatic switching to the akimbo upon pickup.</description>
          <value token="N" description="enable or disable" minValue="0" maxValue="1" defaultValue="1"/>
          <references>
            <identifierReference identifier="akimboendaction"/>
          </references>
        </variable>

        <variable name="akimboendaction">
          <description>Sets the behavior of weapon switching upon akimbo expiration.</description>
          <value token="N" description="akimbo end action" minValue="0" maxValue="3" defaultValue="3"/>
          <arguments>
            <argument valueNotes="0 (switch to knife)"/>
            <argument valueNotes="1 (stay with pistol)"/>
            <argument valueNotes="2 (switch to grenades)"/>
            <argument valueNotes="3 (switch to primary)"/>
          </arguments>
          <references>
            <identifierReference identifier="akimboautoswitch"/>
          </references>
          <remarks>
            <remark>If no ammunition is detected for the target weapon, it will fallback to the previous weapon until it finds a weapon with ammunition to use.</remark>
          </remarks>
        </variable>

        <command name="survival">
          <description>Prepares a round of bot survival mode on the specified map.</description>
          <remarks>
            <remark>All official maps are compatible with survival, if you want to play survival on a custom map, prior edits/additions to the script are necessary, such as adding a zone for that specific map.</remark>
          </remarks>
          <arguments>
            <argument token="M" description="the map to use"/>
            <argument token="D" description="the difficulty" valueNotes="0 = easy, 1 = intermediate, 2 = hard, 3 = impossible" optional="true"/>
          </arguments>
        </command>

        <command name="drawzone">
          <description>Draws a zone marker with the specified color and dimensions on the minimap/radar. This is primarily intended for the survival mode.</description>
          <remarks>
            <remark>You can draw a few zones at a time. They will be reset (i.e. removed) once a new game starts.</remark>
            <remark>Note that the coordinates must be specified as integers, not as floating-point values.</remark>
          </remarks>
          <arguments>
            <argument token="X1" description="X-coordinate - top-left corner"/>
            <argument token="X2" description="X-coordinate - bottom-right corner"/>
            <argument token="Y1" description="Y-coordinate - top-left corner"/>
            <argument token="Y2" description="Y-coordinate - bottom-right corner"/>
            <argument token="C" description="a color for the zone, in hexadecimal notation" valueNotes="default: 0x00FF00 (green)"/>
          </arguments>
          <references>
            <identifierReference name="resetzones" identifier="resetzones"/>
            <identifierReference name="survival" identifier="survival"/>
          </references>
        </command>
        
        <command name="resetzones">
          <description>Reset all drawn zones.</description>
          <references>
            <identifierReference name="drawzone" identifier="drawzone"/>          
            <identifierReference name="survival" identifier="survival"/>
          </references>
        </command>

        <scriptalias name="onLastMin">
          <description>If this alias exists, it will be automatically executed on the last minute remaining mark.</description>
        </scriptalias>

        <command name="inWater">
          <description>Determines if the local player is standing in water or submerged.</description>
          <examples>
            <example>
              <code><![CDATA[if (inWater) [echo in water] [echo not in water]]]></code>
              <explanation>Example output: in water</explanation>
            </example>
            <example>
              <code><![CDATA[if (inWater 1) [echo submerged] [echo not submerged]]]></code>
              <explanation>Example output: not submerged</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="T" description="check if submerged instead?" valueNotes="min 0/max 1/default 0"/>
          </arguments>
        </command>

        <command name="isclient">
          <description>Determines if the client number given is a valid client (player).</description>
          <examples>
            <example>
              <code><![CDATA[echo (isclient 0)]]></code>
              <explanation>Example output: 1</explanation>
            </example>
            <example>
              <code><![CDATA[echo (isclient 32)]]></code>
              <explanation>Example output: 0</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="C" description="client number"/>
          </arguments>
        </command>

      </identifiers>
    </section>
    <!-- Gameplay Section Ends -->
    <!-- Editing Section Starts -->
    <section name="Editing" sortindex="09">
      <identifiers sort="true">
      
        <scriptalias name="newselkeys">
          <description>Binds a list of keys to be used to create new (multiple) selections in editmode.</description>
          <examples>
            <example>
              <code><![CDATA[newselkeys = [LCTRL RCTRL LALT RALT]]]></code>
              <explanation>Makes all 4 keys create new (multiple) selections in editmode.</explanation>
            </example>
          </examples>
          <remarks>
            <remark>LCTRL is default.</remark>
          </remarks>
        </scriptalias>

        <command name="togglegrab">
          <description>Will toggle the focus of the mouse in game. Normally you can use your mouse to look around, when you type this command your mouse cursor is visible and can be used as normally. This is only useful when you run cube windowed.</description>
        </command>

        <command name="getentattr">
          <argument token="A" description="attribute" valueNotes="0..3"/>
        </command>

        <command name="getenttype"/>
        <command name="edittag">
          <arguments>
            <argument token="T" description="tag" valueNotes="integer value"/>
          </arguments>
        </command>

        <command name="setjumpwp">
          <references>
            <identifierReference identifier="unsetjumpwp"/>
          </references>
        </command>

        <command name="unsetjumpwp">
          <references>
            <identifierReference identifier="setjumpwp"/>
          </references>
        </command>

        <command name="wpclear"/>
        <command name="wpflood"/>
        <command name="wpinfo">
          <description>makes waypoints visible and either turns on or off the waypoint information display.</description>
          <arguments>
            <argument token="Y" description="show info?" valueNotes="0||1"/>
          </arguments>
        </command>

        <command name="wpload"/>
        <command name="wpsave"/>
        <command name="wpvisible">
          <arguments>
            <argument token="V" description="visible" valueNotes="0||1"/>
          </arguments>
        </command>

        <command name="setwpyaw">
          <description>takes the current player yaw for the current waypoint</description>
        </command>

        <command name="telebot">
          <description>teletransports the bot with the lowest connection number to you current position.</description>
          <arguments>
            <argument token="" description="this command does not take any arguments" valueNotes="none"/>
          </arguments>
          <remarks>
            <remark>This is a debugging command and only works for single player modes.</remark>
          </remarks>
        </command>

        <command name="togglebotview">
          <description>When used you will see what the bot sees. Type it again (with or without name) to return to the game(you will respawn).</description>
          <arguments>
            <argument token="N" description="botname" valueNotes="the name of the bot"/>
          </arguments>
        </command>

        <command name="testvisible">
          <arguments>
            <argument token="D" description="direction" valueNotes="0..5 for Forward, Backward, Left, Right, Up AND Down"/>
          </arguments>
        </command>

        <command name="addpath1way1"/>
        <command name="addpath1way2"/>
        <command name="addpath2way1"/>
        <command name="addpath2way2"/>
        <command name="addwp">
          <description>Adds a bot waypoint at the current position.</description>
          <arguments>
            <argument token="A" description="connect automatically" valueNotes="0 or 1"/>
          </arguments>
        </command>

        <command name="autowp">
          <description>Automatically place waypoints.</description>
          <argument token="O" description="on" valueNotes="0 or 1"/>
        </command>

        <command name="delpath1way1"/>
        <command name="delpath1way2"/>
        <command name="delpath2way1"/>
        <command name="delpath2way2"/>
        <command name="delwp">
          <description>Deletes the selected waypoint.</description>
        </command>

        <command name="applymapsoundchanges">
          <description>During map editing, drop all mapsounds so they can be re-added.</description>
        </command>

        <variable name="editing">
          <value token="V" description="" minValue="1" maxValue="0" defaultValue="0"/>
        </variable>

        <command name="edittoggle">
          <description><![CDATA[switches between map edit mode and normal.]]></description>
          <remarks>
            <remark>
            In map edit mode you can select bits of the map by clicking or dragging your crosshair on the floor
            or ceiling (using the "attack" identifier, normally MOUSE1), then use the identifiers below to
            modify the selection. While in edit mode, normal physics and collision don't apply (clips), and key repeat is ON.
            Note that if you fly outside the map, cube still renders the world as if you were standing on the floor
            directly below the camera.
            </remark>
            <remark>Hotkey E</remark>
          </remarks>
          <references>
            <identifierReference name="select" identifier="select"/>
            <wikiReference article="Coopedit"/>
          </references>
        </command>

        <command name="edittex">
          <description><![CDATA[Changes the texture on current selection by browsing through a list of textures directly shown on the cubes.]]></description>
          <remarks>
            <remark>
            Default keys are the six keys above the cursor keys, which each 2 of them cycle one type (and numpad 7/4 for upper).
            </remark>
            <remark>
            The way this works is slightly strange at first, but allows for very fast texture assignment. All textures are in 3 individual lists for each type (both wall kinds treated the same), and each time a texture is used, it is moved to the top of the list. So after a bit of editing, all your most frequently used textures will come first when pressing these keys, and the most recently used texture is set immediately when you press the forward key for the type. These lists are saved with the map. make a selection (including wall bits) and press these keys to get a feel for what they do.
            </remark>
          </remarks>
          <arguments>
            <argument token="T" description="an integer denoting the type" valueNotes="0 (floor), 1 (lower or wall), 2 (ceiling), 3 (upper wall)"/>
            <argument token="D" description="the direction you want to cycle the textures in" valueNotes="1 (forwards), -1 (backwards)"/>
          </arguments>
        </command>

        <command name="settex">
          <description><![CDATA[Set a texture for the current selection.]]></description>
          <arguments>
            <argument token="T" description="position of the texture to set in map cfg" valueNotes="integer"/>
            <argument token="t" description="the type of the texture" valueNotes="0 (floor), 1 (wall), 2 (ceil), 3 (upper wall)"/>
          </arguments>
        </command>

        <command name="editheight">
          <description><![CDATA[Changes the height of the current selection.]]></description>
          <remarks>
            <remark>Default keys are [ and ] for floor level, and o/p for ceiling.</remark>
          </remarks>
          <arguments>
            <argument token="T" description="an integer denoting the type" valueNotes="0 (floor), 2 (ceiling)"/>
            <argument token="D" description="the delta value to move it in" valueNotes="1 (forwards), -1 (backwards)"/>
          </arguments>
        </command>

        <command name="solid">
          <description>makes the current selection all solid (i.e. wall) or all non-solid.</description>
          <remarks>
            <remark>
            This operation retains floor/ceiling heights/textures while swapping between the two. Default keys f and g respectively.
            </remark>
          </remarks>
          <arguments>
            <argument token="B" description="an integer denoting the solid-ness" valueNotes="0 (non-solid), 1..* (solid)"/>
          </arguments>
        </command>

        <command name="equalize">
          <description>Levels the floor/ceiling of the selection.</description>
          <remarks>
            <remark>default keys , and .</remark>
          </remarks>
          <arguments>
            <argument token="T" description="an integer denoting the type" valueNotes="0 (floor), 2 (ceiling)"/>
          </arguments>
        </command>

        <command name="heightfield">
          <description>Marks the current selection as a heightfield.</description>
          <remarks>
            <remark>
            marks the current selection as a heightfield, with T being floor or ceiling, as above.
            A surface marked as heightfield will use the vdelta values (see below) of its 4 corners to create a sloped surface.
            To mark a heightfield as normal again (ignoring vdelta values, set or not) use "solid 0".
            Default keys are h (floor) and i (ceiling).
            </remark>
            <remark>
            Heightfields should be made the exact size that is needed, not more not less.
            The most important reason for this is that cube automatically generates "caps" (side-faces for heightfields)
            only on the borders of the heightfield. This also means if you have 2 independent heightfields accidentally
            touch each other, you will not get correct caps. Also, a heightfield is slightly slower to render than a
            non-heightfield floor or ceiling. Last but not least, a heightfield should have all the same baseheight
            (i.e. the height determined by a normal editheight operation) to get correct results.
            </remark>
          </remarks>
          <references>
            <identifierReference name="vdelta" identifier="vdelta"/>
          </references>
          <arguments>
            <argument token="T" description="an integer denoting the type" valueNotes="0 (floor), 2 (ceiling)"/>
          </arguments>
        </command>

        <command name="vdelta">
          <description>changes the vdelta value of the current selection</description>
          <remarks>
            <remark>
            Note that unlike all other editing functions, this function doesn't affect a cube, but its top-left vertex
            (market by the dot in the editing cursor). So to edit a N * M heightfield, you will likely have to edit
            the vdelta of (N+1) * (M+1) cubes, i.e. you have to select 1 row and 1 column more in the opposite direction
            of the red dot to affect all the vertices of a heightfield of a given size (try it, it makes sense :)
            </remark>
            <remark>
            A floor delta offsets vertices to beneath the level set by editheight (and a ceil delta to above). Delta offsets have a precision of a quarter of a unit, however you should use non-unitsize vertices only to touch other such vertices. Default keys are 8 and 9 to decrease/increase the vdelta.
            </remark>
          </remarks>
          <arguments>
            <argument token="N" description="vdelta value"/>
          </arguments>
        </command>

        <command name="corner">
          <description>Makes the current selection into a "corner".</description>
          <remarks>
            <remark>
            Currently there is only one type of corner (a 45 degree one), only works on a single unit (cube) at a time.
            It can be positioned either next to 2 solid walls or
            in the middle of 2 higher floorlevels and 2 lower ones forming a diagonal (and similar with ceiling).
            </remark>
            <remark>
            In both cases, the corner will orient itself automatically depending on its neighbours, behaviour with other
            configurations than the 2 above is unspecified. Since the latter configuration generates possibly 2 floor and
            2 ceiling levels, up to 4 textures are used: for example for the 2 floors the higher one will of the cube
            itself, and the lower one of a neighbouring low cube. You can make bigger corners at once by
            issuing "corner" on grid aligned 2x2/4x4/8x8 selections, with equal size solid blocks next to them.
            </remark>
          </remarks>
          <defaultKeys>
            <key alias="K"/>
          </defaultKeys>
        </command>

        <command name="undo">
          <description>Multi-level undo of any of the changes caused by editing operations</description>
          <remarks>
            <remark>hotkey u</remark>
          </remarks>
        </command>

        <command name="undomegs">
          <description>Sets the number of megabytes used for the undo buffer.</description>
          <remarks>
            <remark>
            undo's work for any size areas, so the amount of undo steps per megabyte is more for small areas
            than for big ones (a megabyte fits 280 undo steps on a 16x16 area, but only 4 steps on a 128x128 area).
            </remark>
          </remarks>
          <arguments>
            <argument token="N" description="number of megabytes, default is 1" valueNotes="integer"/>
          </arguments>
        </command>

        <command name="copy">
          <description>Copies the current selection into a buffer.</description>
          <remarks>
            <remark>hotkey c</remark>
          </remarks>
        </command>

        <command name="copyent">
          <description>Copies the current closest entity into a buffer.</description>
          <remarks>
            <remark>Only works while in edit mode.</remark>
          </remarks>
          <references>
            <identifierReference name="pasteent" identifier="pasteent"/>
          </references>
        </command>

        <command name="paste">
          <description>Pastes a previously copied selection.</description>
          <remarks>
            <remark>
            To paste a selection back requires a same size selection at the destination location. If it is not the same
            size the selection will be resized automatically prior to the paste operation (with the red dot as anchor),
            which is easier for large selections.
            </remark>
            <remark>hotkey v</remark>
          </remarks>
        </command>

        <command name="countwalls">
          <description>Returns the number of solid walls contained into the current selection.</description>
          <arguments>
            <argument token="T" description="the integer of type of the walls you want to count" valueNotes=" 0 (solid), 1 (corner), 2 (floor heightfield), 3 (ceil heightfield), 4 (empty cube), 5 (semi solid)"/>
          </arguments>
          <examples>
            <example>
              <code><![CDATA[echo (concat "The selection contains " (countwalls 0) "solid wall(s)")]]></code>
              <explanation>Output: The selection contains 3 solid wall(s)</explanation>
            </example>
          </examples>
        </command>

        <command name="pasteent">
          <description>Pastes a previously copied entity.</description>
          <remarks>
            <remark>Only works while in edit mode.</remark>
          </remarks>
          <references>
            <identifierReference name="copyent" identifier="copyent"/>
          </references>
        </command>

        <command name="replace">
          <description>Repeats the last texture edit throughout the map.</description>
          <remarks>
            <remark>
            The way it works is intuitive: simply edit any texture anywhere, then using "replace" will replace
            all textures throughout the map in the same way (taking into account whether it was a floor/wall/ceil/upper too).
            If the there was more than one "old" texture in your selection, the one nearest to the red dot is used.
            This operation can't be undone.
            </remark>
          </remarks>
        </command>

        <command name="newent">
          <description>Adds a new entity</description>
          <remarks>
            <remark>
            (x,y) is determined by the current selection (the red dot corner) and z by the camera height, of said type.
            Type is a string giving the type of entity, such as "light", and may optionally take values (depending on the entity).
            </remark>
          </remarks>
          <arguments>
            <argument token="type" description="the entity type" valueNotes="light, sound, clip, plclip, playerstart, pistol, ammobox, grenades, health, armour, akimbo, mapmodel, ladder, ctf-flag, helmet"/>
            <argument token="value1" description="see newent 'type'"/>
            <argument token="value2" description="see newent 'type'"/>
            <argument token="value3" description="see newent 'type'"/>
            <argument token="value4" description="see newent 'type'"/>
          </arguments>
        </command>

        <command name="newent light">
          <description>Adds a new light entity</description>
          <remarks>
            <remark>if only argument R is specified, it is interpreted as brightness for white light.</remark>
          </remarks>
          <arguments>
            <argument token="radius" description="the light radius" valueNotes="1..32"/>
            <argument token="R" description="red colour component. see remarks below." valueNotes="1..255"/>
            <argument token="G" description="green colour component" valueNotes="1..255"/>
            <argument token="B" description="blue colour component" valueNotes="1..255"/>
          </arguments>
        </command>

        <command name="newent playerstart">
          <description>Adds a new spawn spot.</description>
          <remarks>
            <remark>The yaw is taken from the current camera yaw.</remark>
          </remarks>
        </command>

        <command name="newent ammobox">
          <description>Adds a new ammo box item.</description>
        </command>

        <command name="newent pistol">
          <description>Adds a pistol magazine item.</description>
        </command>

        <command name="newent grenades">
          <description>Adds a new grenades item.</description>
        </command>

        <command name="newent health">
          <description>Adds a new health item.</description>
        </command>

        <command name="newent armour">
          <description>Adds a new armour item.</description>
        </command>

        <command name="newent helmet">
          <description>Adds a new helmet item.</description>
        </command>

        <command name="newent akimbo">
          <description>Adds a new akimbo item.</description>
        </command>

        <command name="newent mapmodel">
          <description>Adds a map model to the map (i.e. a rendered md2/md3 model which you collide against but has no behaviour or movement)</description>
          <remarks>
            <remark>
            The mapmodel identifier is the desired map model which is defined by the 'mapmodel' command. The order in which
            the mapmodel is placed in the map config file defines the mapmodel identifier.
            The map texture refers to a texture which is defined by the 'texture' command, if omitted the
            models default skin will be used. The 'mapmodel' and 'texture' commands are placed in the map config normally.
            Mapmodels are more expensive than normal map geometry, so do not use insane amounts of them to replace normal geometry.
            </remark>
          </remarks>
          <arguments>
            <argument token="N" description="The mapmodel identifier" valueNotes="Integer"/>
            <argument token="Z" description="Extra elevation above ground" valueNotes="Integer" optional="true"/>
            <argument token="T" description="The map texture to use" valueNotes="Integer" optional="true"/>
          </arguments>
        </command>

        <command name="newent ctf-flag">
          <description>Adds a CTF flag entity.</description>
          <remarks>
            <remark>Note that outside of edit mode, this entity is only rendered as flag if the current game mode is CTF.</remark>
          </remarks>
          <arguments>
            <argument token="T" description="denotes the flag's team" valueNotes="0 (CLA), 1 (RVSF)"/>
          </arguments>
        </command>

        <command name="newent ladder">
          <description>Adds a ladder entity.</description>
          <remarks>
            <remark>
            Note that this entity is used for physics only, to create a visual ladder you
            will need to add a mapmodel entity too.
            </remark>
          </remarks>
          <references>
            <identifierReference name="newent mapmodel" identifier="newent mapmodel"/>
          </references>
          <arguments>
            <argument token="H" description="the height of the ladder" valueNotes="integer"/>
          </arguments>
        </command>

        <command name="newent sound">
          <description>Adds a sound entity.</description>
          <remarks>
            <remark>
            Will play map-specific sound so long as the player is within the radius.
            However, only up to the max uses allowed for N (specified in the mapsound command) will play, even if the player is within the radius of more N sounds than the max.
            By default (size 0), the sound is a point source. Its volume is maximal at the entity's location, and tapers off to 0 at the radius. If size is specified,
            the volume is maximal within the specified size, and only starts tapering once outside this distance. Radius is always defined as distance from the entity's location,
            so a size greater than or equal to the radius will just make a sound that is always max volume within the radius, and off outside.
            </remark>
            <remark>
            A sound entity can be either ambient or non-ambient. Ambient sounds have no specific direction, they are 'just there'. Non-ambient sounds however appear to come from a specific direction (stereo panning).
            If S is set to 0, the sound is a single point and will therefore be non-ambient. However if S is greater than 0, the sound will be ambient as it covers a specified area instead of being a single point.
            </remark>
          </remarks>
          <references>
            <identifierReference identifier="mapsound"/>
          </references>
          <arguments>
            <argument token="N" description="the sound to play" valueNotes="integer"/>
            <argument token="R" description="the radius"/>
            <argument token="S" description="the size" optional="true" valueNotes="default 0"/>
            <argument token="V" description="the volume" optional="true" valueNotes="default 255"/>
          </arguments>
        </command>

        <command name="newent clip">
          <description>Adds a clip entity.</description>
          <remarks>
            <remark>Defines a clipping box against which the player will collide.</remark>
            <remark>
            Use this clip type to clip visible obstacles like fences or the gas tank. If you only want to prevent a player from entering an area, use plclip instead.
            </remark>
          </remarks>
          <arguments>
            <argument token="Z" description="elevation above the ground" valueNotes="integer"/>
            <argument token="X" description="X radius around the box center" valueNotes="integer"/>
            <argument token="Y" description="Y radius around the box center" valueNotes="integer"/>
            <argument token="H" description="height of the box" valueNotes="integer"/>
          </arguments>
        </command>

        <command name="ambientsoundvol">
          <description>Deletes the entity closest to the player</description>
          <remarks>
            <remark>hotkey x</remark>
          </remarks>
        </command>

        <command name="newent plclip">
          <description>Adds a player clip entity.</description>
          <remarks>
            <remark>Defines a clipping box against which (only) the player will collide.</remark>
            <remark>
            Use this clip type to define no-go areas for players without visible obstacles, for example to prevent players from walking on a wall.
            </remark>
            <remark>Nades will not be affected by this clip type.</remark>
          </remarks>
          <arguments>
            <argument token="Z" description="elevation above the ground" valueNotes="integer"/>
            <argument token="X" description="X radius around the box center" valueNotes="integer"/>
            <argument token="Y" description="Y radius around the box center" valueNotes="integer"/>
            <argument token="H" description="height of the box" valueNotes="integer"/>
          </arguments>
        </command>

        <command name="delent">
          <description>Deletes the entity closest to the player</description>
          <remarks>
            <remark>hotkey x</remark>
          </remarks>
        </command>

        <command name="entset">
          <description>Edits the closest entity.</description>
          <remarks>
            <remark>Overwrites the closest entity with the specified values.</remark>
          </remarks>
          <arguments>
            <argument token="type" description="the entity type" valueNotes="light, sound, clip, plclip, playerstart, pistol, ammobox, grenades, health, armour, akimbo, mapmodel, ladder, ctf-flag, helmet"/>
            <argument token="value1" description="see newent 'type'"/>
            <argument token="value2" description="see newent 'type'"/>
            <argument token="value3" description="see newent 'type'"/>
            <argument token="value4" description="see newent 'type'"/>
          </arguments>
        </command>

        <command name="entproperty">
          <description>Changes property of the closest entity.</description>
          <remarks>
            <remark>For example 'entproperty 0 2' when executed near a lightsource would increase its radius by 2.</remark>
          </remarks>
          <arguments>
            <argument token="P" description="the property to change" valueNotes="0..3"/>
            <argument token="A" description="amount by wich the property is increased" valueNotes="integer"/>
          </arguments>
        </command>

        <command name="clearents">
          <description>Deletes all entities of said type.</description>
          <arguments>
            <argument token="T" description="the entity type, see command 'newent'" valueNotes="string"/>
          </arguments>
        </command>

        <command name="recalc">
          <description>Recomputes all there is to recompute about a map, currently only lighting.</description>
          <remarks>
            <remark>hotkey R</remark>
          </remarks>
        </command>

        <command name="savemap">
          <description>Saves the current map.</description>
          <remarks>
            <remark>
            savemap makes a versioned backup (mapname_N.BAK) if a map by that name already exists.
            If the name argument is omitted, it is saved under the current map name.
            </remark>
            <remark>
            Where you store a map depends on the complexity of what you are creating: if its a single
            map (maybe with its own .cfg) then the "base" package is the best place. If its multiple maps
            or a map with new media (textures etc.) its better to store it in its own package (a directory under "packages"),
            which makes distributing it less messy.
            </remark>
          </remarks>
          <references>
            <identifierReference name="map" identifier="map"/>
          </references>
          <arguments>
            <argument token="M" description="file name of the map, see command 'map' for the naming scheme" valueNotes="string"/>
          </arguments>
        </command>

        <variable name="mapbackupsonsave">
          <description>Determines if map backups (.bak) should be created when a map is saved.</description>
          <value token="N" description="0 off, 1 on" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <command name="newmap">
          <description>Creates a new map.</description>
          <remarks>
            <remark>The new map has 2^S cubes. For S, 6 is small, 7 medium, 8 large.</remark>
          </remarks>
          <arguments>
            <argument token="S" description="the size of the new map" valueNotes="6..9"/>
          </arguments>
        </command>

        <command name="mapenlarge">
          <description>Enlarges the current map.</description>
          <remarks>
            <remark>
            This command will make the current map 1 power of two bigger.
            So a size 6 map (64x64 units) will become a size 7 map (128x128),
            with the old map in the middle (from 32-96) and the new areas solid.
            </remark>
          </remarks>
          <references>
            <identifierReference name="newmap" identifier="newmap"/>
          </references>
        </command>

        <command name="mapshrink">
          <description>Reduces the world size by 1.</description>
          <remarks>
            <remark>
            This command will make the current map 1 power of two smaller.
            So a size 7 map (128x128) will become a 6 size map (64x64 units), by removing 32 cubes from each side.
            The area to be removed needs to be empty (= all solid).
            </remark>
          </remarks>
        </command>

        <command name="mapmsg">
          <description>Sets the map message, which will be displayed when the map loads.</description>
          <remarks>
            <remark>You will need to use quote marks around the message, otherwise it save the message correctly.</remark>
            <remark>For example: /mapmsg "Map By Author"</remark>
          </remarks>
          <arguments>
            <argument token="M" description="The map message" valueNotes="String"/>
          </arguments>
        </command>

        <command name="getmapmsg">
          <description>Returns the map message of the current map.</description>
        </command>

        <command name="entstats">
          <description>Print some map entity statistics to the console.</description>
        </command>

        <command name="closestenttype">
          <description>Restrict 'closest entity' display to one entity type.</description>
          <arguments>
            <argument token="A" description="entity type"/>
          </arguments>
        </command>

        <command name="nextclosestent">
          <description>Choose another 'closest ent'.</description>
          <remarks>
            <remark>
            Use this, when two entities are placed in exactly the same location.
            </remark>
          </remarks>
        </command>

        <command name="nextplayerstart">
          <description>Visit next player spawn entity.</description>
          <arguments>
            <argument token="TYPE" description="0|1|100"/>
          </arguments>
        </command>
        
        <command name="convertclips">
          <description>Converts the nearest entity (if its a clip or plclip) to its opposite type.</description>
          <examples>
            <example>
              <code><![CDATA[convertclips]]></code>
              <explanation>Assuming the nearest entity is a clip, it will be converted to a plclip.</explanation>
            </example>
            <example>
              <code><![CDATA[convertclips]]></code>
              <explanation>Assuming the nearest entity is a plclip, it will be converted to a clip.</explanation>
            </example>
          </examples>
        </command>

        <command name="movemap">
          <description>Move the whole map (including all entities) in the specified direction.</description>
          <arguments>
            <argument token="dX" description="x-offset"/>
            <argument token="dY" description="y-offset"/>
            <argument token="dZ" description="z-offset"/>
          </arguments>
        </command>

        <command name="selectionflip">
          <description>Flip the selected part of the map at an axis.</description>
          <arguments>
            <argument token="AXIS" description="X or Y"/>
          </arguments>
        </command>

        <command name="selectionrotate">
          <description>Rotate the selected part of the map in 90 degree steps.</description>
          <arguments>
            <argument token="D" description="steps"/>
          </arguments>
          <remarks>
            <remark>
            To rotate clockwise, use a positive number of steps. Note, that only quadratic selections can be rotated by 90 degrees.
            </remark>
          </remarks>
        </command>

        <variable name="editaxis">
          <description>Contains the main axis of the player orientation.</description>
          <value token="N" description="11: X, 12: Y, 13: Z" minValue="0" maxValue="13" defaultValue="0"/>
        </variable>

        <variable name="advancemaprevision">
          <description>Select the increment of the map revision number for the next 'savemap'.</description>
          <value token="N" description="increment" minValue="1" maxValue="100" defaultValue="1"/>
        </variable>

        <variable name="showmodelclipping">
          <description>Show mapmodel clipping during edit mode.</description>
          <value token="N" description="-" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="showgrid">
          <description>Show editing cursor grid.</description>
          <value token="N" description="-" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>
        
        <variable name="showclips">
          <description>Show clips/plclips/mapmodel clips in edit mode.</description>
          <value token="N" description="-" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>
        
        <command name="guidetoggle">
          <description>Enables or disables a special set of default textures while editing.</description>
          <remarks>
            <remark>The textures in "packages/textures/map_editor" are used.</remark>
          </remarks>
        </command>

        <command name="waterlevel">
          <description>Sets the global water level for the map.</description>
          <remarks>
            <remark>
            Every cube that has a lower floor than the water level will be rendered with a nice wavy
            water alpha texture. Water physics will be applied to any entity located below it.
            </remark>
            <remark>
            Performance notes: water is rendered for a whole square encapsulating all visible water areas
            in the map (try flying above the map in edit mode to see how). So the most efficient water is
            a single body of water, or multiple water areas that are mostly not visible from each other.
            Players can influence how accurate the water is rendered using the "watersubdiv" command (map config).
            </remark>
          </remarks>
          <arguments>
            <argument token="H" description="the water level" valueNotes="integer"/>
          </arguments>
        </command>

        <variable name="ambient">
          <description>Controls the ambient lighting of the map, i.e. how bright areas not affected by any light entities will appear.</description>
          <description>This should be entered in hexadecimal notation, as 0xRRGGBB. If the green and blue are both zero, the input will be interpreted as a grayscale value.</description>
          <value token="N" description="the ambient color" minValue="0x000000" maxValue="0xFFFFFF" defaultValue="0"/>
        </variable>

        <command name="fullbright">
          <description>Sets all light values to fullbright.</description>
          <remarks>
            <remark>Will be reset when you issue a 'recalc'. Only works in edit mode.</remark>
          </remarks>
          <arguments>
            <argument token="B" description="sets fullbright on or off" valueNotes="0 (off), 1 (on)"/>
          </arguments>
        </command>

        <command name="showmip">
          <description>Toggles between showing what parts of the scenery are rendered.</description>
          <remarks>
            <remark>
            Shows what parts of the scenery are rendered using what size cubes, and outputs some statistics about it.
            This can give map editors hints as to what architecture to align, textures to change, etc.
            </remark>
          </remarks>
        </command>

        <command name="toggleocull">
          <description>Turns occlusion culling on and off.</description>
          <remarks>
            <remark>
            The reason one may want to turn it off is to get an overview of the map from above,
            without having all occluded bits stripped out.
            </remark>
          </remarks>
        </command>

        <command name="slope">
          <description>Makes a slope out of the current selection.</description>
          <remarks>
            <remark>
            The selection must be a heightfield before this command can be used.
            The steps specify the slope with the red vertex as left-top,
            i.e. "slope 1 2" will make a slope that increases just 1 step from left to right,
            and is slightly steeper from top to bottom. "slope -6 0" decreases steeply from left to right,
            and does not slope at all from top to bottom. Note that like the vdelta command,
            an increasing vdelta goes further away from the player, regardless of floor or ceiling.
            </remark>
          </remarks>
          <arguments>
            <argument token="X" description="x delta step" valueNotes="integer"/>
            <argument token="Y" description="y delta step" valueNotes="integer"/>
          </arguments>
        </command>

        <command name="arch">
          <description>Makes an arch out of the current selection.</description>
          <remarks>
            <remark>
            The selection must be a heightfield before this command can be used.
            Will make the arch in the long direction, i.e when you have 6x2 cubes selected, the arch will span 7 vertices.
            Optionally, sidedelta specifies the delta to add to the outer rows of vertices in the other direction,
            i.e. give the impression of an arch that bends 2 ways (try "arch 2" on an selection of at least 2 thick to see the effect).
            Not all arch sizes are necessarily available, see config/prefabs.cfg.
            </remark>
          </remarks>
          <arguments>
            <argument token="S" description="side delta" optional="true"/>
          </arguments>
        </command>

        <command name="archvertex">
          <description>Defines a vertex delta for a specific arch span prefab, used by the 'arch' command.</description>
          <remarks>
            <remark>See config/prefabs.cfg for an example on usage.</remark>
          </remarks>
          <arguments>
            <argument token="S" description="span value" valueNotes="integer"/>
            <argument token="V" description="vertex value" valueNotes="integer"/>
            <argument token="D" description="delta value" valueNotes="integer"/>
          </arguments>
        </command>

        <command name="perlin">
          <description>Generates a perlin noise landscape in the current selection.</description>
          <remarks>
            <remark>
            Keep the seed the same to create multiple perlin areas which fit with each other,
            or use different numbers if to create alternative random generations.
            </remark>
          </remarks>
          <arguments>
            <argument token="S" description="the scale, frequency of the features" valueNotes="default is 10"/>
            <argument token="E" description="the random seed" valueNotes="integer"/>
            <argument token="C" description="cube size, how many cubes to generate a surface for at once (unused)"/>
          </arguments>
        </command>

        <command name="select">
          <description>Resets all current selections and selects the given area, as if dragged with the mouse.</description>
          <remarks>
            <remark>
            This command is similar to addselection although "select" resets all selections.
            </remark>
          </remarks>
          <references>
            <identifierReference name="addselection" identifier="addselection"/>
            <identifierReference name="resetselections" identifier="resetselections"/>
            <identifierReference name="selsx" identifier="selsx"/>
            <identifierReference name="selsy" identifier="selsy"/>
            <identifierReference name="selsxs" identifier="selsxs"/>
            <identifierReference name="selsys" identifier="selsys"/>
          </references>
          <arguments>
            <argument token="X" description="the X coordinate"/>
            <argument token="Y" description="the Y coordinate"/>
            <argument token="XS" description="the length along the X axis"/>
            <argument token="XY" description="the length along the Y axis"/>
          </arguments>
        </command>

        <command name="addselection">
          <description>Select the given area, as if dragged with the mouse holding CTRL.</description>
          <remarks>
            <remark>
              This command is useful for making complex geometry-generating scripts.
              It adds a selection to the current list of selections.

              The dimensions of the current selections can be accessed by the commands selsx, selsy, selsxs and selsys.
              These commands return the list of coordinates corresponding to each selection.
            </remark>
            <remark>
              Coordinates are as follows: after a "newmap 6" the top-left corner (the one where the red dot points) are (8,8),
              the opposite corner is (56,56) (or (120,120) on a "newmap 7" etc.).
            </remark>
          </remarks>
          <references>
            <identifierReference name="select" identifier="select"/>
            <identifierReference name="resetselections" identifier="resetselections"/>
            <identifierReference name="selsx" identifier="selsx"/>
            <identifierReference name="selsy" identifier="selsy"/>
            <identifierReference name="selsxs" identifier="selsxs"/>
            <identifierReference name="selsys" identifier="selsys"/>
          </references>
          <arguments>
            <argument token="X" description="the X coordinate"/>
            <argument token="Y" description="the Y coordinate"/>
            <argument token="XS" description="the length along the X axis"/>
            <argument token="XY" description="the length along the Y axis"/>
          </arguments>
        </command>

        <command name="resetselections">
          <description>Resets all current selections.</description>
        </command>
        
        <command name="expandselection">
          <description>Increases the size of the current selection by N cubes on all sides.</description>
          <arguments>
            <argument token="N" description="number of cubes" valueNotes="integer"/>
          </arguments>
          <remarks>
            <remark>Instead of manually executing this command, you can bind "domodifier 11" to a key. While holding this key you can expand/shrink the current selection with the mouse wheel.</remark>
          </remarks>
          <references>
            <identifierReference identifier="shrinkselection"/>
          </references>
        </command>
        
        <command name="shrinkselection">
          <description>Decreases the size of the current selection by N cubes on all sides.</description>
          <arguments>
            <argument token="N" description="number of cubes" valueNotes="integer"/>
          </arguments>
          <remarks>
            <remark>Instead of manually executing this command, you can bind "domodifier 11" to a key. While holding this key you can expand/shrink the current selection with the mouse wheel.</remark>
          </remarks>
          <references>
            <identifierReference identifier="expandselection"/>
          </references>
        </command>

        <command name="selsx">
          <description>Return a list containg the x-coordinate of each selection</description>
        </command>

        <command name="selsxs">
          <description>Return a list containg the x-span of each selection</description>
        </command>

        <command name="selsy">
          <description>Return a list containg the y-coordinate of each selection</description>
        </command>

        <command name="selsys">
          <description>Return a list containg the y-span of each selection</description>
        </command>

        <command name="registersound">
          <description>Registers a sound.</description>
          <remarks>
            <remark>
            This command returns the sound number, which is assigned from 0 onwards,
            and which can be used with "sound" command. If the sound was already registered,
            its existing index is returned. registersound does not actually load the sound, this is done on first play.
            </remark>
            <remark>See for example config/sounds.cfg.</remark>
          </remarks>
          <references>
            <identifierReference name="sound" identifier="sound"/>
          </references>
          <arguments>
            <argument token="N" description="sound name" valueNotes="string, see config/sounds.cfg"/>
          </arguments>
        </command>

        <command name="scalelights">
          <description>Scales all lights in the map.</description>
          <remarks>
            <remark>This command is useful if a map is too dark or bright but you want to keep the light entities where they are.</remark>
          </remarks>
          <arguments>
            <argument token="S" description="size change (percentage)"/>
            <argument token="I" description="intensity change (percentage)"/>
          </arguments>
        </command>

        <variable name="Map editing">
          <description>A variable indicating if the game is in editmode.</description>
          <value token="B" description="editmode" minValue="0" maxValue="1" readOnly="true" valueNotes="1 (true), 0 (false)" defaultValue="0"/>
        </variable>

        <variable name="flrceil">
          <description>A variable indicating if the player looks at the floor or at the ceiling.</description>
          <value token="B" description="flrceil" minValue="0" maxValue="2" readOnly="true" valueNotes="0 (floor), 2 (ceiling)" defaultValue="0"/>
        </variable>

        <variable name="lightscale">
          <description>Used to finetune the "overbright lighting" rendering feature when enabled.</description>
          <remarks>
            <remark>After changing this value, a "recalc" is needed to see the differences.</remark>
          </remarks>
          <references>
            <identifierReference identifier="recalc"/>
          </references>
          <value token="N" description="the brightness of the scene" minValue="1" maxValue="100" defaultValue="4"/>
        </variable>

        <variable name="old_editbinds">
          <description>Enables or disables the old editing binds.</description>
          <examples>
            <example>
              <code><![CDATA[old_editbinds = 0]]></code>
              <explanation>disables the old editing binds</explanation>
            </example>
            <example>
              <code><![CDATA[old_editbinds = 1]]></code>
              <explanation>enables the old editing binds</explanation>
            </example>
          </examples>
          <remarks>
            <remark>If disabled, an updated editing binds system is used, see the comments in "/config/resetbinds.cfg" for more info.</remark>
          </remarks>
        </variable>

        <scriptalias name="onNewMap">
          <description>If this alias exists, it will be automatically executed when you start a new map.</description>
        </scriptalias>

        <variable name="flyspeed">
          <description>Determines by how much to multiply the fly speeds by.</description>
          <value token="N" description="the multiplier" minValue="1.0" maxValue="5.0" defaultValue="2.0"/>
        </variable>

        <variable name="oldselstyle">
          <description>Enables or disables using triangles to render the editing grid/current selection instead of squares.</description>
          <value token="N" description="0 off, 1 on" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

      </identifiers>
    </section>
    <!-- Editing Section Ends -->
    <!-- Menus Section Starts -->
    <section name="Menus" sortindex="11">
      <description>This section describes identifiers related to the menu gui.</description>
      <identifiers sort="true">

        <command name="menuinit">
          <description>Specifies commands to be executed when a menu opens.</description>
          <references>
            <identifierReference identifier="newmenu"/>
          </references>
          <remarks>
            <remark>This command should be placed after newmenu.</remark>
          </remarks>
          <arguments>
            <argument token="C" description="The code to execute on init"/>
          </arguments>
        </command>

        <command name="newmenu">
          <description>Creates a new menu.</description>
          <references>
            <identifierReference identifier="menuitem"/>
          </references>
          <remarks>
            <remark>
            All menu commands placed after newmenu (i.e. menuitem, menuitemcheckbox, etc) are added
            into the menu until another "newmenu" command is specified.
            </remark>
          </remarks>
          <arguments>
            <argument token="N" description="The name of the menu"/>
          </arguments>
        </command>

        <command name="menuitem">
          <description>Creates a new menuitem.</description>
          <remarks>
            <remark>
            Upon activating the menuitem, the associated command will be executed.
            (See config/menus.cfg for examples). If the command argument is omitted,
            then it will be set to the same value as the description. If -1 is specified
            instead of the command to execute, then no command is executed when activating the item.
            If the rollover option is used, the menuitem will execute that command when selecting (but not activating)
            the menuitem.
            </remark>
            <remark>(Note: To activate the menu item, select it, and either: Click, press SPACE or press ENTER/Return).</remark>
          </remarks>
          <references>
            <identifierReference identifier="newmenu"/>
          </references>
          <arguments>
            <argument token="N" description="The menuitem description."/>
            <argument token="A" description="The command to execute on selection of the menuitem." optional="true"/>
            <argument token="H" description="The command to execute upon rolling over the menuitem." optional="true"/>
          </arguments>
        </command>

        <command name="menuinitselection">
          <description>Defines the initial selection for a menu.</description>
          <arguments>
            <argument token="A" description="line number"/>
          </arguments>
        </command>

        <command name="menuitemvar">
          <description>Creates a new menuitem with variable content.</description>
          <remarks>
            <remark>
            Like 'menuitem', but the menuitem description will be the result of an evaluation, everytime the menu gets displayed.
            </remark>
          </remarks>
          <references>
            <identifierReference identifier="newmenu"/>
            <identifierReference identifier="menuitem"/>
          </references>
          <arguments>
            <argument token="N" description="The cubescript to generate the menuitem description."/>
            <argument token="A" description="The command to execute on selection of the menuitem." optional="true"/>
            <argument token="H" description="The command to execute upon rolling over the menuitem." optional="true"/>
          </arguments>
        </command>

        <command name="menuselection">
          <description>Selects a line in a menu.</description>
          <arguments>
            <argument token="A" description="menu name"/>
            <argument token="B" description="line number"/>
          </arguments>
        </command>

        <command name="menuselectionbgcolor">
          <description>Defines the background color for the menu selection bar.</description>
          <arguments>
            <argument token="R" description="red (0..100)"/>
            <argument token="G" description="green (0..100)"/>
            <argument token="B" description="blue (0..100)"/>
            <argument token="A" description="alpha (0..100)"/>
          </arguments>
        </command>

        <command name="menuitemcheckbox">
          <argument token="T" description="text"/>
          <argument token="V" description="value"/>
          <argument token="A" description="action"/>
        </command>

        <command name="menuitemimage">
          <argument token="N" description="image filename"/>
          <argument token="T" description="text"/>
          <argument token="A" description="action"/>
          <argument token="H" description="hoveraction"/>
        </command>

        <command name="menuitemkeyinput">
          <argument token="T" description="text"/>
          <argument token="B" description="bind command"/>
        </command>

        <command name="menuitemslider">
          <argument token="T" description="text"/>
          <argument token="L" description="min"/>
          <argument token="U" description="max"/>
          <argument token="V" description="value"/>
          <argument token="S" description="step"/>
          <argument token="D" description="display"/>
          <argument token="A" description="action"/>
        </command>

        <command name="menuitemtextinput">
          <argument token="T" description="text"/>
          <argument token="V" description="value"/>
          <argument token="A" description="action"/>
          <argument token="H" description="hoveraction"/>
          <argument token="M" description="maxchars"/>
        </command>

        <command name="showmenu">
          <description>Displays the specified menu.</description>
          <remarks>
            <remark>
            The menu allows the user to pick an item with the cursor keys.
            Upon pressing return, the associated action will be executed.
            Pressing ESC will cancel the menu.
            </remark>
          </remarks>
          <arguments>
            <argument token="N" description="the name of a previously defined menu"/>
          </arguments>
          <references>
            <identifierReference identifier="newmenu"/>
            <identifierReference identifier="closemenu"/>
            <identifierReference identifier="delmenu"/>
          </references>
        </command>

        <command name="closemenu">
          <description>Closes the specified menu if it is open.</description>
          <remarks>
            <remark>If it is open multiple times in the stack only the topmost instance will be closed!</remark>
          </remarks>
          <arguments>
            <argument token="N" description="the name of a previously defined menu"/>
          </arguments>
          <references>
            <identifierReference identifier="newmenu"/>
            <identifierReference identifier="delmenu"/>
            <identifierReference identifier="showmenu"/>
          </references>
        </command>

        <command name="delmenu">
          <description>Deletes the entire contents (all menu items) of the given menu.</description>
          <arguments>
            <argument token="N" description="the name of a previously defined menu"/>
          </arguments>
          <references>
            <identifierReference identifier="newmenu"/>
            <identifierReference identifier="closemenu"/>
            <identifierReference identifier="showmenu"/>
          </references>
        </command>

        <command name="menumdl">
          <description>Specifies a model to render while displaying the last added menu.</description>
          <arguments>
            <argument token="M" description="the model"/>
            <argument token="A" description="the animation to play"/>
            <argument token="R" description="the rotation speed"/>
            <argument token="S" description="the scale"/>
          </arguments>
        </command>

        <command name="chmenumdl">
          <description>Changes the menu model of a specified menu.</description>
          <references>
            <identifierReference identifier="menumdl"/>
          </references>
          <arguments>
            <argument token="N" description="the name of the menu"/>
            <argument token="M" description="the (new) model"/>
            <argument token="A" description="the animation to play"/>
            <argument token="R" description="the rotation speed"/>
            <argument token="S" description="the scale"/>
          </arguments>
        </command>

        <variable name="wrapslider">
          <description>If wrapslider is set the menuitemslider will toggle to the min/max value if at end of the range.</description>
          <value token="N" description="0 off, 1 on" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

      </identifiers>
    </section>
    <!-- Menus Section Ends -->
    <!-- Heads-Up Display Section Starts -->
    <section name="Heads-Up Display" sortindex="06">
      <description>This section describes the identifiers to configure the head-up display (HUD).</description>
      <identifiers>
        <variable name="clockdisplay">
          <description>Sets the display mode for the HUD clock.</description>
          <remarks>
            <remark>The clock shows game-time, it is either off (0) or counts backward (1) or forward (2).</remark>
          </remarks>
          <value token="D" description="display mode" minValue="0" maxValue="2" defaultValue="0"/>
        </variable>

        <command name="clearminimap">
          <description>Recreates the minimap for the current map.</description>
          <references>
            <identifierReference identifier="minimapres"/>
          </references>
        </command>

        <command name="history">
          <description>Executes the specified command in the command line history.</description>
          <remarks>
            <remark>
            For example, binding "history 1" to a key allows you to quickly repeat the last
            command typed in (useful for placing many identical entities etc.)
            </remark>
          </remarks>
          <arguments>
            <argument token="N" description="the N'th command from the history"/>
          </arguments>
        </command>

        <command name="conskip">
          <description>Allows to browse through the console history by offsetting the console output.</description>
          <defaultKeys>
            <key alias="KP_MINUS" name="- on the keypad" description="scrolls into the history (conskip 1)"/>
            <key alias="KP_PLUS" name="+ on the keypad" description="resets the history (conskip -1000)"/>
          </defaultKeys>
          <arguments>
            <argument token="N" description="the offset"/>
          </arguments>
        </command>

        <variable name="maxhistory">
          <description>Sets how many typed console commands to store.</description>
          <remarks>
            <remark>
            This value sets how many command lines to store in memory, everytime a command is entered
            it gets store so it can be recalled using the "/" key along with the arrow keys to scroll back and forth through the list.
            </remark>
          </remarks>
          <value token="N" description="Total of stored commands" minValue="0" maxValue="10000" defaultValue="1000"/>
        </variable>

        <variable name="minimapres">
          <description>Sets the resolution for the minimap.</description>
          <references>
            <identifierReference identifier="clearminimap"/>
          </references>
          <value token="N" description="the resolution" minValue="7" maxValue="10" defaultValue="9"/>
        </variable>

        <variable name="hidecompass">
          <description>Turns on/off the radar compass</description>
          <value token="V" description="enable/disable radar compass" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="hidedamageindicator">
          <description>Turns on/off the damage indicator</description>
          <value token="V" description="enable/disable damage indicator" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="hidebigmenuimages">
          <description>Hide big images in menus.</description>
          <value token="N" description="0: show, 1: hide" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="oldfashionedgunstats">
          <description>Shows ammo statistics like version 1.0</description>
          <value token="N" description="0: new, 1: old" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="righthanded">
          <description>Choose whether the players hand carrying the weapon appears as right or left handed.</description>
          <value token="N" description="0: lefty, 1: righty" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="confade">
          <description>Sets how many seconds before the console text rolls (disappears) up the screen.</description>
          <value token="V" description="time before the text rolls up" minValue="0" maxValue="60" defaultValue="20"/>
        </variable>

        <variable name="maxcon">
          <description>Sets the total number of text lines from the console to store as history.</description>
          <value token="V" description="" minValue="10" maxValue="1000" defaultValue="200"/>
        </variable>

        <variable name="consize">
          <description>Sets how many lines of text the console displays.</description>
          <value token="V" description="" minValue="0" maxValue="100" defaultValue="6"/>
          <references>
            <identifierReference identifier="altconsize"/>
            <identifierReference identifier="fullconsize"/>
          </references>
        </variable>

        <variable name="altconsize">
          <description>Sets the number of text lines on an alternate F11 history display.</description>
          <value token="V" description="" minValue="0" maxValue="100" defaultValue="0"/>
          <references>
            <identifierReference identifier="consize"/>
            <identifierReference identifier="fullconsize"/>
          </references>
        </variable>

        <variable name="fullconsize">
          <description>Sets the number of text lines on the F11 history display.</description>
          <value token="V" description="" minValue="0" maxValue="100" defaultValue="40"/>
          <references>
            <identifierReference identifier="consize"/>
            <identifierReference identifier="altconsize"/>
          </references>
        </variable>

        <variable name="aboveheadiconfadetime">
          <description>Time in milliseconds before the abovehead icon dissapears.</description>
          <value token="V" description="abovehead icon display time" minValue="1" maxValue="10000" defaultValue="2000"/>
        </variable>

        <variable name="hideconsole">
          <description>Turns on or off the display of console text.</description>
          <value token="V" description="enable/disable console text" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="hidehudequipment">
          <description>Turns on or off the display of equipement icons.</description>
          <value token="V" description="enable/disable equipement icons" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="hidehudmsgs">
          <description>Turns on or off the display of messages at the bottom of the screen.</description>
          <value token="V" description="enable/disable messages" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="hudextras">
          <description>Shows extra gameplay messages on certain events if connected to a server.</description>
          <value token="N" description="enable/disable extra gameplay messages" minValue="0" maxValue="3" defaultValue="0"/>
          <arguments>
            <argument valueNotes="0 (off)"/>
            <argument valueNotes="1 (show extra messages in the console)"/>
            <argument valueNotes="2 (show extra messages in the console and on the HUD)"/>
            <argument valueNotes="3 (SPAM extra messages in the console and on the HUD)"/>
          </arguments>
          <references>
            <identifierReference identifier="consize"/>
            <identifierReference identifier="hideconsole"/>
            <identifierReference identifier="hidehudmsgs"/>
          </references>
        </variable>

        <variable name="hidespecthud">
          <description>Turns on or off the display of spectator staus.</description>
          <value token="V" description="enable/disable spectator status" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="hidectfhud">
          <description>Turns on or off the display of flag icons.</description>
          <value token="V" description="enable/disable flag icons" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="hideteam">
          <description>Turns on or off the display of local player team icons.</description>
          <value token="V" description="enable/disable team icons" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="hideradar">
          <description>Turns on or off the display of the on-screen radar.</description>
          <value token="V" description="enable/disable radar" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="hidevote">
          <description>Turns on or off the display of vote icons.</description>
          <value token="V" description="enable/disable vote info" minValue="0" maxValue="2" defaultValue="0"/>
        </variable>

        <variable name="hudgun">
          <description>Turns on or off the display of the current selected gun.</description>
          <value token="V" description="show/hide guns 3D models" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="specthudgun">
          <description>Turns on/off the display of the hudgun while spectating a player in first-person view. Works in demo mode as well.</description>
          <value token="V" description="show/hide hudgun when spectating" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="showstats">
          <description>Turns on/off display of FPS/rendering statistics on the HUD.</description>
          <value token="N" description="0: Show no stats, 1: Only show FPS stats, 2: Show all stats" minValue="0" maxValue="2" defaultValue="1"/>
        </variable>

        <variable name="recoiltest">
          <description></description>
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="maxrecoil">
          <description>.</description>
          <value token="V" description="" minValue="0" maxValue="1000" defaultValue="1000"/>
        </variable>

        <variable name="recoilbackfade">
          <value token="V" description="" minValue="0" maxValue="1000" defaultValue="100"/>
        </variable>

        <variable name="recoilbase">
          <value token="V" description="" minValue="0" maxValue="1000" defaultValue="40"/>
        </variable>

        <variable name="recoilincrease">
          <value token="V" description="" minValue="1" maxValue="10" defaultValue="2"/>
        </variable>

        <variable name="swaymovediv">
          <value token="V" description="" minValue="1" maxValue="1000" defaultValue="200"/>
        </variable>

        <variable name="swayspeeddiv">
          <value token="V" description="" minValue="1" maxValue="1000" defaultValue="105"/>
        </variable>

        <variable name="swayupmovediv">
          <value token="V" description="" minValue="1" maxValue="1000" defaultValue="200"/>
        </variable>

        <variable name="swayupspeeddiv">
          <value token="V" description="" minValue="1" maxValue="1000" defaultValue="105"/>
        </variable>

        <variable name="crosshairteamsign">
          <description>Turns on/off display of team warning crosshair.</description>
          <value token="V" description="enable/disable warning crosshair" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="damageindicatoralpha">
          <description>Set the level of transparency of the damage indicator, 0 = is fully transparent, 100 = totaly solid.</description>
          <value token="V" description="damage indicator alpha value" minValue="1" maxValue="100" defaultValue="50"/>
        </variable>

        <variable name="damageindicatordist">
          <description>Sets the separation of the arrows in the damage indicator.</description>
          <value token="V" description="damage indicator separation size" minValue="0" maxValue="10000" defaultValue="500"/>
        </variable>

        <variable name="damageindicatorsize">
          <description>Sets the size of the damage indicator.</description>
          <value token="V" description="damage indicator icon size" minValue="0" maxValue="10000" defaultValue="200"/>
        </variable>

        <variable name="damageindicatortime">
          <description>Sets how long the damage indicator stays on screen.</description>
          <value token="V" description="damage indicator display time" minValue="1" maxValue="10000" defaultValue="1000"/>
        </variable>

        <variable name="crosshairsize">
          <description>Sets the size of your crosshair.</description>
          <remarks>
            <remark>
            The crosshair is turned off entirely if the size is set to 0.
            </remark>
          </remarks>
          <value token="N" description="the crosshair size" minValue="0" maxValue="50" defaultValue="15"/>
        </variable>

        <variable name="crosshairfx">
          <description>Turns on or off crosshair effects.</description>
          <remarks>
            <remark>
            When on, the crosshair will go grey when the weapon is reloading, orange when health is 50 or red when is 25.
            </remark>
          </remarks>
          <value token="B" description="Turns the effects on (1) or off (0)" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="nosway">
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="radarentsize">
          <description>Sets the icon size of the players shown in the radar and the minimap.</description>
          <value token="V" description="size of icons inside radar" minValue="4" maxValue="64" defaultValue="12"/>
        </variable>

        <variable name="cncolumncolor">
          <description>colour of CN column in scoreboard</description>
          <value token="N" description="color" minValue="0" maxValue="9" defaultValue="5"/>
          <arguments>
            <argument valueNotes="0 (green)"/>
            <argument valueNotes="1 (blue)"/>
            <argument valueNotes="2 (yellow)"/>
            <argument valueNotes="3 (red)"/>
            <argument valueNotes="4 (gray)"/>
            <argument valueNotes="5 (white, default)"/>
            <argument valueNotes="6 (dark brown)"/>
            <argument valueNotes="7 (dark red)"/>
            <argument valueNotes="8 (purple)"/>
            <argument valueNotes="9 (orange)"/>
          </arguments>
        </variable>

        <variable name="orderscorecolumns">
          <description>Show the client number column on the scoreboard first?</description>
          <value token="N" description="cn column order" minValue="0" maxValue="1" defaultValue="0" valueNotes="0 (false), 1 (true)"/>
        </variable>

        <variable name="radarheight">
          <description>change at what height you are floating in the radar-view</description>
          <value token="H" description="height" minValue="5" maxValue="500" defaultValue="150"/>
        </variable>

        <variable name="showtargetname">
          <description>enables or disables showing the player name on the HUD when in your crosshair.</description>
          <value token="N" description="0 off, 1 on" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="showspeed">
          <description>Enables or disables showing the player's horizontal speed.</description>
          <value token="N" description="0 off, 1 on" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <command name="disablehud">
          <description>Stores your current HUD configuration in a buffer and disables it entirely.</description>
          <references>
            <identifierReference identifier="cleanshot"/>
            <identifierReference identifier="enablehud"/>
          </references>
        </command>

        <command name="enablehud">
          <description>Restores your HUD configuration after using disablehud.</description>
          <references>
            <identifierReference identifier="cleanshot"/>
            <identifierReference identifier="disablehud"/>
          </references>
        </command>

        <variable name="showmodedescriptions">
          <description>enables or disables the showing of game mode descriptions on the console after map starts.</description>
          <value token="B" description="0 off, 1 on" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="sc_flags">
          <description>Sets the order priority for the column flags on the scoreboard.</description>
          <value token="V" description="low priority: left, high priority: right" minValue="0" maxValue="100" defaultValue="0" />
        </variable>

        <variable name="sc_frags">
          <description>Sets the order priority for the column frags on the scoreboard.</description>
          <value token="V" description="low priority: left, high priority: right" minValue="0" maxValue="100" defaultValue="1" />
        </variable>

        <variable name="sc_deaths">
          <description>Sets the order priority for the column deaths or disables it on the scoreboard.</description>
          <value token="V" description="-1: disable, low priority: left, high priority: right" minValue="-1" maxValue="100" defaultValue="2" />
        </variable>

        <variable name="sc_ratio">
          <description>Sets the order priority for the column ratio or disables it on the scoreboard.</description>
          <value token="V" description="-1: disable, low priority: left, high priority: right" minValue="-1" maxValue="100" defaultValue="-1" />
        </variable>

        <variable name="sc_score">
          <description>Sets the order priority for the column score or disables it on the scoreboard.</description>
          <value token="V" description="-1: disable, low priority: left, high priority: right" minValue="-1" maxValue="100" defaultValue="4" />
        </variable>

        <variable name="sc_lag">
          <description>Sets the order priority for the column pj/ping or disables it on the scoreboard.</description>
          <value token="V" description="-1: disable, low priority: left, high priority: right" minValue="-1" maxValue="100" defaultValue="5" />
        </variable>

        <variable name="sc_clientnum">
          <description>Sets the order priority for the column cn on the scoreboard.</description>
          <value token="V" description="low priority: left, high priority: right" minValue="0" maxValue="100" defaultValue="6" />
        </variable>

        <variable name="sc_name">
          <description>Sets the order priority for the column name on the scoreboard.</description>
          <value token="V" description="low priority: left, high priority: right" minValue="0" maxValue="100" defaultValue="7" />
        </variable>

      </identifiers>
    </section>
    <!-- Heads-Up Display Section ends -->
    <!-- Visuals Section Starts -->
    <section name="Visuals" sortindex="05">
      <description>This section describes identifiers to configure the visuals.</description>
      <identifiers>
        <command name="resetgl">
          <description>Resets the OpenGL rendering settings</description>
        </command>

        <command name="screenres">
          <description>Changes the screen resolution</description>
          <arguments>
            <argument token="W" description="width"/>
            <argument token="H" description="height"/>
          </arguments>
        </command>

        <command name="glext">
          <description>checks for the searchstring in all loaded extensions</description>
          <arguments>
            <argument token="E" description="extension"/>
          </arguments>
          <examples>
            <example>
              <code><![CDATA[if (glext shadow_funcs) [echo you have shadow functionality] [echo no shadows for you]]]></code>
            </example>
          </examples>
        </command>

        <command name="fpsrange">
          <description>(descripton unavailable)</description>
          <arguments>
            <argument token="A" description="min" defaultValue="30"/>
            <argument token="B" description="max" defaultValue="40"/>
          </arguments>
        </command>

        <variable name="skyclip">
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="shadowcasters">
          <value token="V" description="" minValue="1" maxValue="0" defaultValue="0"/>
        </variable>

        <variable name="shadowclip">
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="shadowtile">
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="ati_mda_bug">
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="dbgpos">
          <description>Displays local player's current x,y,z position in map, showstats 1 must be enabled.</description>
          <value token="V" description="display current position" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="dbgmbatch">
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="dbgstenc">
          <value token="V" description="" minValue="0" maxValue="2" defaultValue="0"/>
        </variable>

        <variable name="dbgtiles">
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="dbgvlight">
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="stencilbits">
          <value token="V" description="" minValue="0" maxValue="32" defaultValue="0"/>
        </variable>

        <variable name="stencilshadow">
          <description>Sets the transparency/opacity level of stencil shadows.</description>
          <value token="V" description="Alpha level" minValue="0" maxValue="100" defaultValue="40"/>
        </variable>

        <variable name="depthoffset">
          <value token="V" description="" defaultValue="0.005f"/>
        </variable>

        <variable name="polygonoffsetfactor">
          <value token="V" description="" defaultValue="-3.0f"/>
        </variable>

        <variable name="polygonoffsetunits">
          <value token="V" description="" defaultValue="-3.0f"/>
        </variable>

        <variable name="dynshadowdecay">
          <value token="V" description="" minValue="0" maxValue="3000" defaultValue="1000"/>
        </variable>

        <variable name="dynshadowquad">
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="fullbrightlevel">
          <description>Sets the level of brightness to use when using the command "/fullbright 1".</description>
          <value token="V" description="Light intensity level" minValue="0" maxValue="255" defaultValue="176"/>
        </variable>

        <command name="fovcompat">
          <description>Sets the field of view (fov) based on the rules of AC v0.93</description>
          <remarks>
            <remark>This command is supplied for backward compatibility.</remark>
          </remarks>
          <arguments>
            <argument token="A" description="FOV degree" valueNotes=""/>
          </arguments>
        </command>

        <command name="font">
          <description>
            Loads a font texture to use as text within AssaultCube.
          </description>
          <arguments>
            <argument token="NAME" description="The font name."/>
            <argument token="PATH" description="The path to the font texture."/>
            <argument token="A" description="The default width."/>
            <argument token="B" description="The default height."/>
            <argument token="C" description="Offset (co-ordinate X)."/>
            <argument token="D" description="Offset (co-ordinate Y)."/>
            <argument token="E" description="Offset (width)."/>
            <argument token="F" description="Offset (height)."/>
          </arguments>
        </command>

        <command name="fontchar">
          <description>
            Specify a region of an image to be used as a font character
          </description>
          <arguments>
            <argument token="A" description="X co-ordinates (from top-left corner)."/>
            <argument token="B" description="Y co-ordinates (from top-left corner)."/>
            <argument token="C" description="Width."/>
            <argument token="D" description="Height."/>
          </arguments>
        </command>

        <command name="setfont">
          <description>Changes the current font.</description>
          <arguments>
            <argument token="N" description="Font name" valueNotes="name of the font"/>
          </arguments>
        </command>

        <variable name="scorefont">
          <description>Whether a special monospace font should be used to render the text on the scoreboard.</description>
          <value token="M" description="normal (0) or monospace (1)" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="fov">
          <description>Sets the field of view (fov).</description>
          <value token="N" description="the FOV value" minValue="75" maxValue="120" defaultValue="90"/>
        </variable>

        <variable name="aboveheadiconsize">
          <description>Sets the size for the icon shown above a player using comunications voices.</description>
          <value token="V" description="Icon size" minValue="0" maxValue="1000" defaultValue="50"/>
        </variable>

        <variable name="bloodttl">
          <description>Sets the amount of time in milliseconds that blood is displayed on the ground.</description>
          <value token="V" description="Blood display time" minValue="0" maxValue="30000" defaultValue="10000"/>
        </variable>

        <variable name="blood">
          <description>Turn on and off the display of blood.</description>
          <value token="V" description="Enable/Disable blood" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="gib">
          <description>Enables or disables the gib animation entirely.</description>
          <value token="B" description="off OR on" minValue="0" maxValue="1" defaultValue="1" valueNotes="0 (false), 1 (true)"/>
          <references>
            <identifierReference identifier="gibnum"/>
            <identifierReference identifier="gibspeed"/>
            <identifierReference identifier="gibsgore"/>
            <identifierReference identifier="gibttl"/>
          </references>
        </variable>

        <variable name="gibnum">
          <description>Sets the number of gibs to display when performing a "messy" kill (grenade, knife, sniper headshot).</description>
          <remarks>
            <remark>Larger values are more spectacular, but can slow down less powerful machines. Reducing gibttl may help in this case.</remark>
          </remarks>
          <references>
            <identifierReference identifier="gibttl"/>
            <identifierReference identifier="gibspeed"/>
          </references>
          <value token="N" description="number of gibs" minValue="0" maxValue="1000" defaultValue="6"/>
        </variable>

        <variable name="gibttl">
          <description>Sets the time for gibs to live (in milliseconds), after which they will disappear.</description>
          <references>
            <identifierReference identifier="gibnum"/>
            <identifierReference identifier="gibspeed"/>
          </references>
          <value token="N" description="time to live" minValue="0" maxValue="15000" defaultValue="5000"/>
        </variable>

        <variable name="gibspeed">
          <description>Sets the velocity at which gibs will fly from a victim.</description>
          <references>
            <identifierReference identifier="gibnum"/>
            <identifierReference identifier="gibttl"/>
          </references>
          <value token="N" description="velocity" minValue="1" maxValue="100" defaultValue="30"/>
        </variable>

        <variable name="heartbeat">
          <description>Defines the health level at or below which a heartbeat sound will be played. A value of 0 (which is the default) disables this feature.</description>
          <value token="H" description="health value" minValue="0" maxValue="99" defaultValue="0"/>
        </variable>

        <variable name="teamdisplaymode">
          <description>Sets the team display mode.</description>
          <remarks>
            <remark>
            In mode 0 team display is disabled
            In mode 1 players will be rendered with a colored vest to make the teams distinguishable.
            In mode 2 almost the whole suit of the players will be colored. These display modes are only
            applied in team gameodes.
            </remark>
          </remarks>
          <value token="N" description="the team display mode" minValue="0" maxValue="2" defaultValue="1" valueNotes="0 (none), 1 (color vests), 2 (color skins)"/>
        </variable>

        <variable name="aadynshadow">
          <description>Sets the size/resolution of the dynamic shadow data.</description>
          <value description="the size" minValue="0" maxValue="3" defaultValue="2"/>
        </variable>

        <variable name="dynshadowsize">
          <description>Sets the display size of the dynamic shadows.</description>
          <value description="the size" minValue="4" maxValue="8" defaultValue="5"/>
        </variable>

        <variable name="saveshadows">
          <description>Sets if dynamic shadows should be saved to disk.</description>
          <value description="auto save" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="dynshadow">
          <description>Sets the alpha value (transparency) for dynamic shadows.</description>
          <value description="the alpha value" minValue="0" maxValue="100" defaultValue="40"/>
        </variable>

        <variable name="bilinear">
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="scorchttl">
          <value token="V" description="" minValue="0" maxValue="30000" defaultValue="10000"/>
        </variable>

        <variable name="scorch">
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="mtexplosion">
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="mtwater">
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="reflectclip">
          <value token="V" description="" minValue="0" maxValue="100" defaultValue="3"/>
        </variable>

        <variable name="reflectsize">
          <value token="V" description="" minValue="6" maxValue="10" defaultValue="8"/>
        </variable>

        <variable name="reflectscissor">
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="dynlight">
          <description>Determines whether dynamic shadows and lights are rendered, provided just incase they slow your fps down too much.</description>
          <remarks>
            <remark>
            With radius you can specify the radius of a dynamic light,
            smaller to maybe gain some speed (0 is off entirely),
            or bigger to see the effect of dynamic shadows more dramatically
            (try shooting it past some pillars that have a dark area on the other side... or use the "gamespeed" variable).
            </remark>
          </remarks>
          <value token="R" description="the radius of a dynamic light" minValue="0" maxValue="32" defaultValue="16"/>
        </variable>

        <variable name="watersubdiv">
          <description>Determines the subdivision of the water surface in maps.</description>
          <remarks>
            <remark>
            Must be a power of 2: 4 is the default, 8 is recommended for people on slow machines,
            2 is nice for fast machines, and 1 is quite OTT. See "waterlevel" (edit reference)
            on how to add water to your own levels.
            </remark>
          </remarks>
          <value token="N" description="the subdivisioin value" minValue="1" maxValue="64" defaultValue="4"/>
        </variable>

        <variable name="waterreflect">
          <description>Turns on/off the reflections in the water surface.</description>
          <value token="V" description="enable/disable water reflections" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="waterrefract">
          <description>Turns on/off water refractions.</description>
          <value token="V" description="enable/disable water refractions" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="shotlinettl">
          <value token="V" description="" minValue="0" maxValue="10000" defaultValue="75"/>
        </variable>

        <variable name="shotline">
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="fullscreen">
          <description>Enables or disables fullscreen.</description>
          <remarks>
            <remark>Not supported on Windows and Mac.</remark>
          </remarks>
          <value description="fullscreen" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="fsaa">
          <description>Sets the level of fullscreen antialiasing (FSAA).</description>
          <value description="fsaa" minValue="0" maxValue="16" defaultValue="0"/>
        </variable>

        <variable name="scr_w">
          <description>Sets the screen width.</description>
          <value description="the screen width" minValue="0" maxValue="1024" defaultValue="10000"/>
        </variable>

        <variable name="scr_h">
          <description>Sets the screen height.</description>
          <value description="the screen height" minValue="0" maxValue="768" defaultValue="10000"/>
        </variable>

        <variable name="colorbits">
          <description>Sets the bits per pixel value.</description>
          <value description="bits per pixel" minValue="0" maxValue="32" defaultValue="0"/>
        </variable>

        <variable name="depthbits">
          <description>Sets the bits for the depth buffer.</description>
          <value description="depth pixels" minValue="0" maxValue="32" defaultValue="0"/>
        </variable>

        <variable name="vsync">
          <description>Enables or disables vsync.</description>
          <value description="vsync" minValue="-1" maxValue="1" defaultValue="-1"/>
          <remarks>
            <remark>-1 uses the default settings obtained from the system. 0 disables, 1 enables vsync.</remark>
          </remarks>
        </variable>

        <variable name="gamma">
          <description>Sets the hardware gamma value.</description>
          <remarks>
            <remark>May not work if your card/driver doesn't support it.</remark>
          </remarks>
          <value token="N" description="the gamma value" minValue="30" maxValue="300" defaultValue="100"/>
          <references>
            <identifierReference identifier="changegamma"/>
          </references>
        </variable>
        
        <command name="changegamma">
          <description>Smoothly changes your gamma to the specified value.</description>
          <arguments>
            <argument token="G" description="the gamma to change to"/>
            <argument token="M" description="milliseconds between gamma changes"/>
          </arguments>
          <examples>
            <example>
              <code><![CDATA[changegamma 300 30]]></code>
              <explanation>Every 30 milliseconds your gamma is changed by 1 until it reaches its goal of gamma 300.</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="gamma"/>
            <identifierReference identifier="changespeed"/>
          </references>
        </command>

        <variable name="dyngamma">
          <description>Enables or disables the per official map dynamic gamma system.</description>
          <examples>
            <example>
              <code><![CDATA[dyngamma = 0]]></code>
              <explanation>Output: disables the system</explanation>
            </example>
            <example>
              <code><![CDATA[dyngamma = 1]]></code>
              <explanation>Output: enables the system</explanation>
            </example>
          </examples>
          <references>
            <identifierReference identifier="gamma"/>
            <identifierReference identifier="setgamma"/>
          </references>
        </variable>

        <command name="setgamma">
          <description>Sets the current map's default dynamic gamma.</description>
          <examples>
            <example>
              <code><![CDATA[checkinit afterinit [ofc_gamma_list = [175 225 150 120 ...]]]]></code>
              <explanation>
                Sets your custom gamma values for the per official map dynamic gamma system. If you are going to use this method,
                you MUST include values for every existing official map. The list must be alphabetical and be the exact length of
                the number of currrent official maps. Hint: use "echo $defaultmaps" and "echo (listlen $defaultmaps)".
              </explanation>
            </example>
          </examples>
          <arguments>
            <argument token="G" description="the gamma value" minValue="30" maxValue="300" defaultValue="100"/>
          </arguments>
          <remarks>
            <remark>The setting will take affect automatically if dyngamma is enabled, upon future loads of that map. This command only works on official maps!</remark>
            <remark>Rather than manually loading each official map and setting it's default gamma with this command, the entire list can be initialized via your autoexec.cfg like so:</remark>
          </remarks>
          <references>
            <identifierReference identifier="dyngamma"/>
            <identifierReference identifier="gamma"/>
          </references>
        </command>

        <variable name="lighterror">
          <description>Allows to finetune the amount of "error" the mipmapper/stripifier allow themselves for changing lightlevels.</description>
          <remarks>
            <remark>If this variable is changed this during play, a "recalc" is needed to see the effect.</remark>
          </remarks>
          <references>
            <identifierReference identifier="recalc"/>
          </references>
          <value token="E" description="the error value, 1 being the best quality" minValue="1" maxValue="100" defaultValue="8" readOnly="false"/>
        </variable>

        <variable name="spectfov">
          <description>Specifies the Field Of View when in spectating/ghost mode.</description>
          <value token="V" description="Spectate FOV size" minValue="5" maxValue="120" defaultValue="110"/>
        </variable>

        <variable name="hwtexsize">
          <description>The maximum texture size (in pixels) supported by the graphics hardware.</description>
          <value token="V" description="max. hardware texture size" minValue="1" maxValue="0" defaultValue="0"/>
        </variable>

        <variable name="maxtexsize">
          <description>The maximum texture (if less than hwtexsize) that will actually be used by the engine, larger textures will be scaled down. 0 removes this limit.</description>
          <value token="V" description="max. texture size" minValue="0" maxValue="4096" defaultValue="0"/>
          <references>
            <identifierReference identifier="hwtexsize"/>
          </references>
        </variable>

        <variable name="trilinear">
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="texreduce">
          <description>Reduces the size of all texture by the selected factor:</description>
          <description>-1: 2x2 : 0 : 1: x0.5 : 2: x0.25 : 3: x0.125</description>
          <description>Note: -1 is a special mode which reduces all textures to flat coloured surfaces.</description>
          <value token="S" description="scale selection" minValue="-1" maxValue="3" defaultValue="0"/>
        </variable>

        <variable name="hirestextures">
          <description>Controls whether textures with a scale higher than 1.0 will be scaled down while loading to increase performance (0) or stay at higher resolution (1).</description>
          <value token="S" description="scale down?" minValue="0" maxValue="1" defaultValue="1"/>
          <references>
            <identifierReference name="texture" identifier="texture"/>
          </references>
        </variable>

        <variable name="bulletholettl">
          <description>Specifies how long (in milliseconds) to display bullet holes.</description>
          <value token="V" description="Bullethole display time" minValue="0" maxValue="30000" defaultValue="10000"/>
        </variable>

        <variable name="bullethole">
          <description>Turns on/off the display of bullet holes</description>
          <value token="V" description="Enable/Disable bullet holes" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="particlesize">
          <description>Scales all particles.</description>
          <value token="P" description="the scale percentage" minValue="20" maxValue="500" defaultValue="100"/>
        </variable>

        <variable name="animationinterpolationtime">
          <description>Sets the time available for interpolation between model animations.</description>
          <value token="N" description="the amount of milliseconds for the interpolation" minValue="0" maxValue="1000" defaultValue="100"/>
        </variable>

        <variable name="mergestrips">
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="gibsgore">
          <value token="N" description="" minValue="0" maxValue="4" defaultValue="1" values=""/>
          <description>Adjusts gib/gibnum/gibspeed/gibttl variables collectively.</description>
          <arguments>
            <argument valueNotes="0 - Off"/>
            <argument valueNotes="1 - Default/Normal values"/>
            <argument valueNotes="2 - Good"/>
            <argument valueNotes="3 - Messy"/>
            <argument valueNotes="4 - Unrealistic"/>
          </arguments>
        </variable>

        <variable name="damagescreen">
          <description>show the blood-spat overlay when receiving damage?</description>
          <value token="N" description="damagescreen" minValue="0" maxValue="1" defaultValue="1" valueNotes="0 (false), 1 (true)"/>
        </variable>

        <variable name="damagescreenalpha">
          <description>if overlay of blood-spat, at what blending (transparency) level?</description>
          <value token="N" description="damagescreen transparency" minValue="1" maxValue="100" defaultValue="45"/>
        </variable>

        <variable name="damagescreenfactor">
          <description>if overlay of blood-spat, use which factor?</description>
          <value token="N" description="damagescreen factor" minValue="1" maxValue="100" defaultValue="7"/>
        </variable>

        <variable name="damagescreenfade">
          <description>if overlay of blood-spat, at what speed does it fade?</description>
          <value token="N" description="damagescreen fade" minValue="0" maxValue="1000" defaultValue="125"/>
        </variable>

        <variable name="popdeadplayers">
          <description>make dead players instantly pop out of existence, instead of falling over and sinking into the ground.</description>
          <value token="B" description="BOOL" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <command name="fragmessage">
          <description>set the frag message corresponding to a weapon (appearing on the hud or in server logs)</description>
          <arguments>
            <argument token="G" description="the integer of the gun" valueNotes=" 0 = knife, etc."/>
            <argument token="M" description="the message you want to appear" valueNotes="ex : sniped"/>
          </arguments>
          <examples>
            <example>
              <code>fragmessage 5 sniped // set "sniped" message for frags with sniper. </code>
              <explanation>
             It will display "you sniped unarmed" on the hud when you frag unarmed with sniper.
             In server logs you will get "[127.0.0.1] killer sniped unarmed".</explanation>
            </example>
          </examples>
          <remarks>
            <remark>
             This command can be read by both client and server, but the server can't read the cfg if it contains anything else than fragmessage or gibmessage calls.
            </remark>
          </remarks>
        </command>

        <command name="gibmessage">
          <description>set the gib message corresponding to a weapon (appearing on the hud or in server logs)</description>
          <remarks>
            <remark>
              This command is identical to fragmessage (above)
            </remark>
          </remarks>
        </command>

        <variable name="maploaditemlength">
          <description>change at what position to truncate the map title string</description>
          <value token="N" description="chars" minValue="0" maxValue="255" defaultValue="46"/>
        </variable>

      </identifiers>
    </section>
    <!-- Visuals Section Ends -->
    <!-- Sound Section Starts -->
    <section name="Sound" sortindex="07">
      <description>This section describes all identifiers related to music and sound effects.</description>
      <identifiers>
        <variable name="soundscheddistancescore">
          <value token="V" description="" minValue="0" maxValue="1000" defaultValue="5"/>
        </variable>

        <variable name="soundschedoldbonus">
          <value token="V" description="" minValue="0" maxValue="1000" defaultValue="100"/>
        </variable>

        <variable name="soundschedpriorityscore">
          <value token="V" description="" minValue="0" maxValue="1000" defaultValue="100"/>
        </variable>

        <variable name="soundschedreserve">
          <value token="V" description="" minValue="0" maxValue="100" defaultValue="2"/>
        </variable>

        <variable name="al_referencedistance">
          <description>The distance from the source emitting the sound to the listener.</description>
          <value token="V" description="" minValue="0" maxValue="1000000" defaultValue="400"/>
        </variable>

        <variable name="al_rollofffactor">
          <description>This value indicates the relative "strength" of a sound (how far away the sound can be heard.</description>
          <value token="V" description="" minValue="0" maxValue="1000000" defaultValue="100"/>
        </variable>

        <command name="sound">
          <description>Plays the specified sound.</description>
          <remarks>
            <remark>
            See config/sounds.cfg for default sounds, and use registersound to register your own.
            For example, sound 0 and  sound (registersound "aard/jump") both play the standard jump sound.
            </remark>
          </remarks>
          <arguments>
            <argument token="S" description="the sound to play" valueNotes="string, see config/sounds.cfg"/>
          </arguments>
        </command>

        <command name="mutesound">
          <description>Mute a specific game sound.</description>
          <references>
            <identifierReference identifier="soundmuted"/>
            <identifierReference identifier="unmuteallsounds"/>
          </references>
          <arguments>
            <argument token="N" description="ID of the sound to mute" valueNotes="see config/sounds.cfg, starting at ID 0"/>
            <argument token="A" description="audible?" valueNotes="(mute) 0 || 1 (unmute)"/>
          </arguments>
        </command>

        <command name="soundmuted">
          <description>Returns 1 if sound A is muted, else 0.</description>
          <examples>
            <example>
              <code><![CDATA[mutesound 5; if (soundmuted 5) [echo Sound 5 is muted!] [echo Sound 5 is not muted!]]]></code>
              <explanation>Output: Sound 5 is muted!</explanation>
            </example>
          </examples>
          <arguments>
            <argument token="A" description="sound ID" valueNotes="See /config/sounds.cfg for valid sound ID's."/>
          </arguments>
          <references>
            <identifierReference identifier="mutesound"/>
            <identifierReference identifier="unmuteallsounds"/>
          </references>
        </command>

        <command name="unmuteallsounds">
          <description>Unmutes all previously muted sounds.</description>
          <references>
            <identifierReference identifier="mutesound"/>
          </references>
        </command>

        <variable name="mapsoundrefresh">
          <description>Specifies the interval for checking mapsounds.</description>
          <remarks>
            <remark>If set to value 0, the map sounds will be checked in every frame without any interval limitation.</remark>
          </remarks>
          <references>
            <identifierReference identifier="mapsound"/>
            <identifierReference identifier="newent sound"/>
          </references>
          <value token="N" description="interval in milliseconds" minValue="0" maxValue="1000" defaultValue="50"/>
        </variable>

        <variable name="audiodebug">
          <description>Enables verbose output for debugging purposes.</description>
          <value token="B" description="enable audio debug" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="gainscale">
          <description>Each subsequent played sound's gain-value is scaled by this percentage.</description>
          <remarks>
            <remark>
            This lowers the gain of the sounds before they are mixed, this might be useful in cases when the mixer has problems with too high gain values.
            </remark>
          </remarks>
          <value token="N" description="percentage" minValue="0" maxValue="100" defaultValue="100"/>
        </variable>

        <variable name="musicvol">
          <description>Sets the music volume.</description>
          <references>
            <identifierReference name="soundvol" identifier="soundvol"/>
          </references>
          <value token="N" description="the volume" minValue="0" maxValue="255" defaultValue="128"/>
        </variable>

        <command name="music">
          <description>Play music in the background.</description>
          <arguments>
            <argument token="A" description="music file name"/>
            <argument token="B" description="playtime"/>
            <argument token="C" description="command to be executed, when music is done"/>
          </arguments>
        </command>

        <variable name="audio">
          <description>Enables or disables the audio subsystem in AC.</description>
          <value token="B" description="enable" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="soundchannels">
          <description>Sets the desired amount of allocated sound channels.</description>
          <remarks>
            <remark>AC will try to allocate that number of channels but it is not guaranteed to succeed.</remark>
          </remarks>
          <value description="number of channels" minValue="4" maxValue="1024" defaultValue="32"/>
        </variable>

        <variable name="bulletairsounddestrad">
          <value token="V" description="" minValue="0" maxValue="1000" defaultValue="8"/>
        </variable>

        <variable name="bulletairsoundrad">
          <value token="V" description="" minValue="0" maxValue="1000" defaultValue="15"/>
        </variable>

        <variable name="bulletairsoundsourcerad">
          <value token="V" description="" minValue="0" maxValue="1000" defaultValue="8"/>
        </variable>

        <variable name="bulletairsound">
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="bulletbouncesoundrad">
          <value token="V" description="" minValue="0" maxValue="1000" defaultValue="15"/>
        </variable>

        <variable name="bulletbouncesound">
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="maxsoundsatonce">
          <value token="V" description="" minValue="0" maxValue="100" defaultValue="40"/>
        </variable>

        <variable name="soundvol">
          <description>Sets the sound volume for all sounds.</description>
          <value token="N" description="the volume" minValue="0" maxValue="255" defaultValue="128"/>
        </variable>

      </identifiers>
    </section>
    <!-- Sound Section Ends -->
    <!-- Ingame Reference Section Starts -->
    <section name="Ingame Reference" sortindex="12">
      <description>This section describes all identifiers related to the ingame documentation reference.</description>
      <identifiers>
        <command name="docsection">
          <description>Adds a new section to the ingame documentation.</description>
          <references>
            <identifierReference identifier="docident"/>
          </references>
          <arguments>
            <argument token="S" description="the section name"/>
          </arguments>
        </command>

        <command name="docident">
          <description>Adds a new identifier documentation to the last added section.</description>
          <remarks>
            <remark>An identifier represents a command or variable. The new identifier</remark>
            <remark>
            The name may contain spaces to create a "multipart" identifier documentation
            that can be used to describe a complex argument as a single pseudo identifier,
            look at the examples.
            </remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[docident fov "Sets the field of view."]]></code>
            </example>
            <example>
              <code><![CDATA[docident "newent light" "Adds a new light entity."]]></code>
            </example>
          </examples>
          <references>
            <identifierReference identifier="docsection"/>
            <identifierReference identifier="docargument"/>
            <identifierReference identifier="docremark"/>
            <identifierReference identifier="docref"/>
            <identifierReference identifier="docundone"/>
            <identifierReference identifier="docinvalid"/>
            <identifierReference identifier="docfind"/>
            <identifierReference identifier="docwritebaseref"/>
          </references>
          <arguments>
            <argument token="N" description="name of the identifier"/>
            <argument token="D" description="the description"/>
          </arguments>
        </command>

        <command name="docargument">
          <description>Adds a new argument documentation to the last added identifier.</description>
          <remarks>
            <remark>An argument represents either a command argument or a variable value.</remark>
            <remark>
            The last argument of an identifier can be flagged as variable-length
            to indicate that it represents an unknown number of arguments.
            </remark>
          </remarks>
          <references>
            <identifierReference identifier="docident"/>
          </references>
          <arguments>
            <argument token="T" description="the token"/>
            <argument token="D" description="the description"/>
            <argument token="V" description="the value notes"/>
            <argument token="I" description="flags this argument as variable-length" valueNotes="1 (true), 0 (false)" optional="true"/>
          </arguments>
        </command>

        <command name="docremark">
          <description>Adds a new documentation remark to the last added identifier.</description>
          <references>
            <identifierReference identifier="docident"/>
          </references>
          <arguments>
            <argument token="S" description="the remark"/>
          </arguments>
        </command>

        <command name="docexample">
          <description>Adds an example to the last added identifier.</description>
          <arguments>
            <argument token="C" description="the example code"/>
            <argument token="E" description="the explanation" optional="true"/>
          </arguments>
        </command>

        <command name="docref">
          <description>Adds a new documentation reference to an identifier.</description>
          <remarks>
            <remark>The new reference is added to the last added identifier documentation.</remark>
          </remarks>
          <references>
            <identifierReference identifier="docident"/>
          </references>
          <arguments>
            <argument token="N" description="the display name"/>
            <argument token="I" description="the identifier to refer to" optional="true"/>
            <argument token="U" description="the URL to refer to" optional="true"/>
          </arguments>
        </command>

        <command name="docundone">
          <description>Outputs a list of yet undocumented identifiers (commands,variables, etc)</description>
          <remarks>
            <remark>
            If the one argument is omitted, only the builtin identifiers will be listed. Therefore specify the argument
            other identifiers like aliases should be included too.
            </remark>
            <remark>
            Note that the list also includes identifiers that contain the substrings "TODO" or "UNDONE" in their documentation.
            </remark>
          </remarks>
          <references>
            <identifierReference identifier="docident"/>
            <identifierReference identifier="docinvalid"/>
            <identifierReference identifier="docfind"/>
          </references>
          <arguments>
            <argument token="A" description="output all identifiers" valueNotes="1 (true), 0 (false)" optional="true"/>
          </arguments>
        </command>

        <command name="docinvalid">
          <description>Outputs a list of identifier documentations that do not match any existing identifier.</description>
          <remarks>
            <remark>Multipart identifiers are not included in this list, see 'docident'.</remark>
          </remarks>
          <references>
            <identifierReference identifier="docident"/>
            <identifierReference identifier="docinvalid"/>
            <identifierReference identifier="docfind"/>
          </references>
        </command>

        <command name="docfind">
          <description>Searches the ingame docs for identifier documentations matching the specified search string.</description>
          <remarks>
            <remark>The name, description and remarks are included in the search.</remark>
          </remarks>
          <references>
            <identifierReference identifier="docident"/>
            <identifierReference identifier="docundone"/>
            <identifierReference identifier="docinvalid"/>
          </references>
          <arguments>
            <argument token="S" description="the search string"/>
          </arguments>
        </command>

        <command name="docwritebaseref">
          <description>Writes out a base XML documentation reference containing templates for the builtin identifiers.</description>
          <remarks>
            <remark>
            The generated reference is written to "docs/autogenerated_base_reference.xml" by default.
            The three arguments can be changed later on in the generated XML document.
            </remark>
          </remarks>
          <references>
            <identifierReference identifier="docident"/>
            <identifierReference identifier="docundone"/>
            <identifierReference identifier="docinvalid"/>
            <identifierReference identifier="docfind"/>
          </references>
          <arguments>
            <argument token="R" description="the reference name" optional="true"/>
            <argument token="S" description="the XML schema location string" optional="true"/>
            <argument token="T" description="XML stylesheet to use" optional="true"/>
          </arguments>
        </command>

        <command name="dockey">
          <arguments>
            <argument token="A" description="" valueNotes="value"/>
          </arguments>
        </command>

        <variable name="docskip">
          <value token="V" description="" minValue="0" maxValue="1000" defaultValue="0"/>
        </variable>

        <variable name="docvisible">
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

      </identifiers>
    </section>
    <!-- Ingame Reference Section ends -->
    <!-- Server Commands Section Starts -->
    <section name="Server commands" sortindex="08">
      <description>
        This section lists commands used by the client that communicate to the server. Most are used for server administration.
        Also see the "mode" section and the "map" command which also communicate to the server.
    	</description>
      <identifiers sort="true">

        <command name="serverdesc">
          <description>
            If the server was run with -n1 and -n2 arguments (prefix and suffix of descriptive title)
            a serveradmin can set a user-defined server description with this command, if it wasn't this command results
            in "invalid vote". This title will only stay until the next map is loaded.
        	</description>
          <arguments>
            <argument token="D" description="description"/>
          </arguments>
          <remarks>
            <remark>
            If, for example, the server was run with -n"Fred's Server" -n1"Fred's " -n2" Server",
            then you could call "/serverdesc [pWn4g3 TOSOK]" and it would show up as "Fred's pWn4g3 TOSOK Server"
            in the serverbrowser.
            </remark>
          </remarks>
        </command>

        <command name="serverextension">
          <description>Modded servers announcement of features. See source/src/server.cpp [Line 2926ff. "case SV_EXTENSION:"]</description>
          <arguments>
            <argument token="E" description="extension"/>
            <argument token="D" description="description"/>
          </arguments>
        </command>

        <variable name="showallservers">
          <description>Whether servers that have not yet responded to a ping should be shown in the server list.</description>
          <value token="V" description="" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="searchlan">
          <value token="V" description="" minValue="0" maxValue="2" defaultValue="1"/>
        </variable>

        <variable name="serversort">
          <value token="V" description="" minValue="0" maxValue="NUMSERVSORT-1" defaultValue="0"/>
        </variable>

        <variable name="servpingrate">
          <value token="V" description="" minValue="1000" maxValue="60000" defaultValue="5000"/>
        </variable>

        <variable name="masterupdatefrequency">
          <value token="V" description="" minValue="1" maxValue="24*60*60" defaultValue="60*60"/>
        </variable>

        <variable name="maxservpings">
          <description>Sets the number of servers to be pinged at once.</description>
          <value token="V" description="" minValue="0" maxValue="1000" defaultValue="10"/>
        </variable>

        <command name="addfavcategory">
          <description>Adds a new category in the serverbrowser favourites.</description>
          <remarks>
            <remark>Add new categories to your autoexec.cfg, check favourites.cfg for examples.</remark>
          </remarks>
          <arguments>
            <argument token="A" description="reference designator (keep short and unique)"/>
          </arguments>
        </command>

        <command name="listfavcats">
          <description>List all registered serverbrowser favourites categories</description>
        </command>

        <variable name="hidefavicons">
          <description>Hide favourites icons in serverbrowser.</description>
          <value token="N" description="0: show, 1: hide" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="serverbrowserhidefavtag">
          <description>Hide favourites tag column in serverbrowser</description>
          <value token="N" description="-" minValue="0" maxValue="2" defaultValue="1"/>
        </variable>

        <variable name="serverbrowserhideip">
          <description>Hide server IP and port in serverbrowser.</description>
          <value token="N" description="-" minValue="0" maxValue="2" defaultValue="2"/>
        </variable>

        <variable name="serversortdir">
          <description>Select ascending of descending sort order in serverbrowser.</description>
        </variable>

        <variable name="serversortpreferofficial">
          <description>Sort official maps over custom maps in serverbrowser.</description>
          <value token="N" description="-" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="showminremain">
          <description>Show 'minutes remaining' in serverbrowser.</description>
          <value token="N" description="" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="shownamesinbrowser">
          <description>Show player names in serverbrowser.</description>
          <value token="N" description="-" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="showonlyfavourites">
          <description>Show only servers of one favourites category in serverbrowser.</description>
          <value token="N" description="category index" minValue="0" maxValue="100" defaultValue="0"/>
        </variable>

        <variable name="showonlygoodservers">
          <description>Show only servers with the correct protocol in serverbrowser.</description>
          <value token="N" description="-" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="showweights">
          <description>Show 'weights' in serverbrowser.</description>
          <value token="N" description="" minValue="0" maxValue="1" defaultValue="0"/>
          <remarks>
            <remark>
            'weights' are the sort criteria with the highest priority. Favourites categories can change the weights.
            Use 'showweights' to debug problems with serverbrowser sorting.
            </remark>
          </remarks>
        </variable>

        <command name="searchnickname">
          <description>Search a nickname (or -part) on all servers.</description>
          <arguments>
            <argument token="N" description="nickname to search"/>
          </arguments>
        </command>

        <command name="autoteam">
          <description>Sets automated team assignment.</description>
          <references>
            <identifierReference identifier="setadmin"/>
          </references>
          <arguments>
            <argument token="B" description="Enables or disables auto team." valueNotes="1 (On), 0 (Off)"/>
          </arguments>
        </command>

        <command name="ban">
          <description>Temporary ban of the specified player from the server.</description>
          <remarks>
            <remark>Temporary ban duration is fixed at 20 minutes.  </remark>
          </remarks>
          <references>
            <identifierReference identifier="removebans"/>
            <identifierReference identifier="setadmin"/>
          </references>
          <arguments>
            <argument token="CN" description="The player to ban" valueNotes="Client number"/>
          </arguments>
        </command>

        <command name="callvote">
          <description>Calls a vote on the server.</description>
          <remarks>
            <remark>
            This command is wrapped by aliases for better usability and is used to action votes such as ban, kick, etc.
            See config/admin.cfg for actual uses.
            </remark>
          </remarks>
          <arguments>
            <argument token="T" description="Vote type" valueNotes="value"/>
            <argument token="A" description="First argument" valueNotes=""/>
            <argument token="B" description="Second argument" valueNotes=""/>
          </arguments>
        </command>

        <command name="forceteam">
          <description>Calls a vote to force the specified player to switch to the specified team.</description>
          <references>
            <identifierReference identifier="forceme"/>
            <identifierReference identifier="curteam"/>
            <identifierReference identifier="setadmin"/>
          </references>
          <arguments>
            <argument token="C" description="client number of player" valueNotes="integer"/>
            <argument token="T" description="the team to force to" valueNotes="0-4"/>
          </arguments>
        </command>

        <command name="forceme">
          <description>Calls a vote to forceteam yourself to the specified team.</description>
          <arguments>
            <argument token="T" description="the team to force yourself to" valueNotes="0-4" optional="true"/>
          </arguments>
          <remarks>
            <remark>By default, if you are on team CLA or RVSF, this command will force you to the enemy team, no arguments necessary.</remark>
          </remarks>
          <references>
            <identifierReference identifier="forceteam"/>
            <identifierReference identifier="curteam"/>
          </references>
        </command>

        <command name="shuffleteams">
          <description>
            Shuffles the teams. The server will attempt to restore balance, but the result may
            be less that optimal, and there are certainly better ways to keep teams balanced.
        	</description>
          <references>
            <identifierReference identifier="forceteam"/>
            <identifierReference identifier="forceme"/>
          </references>
        </command>

        <command name="giveadmin">
          <description>Gives admin state to the specified player.</description>
          <remarks>
            <remark>Requires admin state. The admin will lose his admin state after successfully issuing this command.</remark>
          </remarks>
          <references>
            <identifierReference identifier="setadmin"/>
          </references>
          <arguments>
            <argument token="CN" description="The player to become admin" valueNotes="Client number"/>
          </arguments>
        </command>

        <command name="kick">
          <description>Kicks the specified player from the server.</description>
          <references>
            <identifierReference identifier="setadmin"/>
          </references>
          <arguments>
            <argument token="CN" description="The player to kick" valueNotes="Client number"/>
          </arguments>
        </command>

        <command name="mastermode">
          <description>Sets the mastermode for the server.</description>
          <remarks>
            <remark>
            If the mastermode is set to 'private', no more clients can join the server.
            Default is 'open' which allows anyone to join the server.
            </remark>
          </remarks>
          <references>
            <identifierReference identifier="setadmin"/>
          </references>
          <arguments>
            <argument token="N" description="The master mode" valueNotes="0 (Open), 1 (Private), 2 (Match)"/>
          </arguments>
        </command>

        <command name="removebans">
          <description>Removes all temporary bans from the server. Temporary bans are normally automatically removed after 20 minutes.</description>
          <references>
            <identifierReference identifier="ban"/>
            <identifierReference identifier="setadmin"/>
          </references>
        </command>

        <command name="cleardemos">
          <description>Clears all demos currently in memory on the server.</description>
        </command>

        <command name="sendmap">
          <description>Sends a map to the server.</description>
          <remarks>
            <remark>
            During coop edit, the current map gets saved to file and sent to the server.
            Other players can use 'getmap' to download it.
            </remark>
            <remark>
            When not in edit mode, the map will not be saved. The new map will be used, when
            the next game on that map starts on the server.
            </remark>
          </remarks>
          <references>
            <identifierReference identifier="getmap"/>
            <identifierReference identifier="dlmap"/>
          </references>
          <arguments>
            <argument token="M" description="map to send" optional="true"/>
          </arguments>
        </command>

        <command name="deleteservermap">
          <description>Deletes a map from the current server.</description>
          <arguments>
            <argument token="A" description="map name"/>
          </arguments>
        </command>

        <command name="setadmin">
          <description>Claims or drops admin status.</description>
          <remarks>
            <remark>
            Failed logins result in an auto kick.
            The admin is granted the right to kick, ban, remove bans, set autoteam, set shuffleteam, change server
            description (if enabled), change map, change mastermode, force team, change mode, record demos, stop demos
            and clear demo(s) - All without needing votes from other users.
            If the admin votes on any (other players) call, his vote is final.
            In the scoreboard, the admin will be shown as a red colour.
            </remark>
          </remarks>
          <references>
            <identifierReference identifier="kick"/>
            <identifierReference identifier="autoteam"/>
            <identifierReference identifier="mastermode"/>
            <identifierReference identifier="ban"/>
            <identifierReference identifier="removebans"/>
          </references>
          <arguments>
            <argument token="B" description="Status" valueNotes="1 (Claim), 0 (Drop)"/>
            <argument token="PASS" description="Password" valueNotes="case sensitive"/>
          </arguments>
        </command>

      </identifiers>
    </section>
    <!-- Server commands Section ends -->
    <!-- Game Modes Section Starts -->
    <section name="Game modes" sortindex="04">
      <identifiers sort="true">

        <command name="mode">
          <description>Sets the gameplay mode to N for the next map loaded.</description>
          <references>
            <wikiReference article="Gamemodes"/>
            <identifierReference identifier="map"/>
            <identifierReference identifier="gamemode"/>
            <identifierReference identifier="tdm"/>
            <identifierReference identifier="coop"/>
            <identifierReference identifier="dm"/>
            <!--<identifierReference identifier="survivor"/>-->
            <identifierReference identifier="ts"/>
            <identifierReference identifier="ctf"/>
            <identifierReference identifier="pf"/>
            <!--
            <identifierReference identifier="btdm"/>
            <identifierReference identifier="bdm"/>
            -->
            <identifierReference identifier="lss"/>
            <identifierReference identifier="osok"/>
            <identifierReference identifier="tosok"/>
            <identifierReference identifier="htf"/>
            <identifierReference identifier="tktf"/>
            <identifierReference identifier="ktf"/>
          </references>
          <arguments>
            <argument token="N" valueNotes="0" description="Team Deathmatch"/>
            <argument valueNotes="1" description="Co-op edit"/>
            <argument valueNotes="2" description="Deathmatch"/>
            <argument valueNotes="3" description="Survivor"/>
            <argument valueNotes="4" description="Team survivor"/>
            <argument valueNotes="5" description="Capture the Flag"/>
            <argument valueNotes="6" description="Pistol frenzy"/>
            <argument valueNotes="7" description="Bot team deathmatch"/>
            <argument valueNotes="8" description="Bot deathmatch"/>
            <argument valueNotes="9" description="Last swiss standing"/>
            <argument valueNotes="10" description="One shot, One kill"/>
            <argument valueNotes="11" description="Team One shot, One kill"/>
            <argument valueNotes="12" description="Bot One shot, One kill"/>
            <argument valueNotes="13" description="Hunt the Flag"/>
            <argument valueNotes="14" description="Team keep the flag"/>
            <argument valueNotes="15" description="Keep the flag"/>
          </arguments>
          <remarks>
            <remark>You will need to define mode before loading the map or it will stay as the last mode played.</remark>
            <remark>There are many aliases for you to use instead of remembering the numeric mapping.</remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[mode 7; map ac_complex; echo "Bot Team Deathmatch on ac_complex"]]></code>
            </example>
            <example>
              <code><![CDATA[mode 8; map ac_mines 4; echo "Bot Deathmatch on ac_mines for 4 minutes"]]></code>
            </example>
            <example>
              <code><![CDATA[mode 5; map ac_shine; echo "CTF @ ac_shine"]]></code>
            </example>
          </examples>
        </command>

        <command name="gamemodedesc">
          <arguments>
            <argument token="M" description="mode" valueNotes="integer"/>
            <argument token="D" description="description" valueNotes="string"/>
          </arguments>
        </command>

        <command name="coop">
          <description>Starts a map with the mode "Co-op edit"</description>
          <remarks>
            <remark>See the co-op edit section in page 4 of the map editing guide for more information.</remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[coop ac_newmap]]></code>
            </example>
          </examples>
          <arguments>
            <variableArgument token="M" description="The name of the map you wish to edit"/>
          </arguments>
        </command>

        <command name="ctf">
          <description>Starts a map with the mode "Capture the Flag"</description>
          <examples>
            <example>
              <code><![CDATA[ctf ac_mines]]></code>
            </example>
          </examples>
          <arguments>
            <variableArgument token="M" description="The name of the map you wish to play"/>
            <variableArgument token="T" valueNotes="1..60" description="The time limit, in minutes (default 15 minutes if T is 0 or not specified)"/>
          </arguments>
        </command>

        <command name="dm">
          <description>Starts a map with the mode "Deathmatch"</description>
          <examples>
            <example>
              <code><![CDATA[dm ac_complex]]></code>
            </example>
          </examples>
          <arguments>
            <variableArgument token="M" description="The name of the map you wish to play"/>
            <variableArgument token="T" valueNotes="1..60" description="The time limit, in minutes (default 10 minutes if T is 0 or not specified)"/>
          </arguments>
        </command>

        <command name="htf">
          <description>Starts a map with the mode "Hunt the Flag"</description>
          <examples>
            <example>
              <code><![CDATA[htf ac_mines]]></code>
            </example>
          </examples>
          <arguments>
            <variableArgument token="M" description="The name of the map you wish to play"/>
            <variableArgument token="T" valueNotes="1..60" description="The time limit, in minutes (default 15 minutes if T is 0 or not specified)"/>
          </arguments>
        </command>

        <command name="ktf">
          <description>Starts a map with the mode "Keep the Flag"</description>
          <examples>
            <example>
              <code><![CDATA[ktf ac_mines]]></code>
            </example>
          </examples>
          <arguments>
            <variableArgument token="M" description="The name of the map you wish to play"/>
            <variableArgument token="T" valueNotes="1..60" description="The time limit, in minutes (default 10 minutes if T is 0 or not specified)"/>
          </arguments>
        </command>

        <command name="lms">
          <description>Starts a map with the mode "Last Man Standing"</description>
          <examples>
            <example>
              <code><![CDATA[lms ac_complex]]></code>
            </example>
          </examples>
          <arguments>
            <variableArgument token="M" description="The name of the map you wish to play"/>
            <variableArgument token="T" valueNotes="1..60" description="The time limit, in minutes (default 10 minutes if T is 0 or not specified)"/>
          </arguments>
        </command>

        <command name="lss">
          <description>Starts a map with the mode "Last Swiss Standing"</description>
          <examples>
            <example>
              <code><![CDATA[lss ac_complex]]></code>
            </example>
          </examples>
          <arguments>
            <variableArgument token="M" description="The name of the map you wish to play"/>
            <variableArgument token="T" valueNotes="1..60" description="The time limit, in minutes (default 10 minutes if T is 0 or not specified)"/>
          </arguments>
        </command>

        <command name="osok">
          <description>Starts a map with the mode "One shot, One kill"</description>
          <examples>
            <example>
              <code><![CDATA[osok ac_complex]]></code>
            </example>
          </examples>
          <arguments>
            <variableArgument token="M" description="The name of the map you wish to play"/>
            <variableArgument token="T" valueNotes="1..60" description="The time limit, in minutes (default 10 minutes if T is 0 or not specified)"/>
          </arguments>
        </command>

        <command name="pf">
          <description>Starts a map with the mode "Pistol Frenzy"</description>
          <examples>
            <example>
              <code><![CDATA[pf ac_complex]]></code>
            </example>
          </examples>
          <arguments>
            <variableArgument token="M" description="The name of the map you wish to play"/>
            <variableArgument token="T" valueNotes="1..60" description="The time limit, in minutes (default 10 minutes if T is 0 or not specified)"/>
          </arguments>
        </command>

        <command name="tdm">
          <description>Starts a map with the mode "Team Deathmatch"</description>
          <examples>
            <example>
              <code><![CDATA[tdm ac_complex]]></code>
            </example>
          </examples>
          <arguments>
            <variableArgument token="M" description="The name of the map you wish to play"/>
            <variableArgument token="T" valueNotes="1..60" description="The time limit, in minutes (default 15 minutes if T is 0 or not specified)"/>
          </arguments>
        </command>

        <command name="tktf">
          <description>Starts a map with the mode "Team Keep the Flag"</description>
          <examples>
            <example>
              <code><![CDATA[tktf ac_mines]]></code>
            </example>
          </examples>
          <arguments>
            <variableArgument token="M" description="The name of the map you wish to play"/>
            <variableArgument token="T" valueNotes="1..60" description="The time limit, in minutes (default 15 minutes if T is 0 or not specified)"/>
          </arguments>
        </command>

        <command name="tosok">
          <description>Starts a map with the mode "Team One Shot, One Kill"</description>
          <examples>
            <example>
              <code><![CDATA[tosok ac_complex]]></code>
            </example>
          </examples>
          <arguments>
            <variableArgument token="M" description="The name of the map you wish to play"/>
            <variableArgument token="T" valueNotes="1..60" description="The time limit, in minutes (default 15 minutes if T is 0 or not specified)"/>
          </arguments>
        </command>

        <command name="ts">
          <description>Starts a map with the mode "Team Survivor"</description>
          <examples>
            <example>
              <code><![CDATA[ts ac_complex]]></code>
            </example>
          </examples>
          <arguments>
            <variableArgument token="M" description="The name of the map you wish to play"/>
            <variableArgument token="T" valueNotes="1..60" description="The time limit, in minutes (default 15 minutes if T is 0 or not specified)"/>
          </arguments>
        </command>

        <command name="vip">
          <description>Starts a map with the mode "Hunt the Flag". Some players prefer the name "VIP" for this mode.</description>
          <examples>
            <example>
              <code><![CDATA[vip ac_mines]]></code>
            </example>
          </examples>
          <arguments>
            <variableArgument token="M" description="The name of the map you wish to play"/>
            <variableArgument token="T" valueNotes="1..60" description="The time limit, in minutes (default 15 minutes if T is 0 or not specified)"/>
          </arguments>
        </command>

      </identifiers>
    </section>
    <!-- Game Modes Section Ends -->
    <!-- Editing Configs Section Starts -->
    <section name="Editing configs" sortindex="10">
      <description>
        All the below commands are used specifically in map configuration files.
        Some of these commands can also be used without the need of a map configuration file.
    	</description>
      <identifiers sort="true">

        <command name="md2anim">
          <arguments>
            <argument token="A" description="anim"/>
            <argument token="F" description="frame"/>
            <argument token="R" description="range"/>
            <argument token="S" description="speed"/>
          </arguments>
        </command>

        <command name="md2emit">
          <arguments>
            <argument token="T" description="tag"/>
            <argument token="Y" description="type"/>
            <argument token="A" description="arg1"/>
            <argument token="B" description="arg2"/>
          </arguments>
        </command>

        <command name="md2tag">
          <arguments>
            <argument token="N" description="name"/>
            <argument token="A" description="vert1"/>
            <argument token="B" description="vert2"/>
            <argument token="C" description="vert3"/>
            <argument token="D" description="vert4"/>
          </arguments>
        </command>

        <command name="md3anim">
          <arguments>
            <argument token="A" description="anim"/>
            <argument token="S" description="startframe"/>
            <argument token="R" description="range"/>
            <argument token="V" description="speed"/>
          </arguments>
        </command>

        <command name="md3emit">
          <arguments>
            <argument token="T" description="tag"/>
            <argument token="Y" description="type"/>
            <argument token="A" description="arg1"/>
            <argument token="B" description="arg2"/>
          </arguments>
        </command>

        <command name="md3link">
          <arguments>
            <argument token="P" description="parentno"/>
            <argument token="C" description="childno"/>
            <argument token="T" description="tagname"/>
          </arguments>
        </command>

        <command name="md3load">
          <arguments>
            <argument token="M" description="model"/>
          </arguments>
        </command>

        <command name="md3skin">
          <arguments>
            <argument token="N" description="object name"/>
            <argument token="S" description="skin texture"/>
          </arguments>
        </command>

        <command name="mdlalphatest">
          <arguments>
            <argument token="A" description="alphatest"/>
          </arguments>
        </command>

        <command name="mdlcachelimit">
          <arguments>
            <argument token="L" description="cachelimit"/>
          </arguments>
        </command>

        <command name="mdlcullface">
          <arguments>
            <argument token="C" description="cullface" valueNotes="0||1"/>
          </arguments>
        </command>

        <command name="mdlscale">
          <arguments>
            <argument token="P" description="percent" valueNotes="0..100..N*100"/>
          </arguments>
        </command>

        <command name="mdlshadowdist">
          <arguments>
            <argument token="D" description="shadow distance"/>
          </arguments>
        </command>

        <command name="mdltrans">
          <description>translates (= moves) the model</description>
          <arguments>
            <argument token="X"/>
            <argument token="Y"/>
            <argument token="Z"/>
          </arguments>
        </command>

        <command name="mdltranslucent">
          <arguments>
            <argument token="T" description="translucency" valueNotes="0..100..N*100"/>
          </arguments>
        </command>

        <command name="mdlvertexlight">
          <arguments>
            <argument token="V" description="vertexligh" valueNotes="0||1"/>
          </arguments>
        </command>

        <command name="isolatecontext">
          <description>Isolates the given context. This disables access from this context to identifiers located in other contexts, also it removes all aliases created in this context once the running context changes</description>
          <arguments>
            <argument token="C" description="the context"/>
          </arguments>
          <references>
            <identifierReference identifier="sealcontexts"/>
          </references>
        </command>

        <command name="sealcontexts">
          <description>secure this configuration for the rest of the game</description>
        </command>

        <command name="scriptcontext">
          <arguments>
            <argument token="C" description="context"/>
            <argument token="N" description="idname"/>
          </arguments>
        </command>

        <command name="fog">
          <description>Sets the fog distance.</description>
          <remarks>
            <remark>
            You can do this for tweaking the visual effect of the fog, or if you are on a slow machine,
            setting the fog to a low value can also be a very effective way to increase fps (if you are geometry limited).
            Try out different values on big maps / maps which give you low fps. It is also good for aesthetic features of maps
            especially when combined with "fogcolour".
            </remark>
          </remarks>
          <references>
            <identifierReference identifier="fogcolour"/>
          </references>
          <arguments>
            <argument token="N" description="The fog distance" valueNotes="64...1024, default is 180"/>
          </arguments>
        </command>

        <command name="fogcolour">
          <description>Sets the fog and clearing colour.</description>
          <references>
            <identifierReference identifier="fog"/>
          </references>
          <arguments>
            <argument token="C" description="The colour" valueNotes="Hexadecimal colour, default is 0x8099B3"/>
          </arguments>
        </command>

        <command name="loadnotexture">
          <description>Binds a texture to be used if a slot couldn't be loaded with a given textures path.</description>
          <remarks>
            <remark>
            Binds the texture indicated in the filename to the texture slot of any textures that aren't found.
            The path is given exactly as with the texture-command, if it is omitted (or can't be loaded) the default is used.
            The default is located in packages/misc/notexture.jpg (not in packages/textures - where custom ones must reside!)
            </remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[loadnotexture // Reset to default]]></code>
            </example>
            <example>
              <code><![CDATA[loadnotexture "makke/black.jpg" // Any missing texture will show up black]]></code>
            </example>
          </examples>
          <references>
            <identifierReference name="texture" identifier="texture"/>
            <identifierReference name="texturereset" identifier="texturereset"/>
          </references>
          <arguments>
            <argument token="F" description="file name of the texture to bind" valueNotes="string"/>
          </arguments>
        </command>

        <command name="loadsky">
          <description>Loads a skymap for a map.</description>
          <remarks>
            <remark>The available skymaps reside in packages/textures/skymaps/..</remark>
            <remark>
            To select a skymap you need to use the full path from "packages/"
            but only up to the underscore "_" in the filename.
            </remark>
          </remarks>
          <examples>
            <example>
              <code><![CDATA[loadsky "textures/skymaps/makke/mountain"]]></code>
            </example>
          </examples>
          <arguments>
            <argument token="P" description="path to the six skymap textures" valueNotes="string"/>
          </arguments>
        </command>

        <command name="mapmodel">
          <description>Registers a mapmodel that can be placed in maps.</description>
          <remarks>
            <remark>
            A mapmodel registered with this command can be placed in a map using the 'newent mapmodel' command.
            The bounding box is an invisible force surrounding the model, allowing players to collide against it, instead
            of walking through the mapmodel. For more information about this command, read mapediting5.xml.
            </remark>
            <remark>Example: mapmodel 4 2 4 0 "modelname"</remark>
            <remark>This mapmodel has a bounding box of 8x8x2 in size (X/Y/Z) and by default hovers 4 units above ground.</remark>
          </remarks>
          <references>
            <identifierReference identifier="mapmodelreset"/>
            <identifierReference identifier="newent mapmodel"/>
          </references>
          <arguments>
            <argument token="R" description="The square radius of the bounding box." valueNotes="Integer"/>
            <argument token="H" description="The height of the bounding box." valueNotes="Integer"/>
            <argument token="Z" description="The initial height offset from the ground." valueNotes="Integer"/>
            <argument token="0" description="This integer is redundant. Leave it at zero so you don't break the command." valueNotes="0"/>
            <argument token="N" description="The name of the map model" valueNotes="string"/>
          </arguments>
        </command>

        <command name="mapmodelreset">
          <description>Resets the mapmodel slots/indices to 0 for the subsequent "mapmodel" commands.</description>
          <remarks>
            <remark>Each subsequent mapmodel command increases it again. See config/default_map_settings.cfg for an example.</remark>
          </remarks>
          <references>
            <identifierReference identifier="mapmodel"/>
            <identifierReference identifier="newent mapmodel"/>
          </references>
        </command>

        <command name="mapsound">
          <description>Defines a mapsound.</description>
          <remarks>
            <remark>
            Registers the sound as a map-specific sound. These map-specific sounds may currently
            only be used with "sound" entities within a map. The first map sound registered in a map has slot/index number 0
            and increases afterwards.
            </remark>
          </remarks>
          <references>
            <identifierReference identifier="newent sound"/>
            <identifierReference identifier="mapsoundreset"/>
          </references>
          <arguments>
            <argument token="N" description="Path to the sound file"/>
            <argument token="M" description="Maximum simultaneous sounds" optional="true" valueNotes="default -1 (unlimited)"/>
          </arguments>
        </command>

        <command name="mapsoundreset">
          <description>Resets the mapsound slots/indices to 0 for the subsequent "mapsound" commands.</description>
          <remarks>
            <remark>Each subsequent mapsound command increases it again. See config/default_map_settings.cfg for an example.</remark>
          </remarks>
          <references>
            <identifierReference identifier="newent sound"/>
            <identifierReference identifier="mapsound"/>
          </references>
        </command>

        <command name="shadowyaw">
          <description>Shadow yaw specifies the angle at which shadow stencils are drawn on a map.</description>
          <examples>
            <example>
              <code><![CDATA[shadowyaw 90]]></code>
            </example>
          </examples>
          <remarks>
            <remark>
            When specifying shadowyaw, remember that the default angle is 45 degrees. The example below
            would make the shadows appear at 90 degrees (45 degrees more to the left).
            </remark>
          </remarks>
          <arguments>
            <argument token="D" description="The angle in degrees to rotate the stencil shadows" valueNotes="0...360, default is 45"/>
          </arguments>
        </command>

        <command name="texture">
          <description>Binds a texture to the current texture slot.</description>
          <remarks>
            <remark>Binds the texture indicated in the filename to the current texture slot and increments the slot number.</remark>
            <remark>The texture is rendered at the given scale. At scale 1.0 (or if scale is 0), 32x32 texels cover one cube. At scale 2.0, which is the current maximum, it's 64x64.</remark>
          </remarks>
          <references>
            <identifierReference identifier="loadnotexture"/>
            <identifierReference identifier="texturereset"/>
            <identifierReference identifier="hirestextures"/>
          </references>
          <arguments>
            <argument token="S" description="Scale of the texture to load (should be a power of two)." valueNotes="Float"/>
            <argument token="F" description="File name of the texture to bind" valueNotes="String"/>
          </arguments>
        </command>

        <command name="texturereset">
          <description>Sets the texture slots/indicies to 0 for the subsequent "texture" commands.</description>
          <remarks>
            <remark>Each subsequent texture command increases it again. See config/default_map_settings.cfg for an example.</remark>
          </remarks>
          <references>
            <identifierReference identifier="texture"/>
          </references>
        </command>

        <command name="watercolour">
          <description>Determines the water colour in a map.</description>
          <references>
            <identifierReference identifier="waterlevel"/>
          </references>
          <remarks>
            <remark>
            You must define all 3 values, otherwise this command may not work
            correctly (use "1" as a placeholder if needed).
            </remark>
          </remarks>
          <arguments>
            <argument token="R" description="Red colour intensity" valueNotes="Between 1 and 255"/>
            <argument token="G" description="Green colour intensity" valueNotes="Between 1 and 255"/>
            <argument token="B" description="Blue colour intensity" valueNotes="Between 1 and 255"/>
          </arguments>
        </command>

        <variable name="waveheight">
          <description>Sets the wave height of water, between 0 (completely still, no waves at all) and 1 (very choppy).</description>
          <value token="F" description="wave height (floating-point value)" minValue="0" maxValue="1" defaultValue="0.3"/>
        </variable>

      </identifiers>
    </section>
    <!-- Editing Configs Section Ends -->
    <!-- TODO Section Starts -->
    <section name="TODO" sortindex="99">
      <description>This section describes identifiers that are not documented yet, but you may try to help us there.</description>
      <identifiers sort="true">

        <command name="delalias">
          <description>deletes the passed alias.</description>
        </command>

        <command name="getdemonameformat">
          <description>returns the currently used formatstring for demo filenames</description>
          <references>
            <identifierReference identifier="getdemotimeformat"/>
            <identifierReference identifier="demotimeformat"/>
            <identifierReference identifier="demonameformat"/>
          </references>
        </command>

        <command name="getdemotimeformat">
          <description>returns the currently used formatstring for demo timestamp</description>
          <references>
            <identifierReference identifier="demotimeformat"/>
            <identifierReference identifier="getdemonameformat"/>
            <identifierReference identifier="demonameformat"/>
          </references>
        </command>

        <command name="demonameformat">
          <description>set the formatstring for demo filenames - default: TODO (when stable)</description>
          <arguments>
            <argument token="S" description="STRING"/>
          </arguments>
          <remarks>
            <remark>we use the following internal mapping of formatchars:</remark>
            <remark>%g : gamemode (int)      %G : gamemode (chr)             %F : gamemode (full)</remark>
            <remark>%m : minutes remaining   %M : minutes played</remark>
            <remark>%s : seconds remaining   %S : seconds played</remark>
            <remark>%h : IP of server        %H : hostname of server         (%N : title of server (really???))</remark>
            <remark>%n : mapName</remark>
            <remark>%w : timestamp "when"</remark>
          </remarks>
          <references>
            <identifierReference identifier="getdemotimeformat"/>
            <identifierReference identifier="demotimeformat"/>
            <identifierReference identifier="getdemonameformat"/>
          </references>
        </command>

        <command name="demotimeformat">
          <description>set the formatstring for demo timestamp - default: TODO (when stable)</description>
          <arguments>
            <argument token="S" description="STRING"/>
          </arguments>
          <remarks>
            <remark>same as strftime() - see http://www.cplusplus.com/reference/clibrary/ctime/strftime/ for details</remark>
          </remarks>
          <references>
            <identifierReference identifier="getdemotimeformat"/>
            <identifierReference identifier="getdemonameformat"/>
            <identifierReference identifier="demonameformat"/>
            <webReference url="http://www.cplusplus.com/reference/clibrary/ctime/strftime/" name="C++-Reference"/>
          </references>
        </command>

        <variable name="demotimelocal">
          <description>use localtime (1) or GMT (0)?</description>
          <value token="B" description="BOOL" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <command name="addzip">
          <description>TODO: Description</description>
          <arguments>
            <argument token="A" description="TODO"/>
            <argument token="B" description="TODO"/>
            <argument token="C" description="TODO"/>
          </arguments>
        </command>

        <command name="fontskip">
          <description>At what char does the definition proceed?</description>
          <arguments>
            <argument token="A" description="TODO"/>
          </arguments>
        </command>

        <command name="gettext">
          <description>An alias used for i18n. Translateable text should be marked [(_ "this is the EN-us variant of the text")].</description>
          <arguments>
            <argument token="M" description="I18Nmessage"/>
          </arguments>
        </command>

        <command name="menufont">
          <description>switch the font in which the menu is displayed</description>
          <arguments>
            <argument token="F" description="FONT"/>
          </arguments>
        </command>

        <command name="menucanblink">
          <description>for toggling on the ability for menutext to have the blinking bit set. The global setting of 'allowblinkingtext' overrides this</description>
          <arguments>
            <argument token="T" description="0 || !=0"/>
          </arguments>
          <references>
            <identifierReference identifier="allowblinkingtext"/>
          </references>
        </command>

        <command name="allowblinkingtext">
          <description>for toggling on the ability for any text to have the blinking bit set.</description>
          <arguments>
            <argument token="T" description="TOGGLE" minValue="0" maxValue="1" defaultValue="0"/>
          </arguments>
          <references>
            <identifierReference identifier="menucanblink"/>
          </references>
        </command>

        <command name="menuitemmapload">
          <description>a menuitem that loads a map, displays the title and the preview or a default image</description>
          <arguments>
            <argument token="M" description="MAP"/>
            <argument token="T" description="TEXT"/>
          </arguments>
        </command>

        <command name="musicpreload">
          <description>TODO: Description</description>
          <arguments>
            <argument token="A" description="TODO"/>
          </arguments>
        </command>

        <command name="quicknadethrow">
          <description>TODO: Description</description>
        </command>

        <command name="removezip">
          <description>TODO: Description</description>
          <arguments>
            <argument token="A" description="TODO"/>
          </arguments>
        </command>

        <command name="setburst">
          <description>TODO: Description</description>
        </command>

        <command name="setwptriggernr">
          <description>TODO: Description</description>
          <arguments>
            <argument token="A" description="TODO"/>
          </arguments>
        </command>

        <variable name="applydialog">
          <description>do you <i>really</i> want to quit?</description>
          <value token="N" description="TODO" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="autoscopesens">
          <description>TODO</description>
          <value token="N" description="TODO" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="interms">
          <description>TODO</description>
          <value token="N" description="TODO" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <variable name="mapdimsfactor">
          <description>TODO</description>
          <value token="N" description="TODO" minValue="0" maxValue="4" defaultValue="2"/>
        </variable>

        <variable name="maxrollremote">
          <description>TODO</description>
          <value token="N" description="TODO" minValue="0" maxValue="20" defaultValue="0"/>
        </variable>

        <variable name="mdldlist">
          <description>TODO</description>
          <value token="N" description="TODO" minValue="0" maxValue="1" defaultValue="1"/>
        </variable>

        <variable name="mfilter">
          <description>TODO</description>
          <value token="N" description="TODO" minValue="0.0" maxValue="6.0" defaultValue="0.0"/>
        </variable>

        <variable name="mouseaccel">
          <description>TODO</description>
          <value token="N" description="TODO" minValue="0.0" maxValue="1000.0" defaultValue="0.0"/>
        </variable>

        <variable name="scopesensscale">
          <description>TODO</description>
          <value token="N" description="TODO" minValue="0.001" maxValue="1000.0" defaultValue="0.5"/>
        </variable>

        <variable name="sensitivityscale">
          <description>TODO</description>
          <value token="N" description="TODO" minValue="0.001" maxValue="1000.0" defaultValue="1.0"/>
        </variable>

        <variable name="testvel">
          <description>TODO</description>
          <value token="N" description="TODO" minValue="0" maxValue="1" defaultValue="0"/>
        </variable>

        <command name="showedithide">
          <description>shows the settings of edithide (sparklies)</description>
        </command>

        <command name="setedithide">
          <description>Hides the list of entity types you set. Pass 1 for light, 2 for spawn, or use "playerstart".</description>
          <arguments>
            <argument token="L" description="list of types to hide"/>
          </arguments>
          <remarks>
            <remark>Pass light or 1, playerstart or 2. Call [setedithide 1 10] to just hide all lights and mapmodels.</remark>
            <remark>Or [setedithide [3 4 5 6 7 8 9 12 13]] for all the clips, ammo, nades, health, helmet, armour, akimbo, ladder, and flag.</remark>
            <remark>Reversly just use [1 2 10 11 13 14 15 16] to hide light, spawn, mapmodel, ladder, sound, clip, plclip.</remark>
            <remark>Only shown entity types are potential 'closest entity'.</remark>
          </remarks>
        </command>

        <command name="seteditshow">
          <description>Hides all but the single entity type you give. Pass 1 for light, 2 for spawn, or use [playerstart].</description>
          <arguments>
            <argument token="T" description="type to show exclusively"/>
          </arguments>
          <remarks>
            <remark>Just run [seteditshow model] and see just the model entities.</remark>
            <remark>The other entity types are ignored as closestentity too.</remark>
            <remark>other call forms may use the numerical item type</remark>
          </remarks>
        </command>

      </identifiers>
    </section>
    <!-- "TODO" Section Ends -->
  </sections>
</cuberef>
